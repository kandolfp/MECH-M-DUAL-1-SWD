# Package manager {#sec-intro-packagemanager}

In general a package manager (or package-management system) is a tool that automates the process of:

- installing,
- upgrading,
- configuring,
- removing,
- ...

for computer programs, software libraries, general data, or other tasks.
We all use package managers on our smart phones or computers.
They come in various forms and _accessability_ like the GUIs _Google Play_,  _App Store_, _Microsoft Store_, but also in terminal form as _apt_, _dnf_, _zypper_, _homebrew_, and many more.
Most of these tools give us an easy way to work with some application without needing to know much about how the software is built. The same is true for _software design_.

They especially take care that our modern world of digital infrastructure works even though it often looks like this: 

::: {#fig-xkcd-dependency}
[![](https://imgs.xkcd.com/comics/tech_loops.png)](https://xkcd.com/1579/)

The [xkcd comic #1579](https://xkcd.com/1579/) discussing python enviroments. Click the image to get to the original image source [https://imgs.xkcd.com/comics/tech_loops.png](https://imgs.xkcd.com/comics/tech_loops.png). 
:::

Back in the days, and often still for some languages, you manually had to integrate some library you wanted to use and they often came with elaborate build scripts (with their own dependencies, ... _insert recursion here_).
Especially cumbersome were problems where you needed different versions of the same library for different projects.
Nowadays, this task is performed by package managers to the relief of developers everywhere.
If you have a good package manager you do not realize the burden it takes of your shoulders.
It is worth highlighting, that a good package manager can define the difference between a successful programming language and a footnote on the [index of programming languages](https://en.wikipedia.org/wiki/List_of_programming_languages).

While it would be worthwhile to visit the various ways and strategies these systems take we will focus on systems for `python`.

## Package management for `python`
Before we go into detail for the package manager of choice we need to discuss what we actually want such a system to provide us with.

As a starting point have a look at what [xkcd](https://xkcd.com/) has to say about it:

::: {#fig-xkcd-dependency}
[![](https://imgs.xkcd.com/comics/python_environment.png)](https://xkcd.com/1987/)

The [xkcd comic #1987](https://xkcd.com/1987/) discussing python enviroments. Click the image to get to the original image source [https://imgs.xkcd.com/comics/python_environment.png](https://imgs.xkcd.com/comics/python_environment.png). 
:::

::: {.callout-important}
Please think about what you believe are **must have** and **nice to have** features that we should have for our package manager.
:::

{{< pagebreak >}}

Here is the (probably not complete) authors list (random order):

- must haves
   - per project based environments ([venv](https://docs.python.org/3/library/venv.html))
   - lock files for exact package version **reproducibility**, see {@sec-intro-pm-reproducibility}
      - cross platform dependencies
   - readable documentation
- nice to haves
   - multiple sources for packages
      - private repos (work environment)
   - stay close to official PEP standards [^peps]
   - backwards compatibility for lock files
   - easy way to have a project version
   - local install for self written packages
   - different algorithms for building the dependency tree
   - deployment with testing capabilities
   - integrate with virtualization
   - compatibility to other package managers
   - allow integration of environment variables, e.g. `.env` files
- obvious
   - integrate with version control software
   - provide a wide range of packages
   - have a good user interface

The [Python Packaging Authority (PyPA)](https://packaging.python.org/en/latest/glossary/#term-Python-Packaging-Authority-PyPA)[^pypa] provides a [user guide](https://packaging.python.org/) for how to distribute and install Python packages.
As soon as you think of providing your own package for others you should carefully study this guide, but for us we currently only have a quick look into [Tool recommendations](https://packaging.python.org/en/latest/guides/tool-recommendations/).

> The Python packaging landscape consists of many different tools. For many tasks, the Python Packaging Authority (PyPA, the working group which encompasses many packaging tools and maintains this guide) purposefully does not make a blanket recommendation; for example, the reason there are many build backends is that the landscape was opened up in order to enable the development of new backends serving certain usersâ€™ needs better than the previously unique backend, `setuptools`. This guide does point to some tools that are widely recognized, and also makes some recommendations of tools that you should _not_ use because they are deprecated or insecure.
>
> **Source**: From the [PyPa Guide](https://packaging.python.org/en/latest/guides/tool-recommendations/), as of 9th of September 2024

The standard tool is `pip` and for _scientific software_ specifically [`conda`](https://conda.io/) and [`Spack`](https://spack.readthedocs.io/), respectively.

We are going to look at [`pdm`](https://pdm-project.org/) (see @pdm) as this is a modern Python package manager that uses `pyproject.toml` files to store metadata of the project and much more.

:::{.callout-note}
The main thought behind selecting `pdm` for further discussions here is the experience of the authors regarding cross platform support, ease of use, and transferability to other languages like `julia`, `rust`, or `go`.
Especially the `Pgk.jl` package in  `julia` was such a drastic contrast to `conda` that the authors searched for an alternative.
:::

## An introduction on working with PDM for your `python` project

:::{.callout-important}
This part is designed as a type along session!
:::

> PDM can manage virtual environments (venvs) in both project and centralized locations, similar to `Pipenv`. It reads project metadata from a standardized `pyproject.toml` file and supports `lockfiles`. Users can add additional functionality through plugins, which can be shared by uploading them as distributions.
>
>Unlike Poetry and Hatch, PDM is not limited to a specific build backend; users have the freedom to choose any build backend they prefer.
>
>**Source**: From the [pdm-project on github](https://github.com/pdm-project/pdm/blob/c2dad76b062a194e80d931aba2efc0614b45c525/README.md#this-project), as of 9th of September 2024

The following screen cast gives us a quick overview of its capabilities.
[![Original source from https://pdm-project.org/latest/ - asciicast](https://asciinema.org/a/jnifN30pjfXbO9We2KqOdXEhB.svg)](https://asciinema.org/a/jnifN30pjfXbO9We2KqOdXEhB)

:::{.callout-note}
For this guide we closely follow the notes on the project page [https://pdm-project.org/](https://pdm-project.org/latest/), please note that the original code and potential updates to it can be found there, see @pdm.
::: 

### Installation
First we need to install `pdm` to have it available (globally) on our system, for this to work we need python version 3.8 or higher available on the system.

The recommended way os to use the provided install script.

::: {.panel-tabset}
## Linux/Mac
```bash
curl -sSL https://pdm-project.org/install-pdm.py | python3 -
```
## Windows
```powershell
(Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).Content | py -
```
:::

Of course we do not just download a file from the internet without checking the content.
At the time of writing the current sha256 is
```bash
cdaae475a16ae781e06c7211c7b075df1b508470b0dc144bbb73acf9a8389f91  install-pdm.py
```
see [install-pdm.py.sha256](https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py.sha256)

You can check the file sha by calling:

::: {.panel-tabset}
## Linux/Mac
```bash
curl -sSL https://pdm-project.org/install-pdm.py | shasum -a 256
```
## Windows
```powershell
Get-FileHash -InputStream (Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).RawContentStream -Algorithm SHA256
```
:::

By default, `pdm` is installed into the user space (depending on the platform) but this can be modified via arguments to script, see the help option of the script.

#### Optional - Shell completion
We would recommend for a better user experience to include the shell completion 

::: {.panel-tabset}
## Bash (Linux)
```bash
pdm completion bash > /etc/bash_completion.d/pdm.bash-completion
```
## Zsh (Mac)
```zsh
# Make sure ~/.zfunc is added to fpath, before compinit.
pdm completion zsh > ~/.zfunc/_pdm
```
## Powershell (Windows)
```powershell
# Create a directory to store completion scripts
mkdir $PROFILE\..\Completions
echo @'
Get-ChildItem "$PROFILE\..\Completions\" | ForEach-Object {
    . $_.FullName
}
'@ | Out-File -Append -Encoding utf8 $PROFILE
# Generate script
Set-ExecutionPolicy Unrestricted -Scope CurrentUser
pdm completion powershell | Out-File -Encoding utf8 $PROFILE\..\Completions\pdm_completion.ps1
```
:::

### Start a new project

In order to start a new project you can use `pdm init`.
This will prompt you with a couple of questions and based on the answers the `pyproject.toml` file is initialized.

1. We need to select a python interpreter.
`pdm` will search for all available interpreters on your path, if you need a different version than available you can use `pdm` to install a new standalone `python` version, see `pdm python` command or the [docs](https://pdm-project.org/latest/usage/project/#install-python-interpreters-with-pdm)[^2].

1. By default `pdm` will create a new `virtualenv` for you as this is the recommend procedure, if you want to influence this behavior see [docs](https://pdm-project.org/latest/usage/venv/).

1. We need to specify a project name. This name is used in the `pyproject.toml` and `pdm` will also generate a `src/<name>` directory for you right away (together with a `test` directory). `pdm` uses its default template, see [docs](https://pdm-project.org/latest/usage/template/).

1. The version of your project needs to be initialized.
`pdm` follows [semantic versioning](https://semver.org/)[^3] by default.
If you do not have a specific version in mind stick to `0.1.0` for a new project.

1. Next we need to decide if we plan for distributing the project.
For now `n` will suffice, but hopefully by the end of these notes you feel comfortable enough to release your own package as soon as this is the case have a look at the [docs](https://pdm-project.org/latest/usage/publish/) and the [Python Packaging User Guide](https://packaging.python.org/).

1. Licensing is next. This is a rather important issue when you release software, but we need to postpone it as well. So stick to the default for now. 

1. Author name and email can (and should) be a list if you have multiple contributors.
`pdm` will try to figure out defaults from system settings.

1. Last the python version required is asked.
Here you can specify the compatibility of your project to various python versions[^4].
For good reason, by default it will only allow the current version you selected in the first step. In theory you can specify something like `>=3.8,!=3.9.0,<3.13` (a python version between 3.8 and 3.13, including 3.8 but excluding 3.13 and additionally excluding 3.9.0) but be aware that might become tricky when adding dependencies.

Now you have a new project available and it should look like this:
```bash
$ mkdir test                # <1>
mkdir: created directory 'test'

$ cd test/                  # <2>

$ pdm init                  # <3>
Creating a pyproject.toml for PDM...
Please enter the Python interpreter to use
 0. cpython@3.11 (/usr/local/bin/python3)
 1. cpython@3.12 (/usr/bin/python3.12)
 2. cpython@3.11 (/usr/local/bin/python3.11)
 3. cpython@3.8 (/usr/local/bin/python3.8)
Please select (0): 1
Virtualenv is created successfully at /tmp/test/.venv
Project name (test): 
Project version (0.1.0): 
Do you want to build this project for distribution(such as wheel)?
If yes, it will be installed by default when running `pdm install`. [y/n] (n): n
License(SPDX name) (MIT):  
Author name (John Doe): 
Author email (John.Doe@generic.edu): 
Python requires('*' to allow any) (==3.12.*):
Project is initialized successfully

$ tree -a               # <4>
.
â”œâ”€â”€ .gitignore
â”œâ”€â”€ .pdm-python
â”œâ”€â”€ __pycache__
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ src
â”‚Â Â  â””â”€â”€ test
â”‚Â Â      â”œâ”€â”€ __init__.py
â”‚Â Â      â””â”€â”€ __pycache__
â”œâ”€â”€ tests
â”‚Â Â  â”œâ”€â”€ __init__.py
â”‚Â Â  â””â”€â”€ __pycache__
â””â”€â”€ .venv
    â”œâ”€â”€ bin
    â”‚Â Â  â”œâ”€â”€ activate
    â”‚Â Â  â”œâ”€â”€ activate.csh
    â”‚Â Â  â”œâ”€â”€ activate.fish
    â”‚Â Â  â”œâ”€â”€ activate.nu
    â”‚Â Â  â”œâ”€â”€ activate.ps1
    â”‚Â Â  â”œâ”€â”€ activate_this.py
    â”‚Â Â  â”œâ”€â”€ python -> /usr/bin/python3.12
    â”‚Â Â  â”œâ”€â”€ python3 -> python
    â”‚Â Â  â””â”€â”€ python3.12 -> python
    â”œâ”€â”€ .gitignore                             # <5>
    â”œâ”€â”€ lib
    â”‚Â Â  â””â”€â”€ python3.12
    â”‚Â Â      â””â”€â”€ site-packages
    â”‚Â Â          â”œâ”€â”€ _virtualenv.pth
    â”‚Â Â          â””â”€â”€ _virtualenv.py
    â””â”€â”€ pyvenv.cfg

12 directories, 19 files
```
1. create a directory
2. change into this directory
3. initialize with `pdm init`
4. list all files in the directory
5. Note: a `.gitignore` is created

The last highlighted section tells us that `pdm` is designed to work with a _version control system_.
By default it uses `git` as seen by the `.gitignore` file highlighted.
In this context:

:::{.callout-important}
You **must** commit the `pyproject.toml` file. You **should** commit the `pdm.lock` and `pdm.toml` file. **Do not** commit the `.pdm-python` file.[^5]
:::

To check what setup `pdm` created for you, you can use the `pdm info` command, where `--env` option provides us with more details about the environment/platform.

```bash
$ pdm info
PDM version:
  2.18.1
Python Interpreter:
  /tmp/test/.venv/bin/python (3.12)
Project Root:
  /tmp/test
Local Packages:
  
$ pdm info --env
{
  "implementation_name": "cpython",
  "implementation_version": "3.12.3",
  "os_name": "posix",
  "platform_machine": "x86_64",
  "platform_release": "6.8.0-41-generic",
  "platform_system": "Linux",
  "platform_version": "#41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024",
  "python_full_version": "3.12.3",
  "platform_python_implementation": "CPython",
  "python_version": "3.12",
  "sys_platform": "linux"
}
```

:::{.callout-note}
Of course it is also possible to import from other package manager systems, see [docs](https://pdm-project.org/latest/usage/project/#import-the-project-from-other-package-managers).
:::

### Manage dependencies

Now that the project exists we can look at the main task: **managing packages**.
We will cover the basics what we need, for a full guide see [Manage Dependencies](https://pdm-project.org/latest/usage/dependency/) at docs.

#### Add dependencies

To add a dependency you can use the `pdm add` command, where the system follows the [PEP 508](https://peps.python.org/pep-0508/) specifications.

```bash
pdm add requests           # add requests
pdm add requests==2.25.1   # add requests with version constraint
pdm add requests[socks]    # add requests with extra dependency
pdm add "flask>=1.0" flask-sqlalchemy   # add multiple dependencies with different specifiers
``` 

:::{.callout-note}
By default `pdm` searches for dependencies on [PyPI](https://pypi.org/), see [docs](https://pdm-project.org/latest/usage/config/#configure-the-package-indexes) for how to add to or modify the package index.

If you are not sure how a package is called use `pdm search` to locate it (even though the search could be improved).
:::

It is rather common for python dependencies to have dependencies on their own.
`pdm` will make sure to install all of those as well.
Everything that is installed will end up in the `pdm.lock` file with the exact version and where it comes from.

In contrast to other dependency management systems such as `requirements.txt` a very handy feature of `pdm` is that it will only add the specified dependencies to the `pyproject.toml` and not all sub-dependencies.
This makes it easier for somebody else to keep track of what your actual dependencies are and especially for update procedures.

##### Add local dependencies

Quite often it happens that you develop a project and use it as a dependency in some other project you are working on.
In this case you want to have a local dependency.
This can be added by calling

```bash
pdm add ./my-project
```
It is important to mention, that the path **must** start with `.` otherwise it is not interpreted as a local dependency.

#### Development dependencies

With `pdm` you can also _define groups_ of dependencies that are particularly useful during development.
This might be a linter, formatter, or tools for testing and creating the docs.

```bash
pdm add -dG lint flake8
```

You will find these dependencies in a special section in you `pyproject.toml` file, namely:
```toml
[tool.pdm.dev-dependencies]
lint = ["flake8"]
```

#### Inspect dependencies

If you need to find out what your installed dependencies are you can use `pdm list` or `pdm list --tree`.

```bash
$ pdm list --tree
requests 2.32.3 [ required: >=2.32.3 ]
â”œâ”€â”€ certifi 2024.8.30 [ required: >=2017.4.17 ]
â”œâ”€â”€ charset-normalizer 3.3.2 [ required: <4,>=2 ]
â”œâ”€â”€ idna 3.8 [ required: <4,>=2.5 ]
â””â”€â”€ urllib3 2.2.2 [ required: <3,>=1.21.1 ]
```

#### Update dependencies

If you find that a package has released an update that is required for your project you can us `pdm` to update your packages:

```bash
pdm update
```
will update all packages (if possible) in your `pdm.lock` file
```bash
pdm update requests
```
will only update the specified dependency (you can specify multiple packages).

#### Remove dependencies

If you added a dependency but no longer need it you can remove it by calling `pdm remove`.
Note that all sub-dependencies will be removed as well. 

#### List outdated dependencies

With `pdm outdated` you get a list of outdated packages with the latest version available.

#### Other dependencies than python packages

It might happen that your project needs additional dependencies other than python resources.
In this case you can also use `pdm` to install a multitude of those.

As an example, you can install the Intel Math Kernel Library (mkl) and `cmake` by calling
```bash
pdm add mkl cmake
```

### Initialize an existing project

If the `pdm` project already exists, e.g. you just cloned a project, all you need to do is run
```bash
pdm install
```
to check the project file for changes, update the lock file if needed and run `pdm sync` to install all packages from the lock file.

### Running your code

As mentioned throughout these notes, `pdm` uses `virtualenv` to manage your project.
This means you need to activate the project to work with it. 

If you simply want to run a python script in your environment use
```bash
pdm run python <SCRIPT.py> <arguments>
```
and similar you can start the python console via 
```bash
pdm run python
```

If you need to work in your current terminal with the environment you created it is easier to use `pdm venv activate` that will tell you how to activate your enviroment in your current terminal. In bash you can use
```bash
eval $(pdm venv activate)
```
to directly activate the environment. 

:::{.callout-tip}
You should set up your IDE such that it searches for `.venv` directories for the python interpreter to make sure you do not get missing includes warnings and if you use the direct call or debug features you call the correct version.
:::

This concludes our little guide for package managers in python.
Make sure to revisit this sections and the [pdm docs](https://pdm-project.org) if you need them for the course of this section.

[^peps]: Short for _Python Enhancement Proposals_, see [Python PEPs](https://peps.python.org/)
[^pypa]: The Python Packaging Authority (PyPA) is a working group that maintains a core set of software projects used in Python packaging, see [https://www.pypa.io/](https://www.pypa.io/) as at 9th of September 2024
[^1]: From the [pdm-project on GitHub](https://github.com/pdm-project/pdm/blob/c2dad76b062a194e80d931aba2efc0614b45c525/README.md#this-project), as of 9th of September 2024
[^2]: In case you are wondering what the `.pdm-python` files is, it stores the path to your `python` interpreter and is used for subsequent calls.
[^3]: We recommend having a read of [semver.org](https://semver.org/)
[^4]: Python does not follow SemVer (see [docs](https://docs.python.org/3/faq/general.html#how-does-the-python-version-numbering-scheme-work)), sometimes a _minor_ version will have a breaking change, so make sure to check the _Porting to Python X.Y_ section for _What's new_.
[^5]: Quote from [pdm-project.org](https://pdm-project.org/latest/usage/project/#working-with-version-control) as at 9th of September 2024