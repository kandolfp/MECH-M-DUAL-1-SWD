# Introduction to Python {#sec-intro-python}

In these notes we will focus on Python as the programming language of choice.
The main reason for this is that python is currently the language where a lot of programming for _data science_ is happening.
Other languages like [Julia](https://julialang.org) are catching up quick though.
In general, Python is a very popular programming language.
It currently ranks #2 in the [Redmonk Rating](https://redmonk.com/sogrady/category/programming-languages/).

::: {.callout-note}
This section is going to give a rough overview to get us started but we are not going into much detail.
We will focus on particular aspects of the language in later parts to get a more detailed look. 
:::

So let us start with a brief introduction and then get into programming with Python, as usually there is no better way to learn a language than using it. 
Python has the reputation of being _easy_ to learn, even though not always straight forward.

Python is a so called high-level[^1] programming language that was designed with an emphasis on readability[^2] in mind.
It was developed by [Guido van Rossum](https://gvanrossum.github.io) in the late 80s and the first release of version `0.9.0` to the public came in 1991.
Subsequently, in October 2000 Python `2.0` and in 2008 Python `3.0` were released.
There are currently multiple supported versions of Python available were `3.12.6`[^3] is the latest stable release, see [Wikipedia for the history of Python](https://en.wikipedia.org/wiki/History_of_Python).

::: {.callout-important}
In these notes we will focus on Python `3.12`.

Python does not follow Semantic Versioning[^4], see [python docs](https://docs.python.org/3/faq/general.html#how-does-the-python-version-numbering-scheme-work)), sometimes a _minor_ version will have a breaking change, so make sure to check the _Porting to Python X.Y_ section for _What's new_ if included code is no longer working.
:::

With regards to style Python combines _imperative_ , _object oriented_, and _functional_ programming paradigms (more on that later). 
Furthermore, it is available for all major (and minor) computing platforms and there is an ever growing library of additional packages that can be loaded to extend the base functionality.
This allows you to write highly complex programs with a few lines of code.

::: {#fig-xkcd-dependency}
[![](https://imgs.xkcd.com/comics/python.png)](https://xkcd.com/353/)

The [xkcd comic #353](https://xkcd.com/353/) discussing the python programming language. Click the image to get to the original image source [https://imgs.xkcd.com/comics/python.png](https://imgs.xkcd.com/comics/python.png). 
:::

Python is an interpreted language, meaning that the code you write is not compiled to _machine code_ (like in C/C++ or Fortran) but rather _interpreted/executed_ by an (appropriately named) interpreter.
This allows you to write a program interactively (in the Python REPL[^5]) or provide the interpreter with a script file that is processed one line after the next.
These files usually have the ending `.py`.
The interpreter and the language are most of the time both called Python.

As all programming languages, Python has a certain syntax that we need to follow otherwise the interpreter can not execute the code, this is similar to grammar in a language like _English_.
The big difference (as probably can not be avoided in these notes) is that we still understand an English text if it is full of grammar mistakes, spelling errors or plain typos.
Python will not give you as much leeway, but some.

::: {.callout-important}
There is still some room to wriggle around but it is best if you hold yourself to the [Style guide - PEP 8](https://peps.python.org/pep-0008/) right from the start (we will do so in these notes, if not open an issue on GitHub, Link on the right below the section index).
:::

## Installation {.unnumbered}

On Linux and Mac a recent Python version is usually installed.
Check this by opening a terminal and running
```bash
$ python3 --version
Python 3.12.3
```
and you should see something similar if not the same, if not have a look [here](https://docs.python.org/3/using/index.html) and search for your platform.

For Windows 10 and above we can use the version from the Microsoft Store, if you have another version also see [here](https://docs.python.org/3/using/index.html) and search for your platform.

## Getting started

:::{.callout-caution icon=false}
## {{< fa keyboard >}} Type along

This part is designed as a type along session!
:::

As common for programming guides we start with:
```{python}
#| classes: styled-output
print('Hello, World')
```

:::{.callout-note}
These notes are generated from markdown and executable code (for a lot of the Python aspects).
This means sometimes the results are part of the text but if we need to make sure you can see the output we highlight it with some background color.
For this reason and to make it easier to copy and past code from the notes we omit `>>>` that you see in your REPL.
:::

Lets break down what we did above[^6]:

- we called a function `print` - indicated by `(` and `)` respectively,
- we handed the text _Hello, World_ to that function - indicated by the two `'`,
- the REPL returned the result and printed it on screen.

The text above is called a _string_ and you can do operations with strings

```{python}
#| classes: styled-output
print('Hello,' + 'World')
print('Spam' * 5)
```

Here `+` and `*` are so called _operators_.
The first combines (concatenates) two strings, the second multiplies one string. 

::: {.callout-important}
The [Style guide - PEP 8](https://peps.python.org/pep-0008/) tells us that an operator should have a leading and tailing white space.
:::

In case we want to know more about the function `print` we can use another function to get some more insight
```{python}
#| classes: styled-output
help(print)
```
Now let us pick up a bit of speed
```{python}
#| classes: styled-output
# Mathematical operators  # <1>
3 + 2
2 * 10
4 // 2    # Integer division # <2>
4 / 3
(9 + 8) * 32
```
1. We can write comments, that get ignored by the interpreter. They start with `#`
2. Comments can also follow a command

::: {.callout-note}
If you copy and execute the code above your output will differ and look something like:
```python
>>> # Mathematical operators
>>> 3 + 2
5
>>> 2 * 10
20
>>> 4 // 2
2
>>> 4.0 / 2
2.0
>>> (9 + 8) * 32
544
```
This is due to the fact that the system used to create these notes does not feed the input to the REPL one by one but rather as a _script_.
Therefore, we will often just suppress the output or if we want to make sure something is printed in the notes we will use `print` explicitly.
:::

We can assign a value to a _variable_ and use them later on:
```{python}
#| output: false
pi = 3.1415926535897932
x = 90

# Convert degree to radiant
x_rad = x * (pi / 180)

# Convert it back to degree
x_new = x_rad * (180 / pi)

# Check if they are the same
x == x_new
```

There are the usual _boolean_ operators for comparison:
```{python}
#| output: false
1 != 2
1 < 2
2 > 3
1.0 >= 1
0.99 <= 1

# and combine them with logical operators
(1.0 <= 1) and (1.0 >= 1)
(2 < 1) or (2 > 1)
not (1 != 2)
```

We can also change the value of a variable:
```{python}
#| classes: styled-output
# We can make the printed statement more elaborate
print('x =', x)
x = 45.0
print(f'x = {x}')
```
:::{.callout-note}
Python is dynamically typed, meaning that the type of a variable is checked during runtime and not beforehand.

As a result you can change the type[^7] of a variable without the interpreter complaining about it.
This is often the cause of strange bugs in programs so be aware that Python has types, even though we do not always see them.
:::

In order to understand some of the control sequences we also need to introduce _lists_.
In essence, they represent an ordered sequence of values that can have arbitrary types.
```{python}
#| output: false
# List of integers
[2, 4, 6, 8]
# List of strings
['A', 'B', 'C']
# List of lists
[[2, 4, 6, 8], ['A', 'B', 'C']]
# List of mixed types
[2, 'A']
# Assign a list to a variable
integers = [2, 4, 6, 8]
# Changing values
integers[1] = -4
```

We also have control sequences:
```{python}
#| classes: styled-output
if x < 90:
  x = x * 2      # This section gets executed if the statement is true
else:        # And this if it is false
  x = x / 2

print(f'x = {x}')

if x < 45:
  x = x * 2
elif x < 90:
  x = x * 3      # If the first statement is false but the second true
else:
  x = x ** 2     # If none of the above statements is true
print(f'x = {x}')
```

As well as loops:
```{python}
#| classes: styled-output
# the for loop works best with lists or sets
sum = 0
for i in integers:
  sum = sum + i

mean = sum / len(integers)   # len computes the length of a list
print(mean)

# While loops run until a statement is no longer true
a = 5
b = 2
c = 1
while (a > 0):
  a = a - 1
  c = c * b
print(c)
```

:::{.callout-caution}
There is an internal function called `sum` and we just overwrote this function, so be careful how you choose your variable names.
:::

Of course there are easier ways to compute the sum of a list or $2^5$.
For this we need to import additional functions
```{python}
#| classes: styled-output
import math
mean = math.fsum(integers) / len(integers)
print(mean)

c = math.pow(2, 5)
print(c)
```

`math` is one of the [Python standard libraries](https://docs.python.org/3/library/index.html), but quite often they do not suffice for the task at hand and you need some additional libraries.

In the next section we will discuss package managers and one possible solution for this.

Furthermore, so far we only typed in the REPL and if we want to do the same again we need to retype everything.
So we need to talk about script files which will lead us to version control.

For now, this ends our brief start with Python.

[^1]: A language that has a strong abstraction level between the hardware of the computer and the user.
[^2]: The term describes how easy it is for a human reader to follow the purpose, control flow and the single operations of source code, i.e. a program.
[^3]: As of September 6th 2024, see [Python Source Releases](https://www.python.org/downloads/source/) for a current overview.
[^4]: A way of specifying what the usual three numbers of a version mean, see [semver.org](https://semver.org/)
[^5]: Read Evaluate Print Loop
[^6]: We start easy and with a bit more explanation, but do not worry we will not always break it down as much.
[^7]: Type could be something like integer, float, or string