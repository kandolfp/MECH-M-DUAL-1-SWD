# Unified Programming Language {#sec-uml}

Now that we know about the basics of OOP and how we can deal with it in Python we can take a step back and look at an abstract interface that helps us work in the framework of OOP.
The Unified Modelling Language (UML) can be used to define how classes look like and how they interact.
It provides a language independent way of designing a OO program.

So let us extend our class `Cat` first with an UML diagram before we extend the code. 
In UML we see how classes interact but in general we will not see any specific object.

![UML Class diagram](../_assets/oop/UML_class.svg){.lightbox}

Furthermore, we can model different relationships with different arrow styles, how does this look like for our big cats:

```{mermaid}
%%| fig-cap: "Relationship between different classes"
classDiagram
    note "About big cats"
    Cat <|-- Lion
    Cat <|-- Tiger
    note for Tigon "Hybrid between male lion\nand female tiger"
    Tiger <|-- Ligar
    Lion <|-- Ligar
    Lion <|-- Tigon
    Tiger <|-- Tigon
    Cat : +String name
    Cat : +List~String~ habitat
    Cat : +String gender
    Cat : +int age
    Cat : -String mood
    Cat : -Cat father
    Cat : -Cat mother
    Cat: +breath()
    Cat: +mate(other Cat)
    Cat: +eat(food)
    Cat: +run(destination)
    Cat: +sleep(hours float)
    Cat: +meow()
    class Ligar{
        -Lion father
        -Tigar mother
    }
    class Tigon{
        -Tiger father
        -Lion mother
    }
    class Lion{
        -Lion father
        -Lion mother
    }
    class Tiger{
        -Tiger father
        -Tiger mother
    }
```
## One way relationships

Besides _inheritance_ we can have other relationships between classes.
```{mermaid}
%%| fig-cap: "Relationships in terms of arrows"
classDiagram
Tiger --|> Cat : Inheritance
Mammal ..|> Animal : Generalization
Math -- Informatics : Association/Link
Professor --> Student : one way Association
```
1. Inheritance - `Tiger` inherits from `Cat` -  _is a_ relation
1. Generalization - `Mammal` implements/is a specific variant of `Animal`
1. Association/Link - `Math` and `Informatics` call each other
1. one way Association - `Professor` can call `Student`'s properties and methods but not visa versa

Of course we can also reflect other more complex relationships. 
A easy to understand example is the inclusion of a professor into a higher educational institution.
```{mermaid}
%%| fig-cap: "Relationships in terms of arrows part 2"
classDiagram
Department --* University : Composition
Professor --o Department : Aggregation
Professor ..> Salary : Dependency
Professor ..|> Academic : Realization
```
1. Composition - `University` has an instance of `Department`, `Department` cannot exist without `University`
1. Aggregation - F _has a_ instance of E. E can exist if F is not present
1. Dependency - `Professor` requires, needs or depends on `Salary`
1. Realization - `Professor` realizes the behaviour of `Academic`

## Multiplicity

Quite often it is necessary to describe the relation in terms of multiplicity, i.e. specifying how often a class is used in the relationship.

| multiplicity | meaning |
| :---: | --- |
| 1 | exactly one |
| m | exactly m |
| + | many, none or multiple, optional |
| 0..1 | none to one, optional |
| m..n | m to n, including the boundary |
| 1..* | one or more |
| m..* | m or more than m |
: Different multiplicities and their meaning

Let us try to illustrate this with the example of a car on a parking lot:

```{mermaid}
%%| fig-cap: "Cardinality with cars on parking lots"
classDiagram
Car "0..5" -- "1" Person : uses
ParkingLot "0..1" o-- "0..*" Car : occupied
Car "1" *.. "4" Wheel : has
```
You read this _away from the class_:

- exactly four wheels belong to one car
- a parking lot contains zero to infinity cars (not at the same time)
- one car is standing on at most one parking lot
- a person can only sit in one car
- a car does not need to be occupied by a person but no more than 5

