# Self Study Session II {#sec-sss-sss2}

::: {.callout-important}
**This lecture consists of several self study sessions!**

In these sections you are supposed to work on the given topics on your own and in your own time.
We will try to provide helpful references for books and online material that can help you but you are not limited to these materials. 

In order to get an idea on how much you understand of the material we provide exercises.
:::

In this section we are mainly concerned with the basics of Python, nevertheless you are expected to use `git` and `pdm` to solve the problems at hand.

## Topics

For each topic we list various materials and what is the basic idea behind it. 

### Object oriented programming/design, scientific computing, decorators

Once you are familiar with how Python handles these topics you will be able to answer questions like:

- What is a object?
- What is the scope of a attributes/methods?
- How can I inherit properties from an object?
- How can I implement an interface in Python?
- How is slicing working in `numpy` and `pandas`?
- What is vectorization and why should I use it?
- etc.

This topics are covered in the following resources (given in no particular order):

- @McKinney2022-qz [Online](https://wesmckinney.com/book/), Section 4 (`numpy`) and 5 (`pandas`)
- @Matthes2023 Section 9
- @Vasiliev2022 Chapter 3, 5, 6, 7
- MCI Lecture notes of Julian Huber and Matthias Panny [Online](https://mrp123.github.io/MCI-MECH-B-3-SWD-SWD-ILV), Section 1 (German)
- Classes t [docs.python.org](https://docs.python.org/3/tutorial/classes.html)
- Type hints cheat sheet form the docs of `mypy` [Online](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)
- `NumPy` docs
    - [NumPy quickstart](https://numpy.org/doc/stable/user/quickstart.html)
    - [NumPy the absolute basics for beginners](https://numpy.org/doc/stable/user/absolute_beginners.html)
    - [NumPy for MATLAB users](https://numpy.org/doc/stable/user/numpy-for-matlab-users.html)
- `pandas` docs
    - [10 minutes to pandas](https://pandas.pydata.org/docs/user_guide/10min.html)


## Exercises

::: {.callout-important}
If, **and only if**, you are taking the class at MCI and are not reading these notes on your own, you are expected to hand in the exercises below as a git repository, you can use the old one if you like.
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-umltf}

## UML fact checker

```{mermaid}
classDiagram
Student "*" --* University : Composition
    class University{
        - name: string
        - address: Address 
    }
    class Student{
        - name: string 
        - fee: float 
    }
```

Which of the following can be answered with Yes and which with No:

1. No two universities can have the same name?
1. A university and a student can not have the same name?
1. No student studies at more than one university?
1. Each student studies at at least one university?
1. Two students with the same name can not study at the same university?
1. Two students with the same name con not study at different universities?
1. Two universities can have the same address?

Is there a way to specify a attribute in UML as unique?
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-txt2uml}

## From text to UML

Convert the following description into an appropriate UML diagram, with multiplicities and associations. 

- Every person has a name, a phone number and an e-mail address.
- Every address is only occupied by one person, some addresses might have no inhabitant.
- Each address is associated with a street, a city, an area code, and a country.
- Addresses can be verified as a home address for a person and printed for post service.
- There are two types of persons
   - Students that can enlist for a class
   - Professors that can receive a salary
- A student has a study ID and an average grade.
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-uml2py}

## From UML to Python

Convert the UML diagram from @exr-txt2uml into Python code and test your classes.

::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-oop_interface}

## Interface

Consider the following UML diagram and implement it in Python with interfaces.
Set `lives` for a `Cat` to the appropriate `7`, feed some cat food generated with random integers uniformly distributed between $-10$ and $10$ and look how much food it can eat until it dies. Plot this for different initial values of `currentFood`.

```{mermaid}
classDiagram
    Cat --|> Animal
    Cat ..|> FourLegged
    Cat ..|> OxygenBreather
    class FourLegged{
        <<interface>>
        + run(destination)
    }
    class OxygenBreather{
        <<interface>>
        + breath()
    }
    class Animal{
        - lives: int
        - currentFood: int
        + eat(food: int)
    }
    class Cat{
        + getLivesLeft()
        + getCurrentAmountofFood()
        - decreaseLives()
    }
```

::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-indexing_numpy}

## Indexing in `numpy` or slicing

There exists a multitude of different ways to index `numpy` arrays.
Create an appropriate (or multiple appropriate arrays) and provide the answer to the following questions with slicing:

For a vector:

- return the last 5 elements
- return every second element
- reverse the vector
- return element 1, 4 and 11
- return all elements bigger than the mean

For a matrix:

- flip the second and third row
- add the second column to the entire matrix
- extract the sub matrix that only consists of odd rows and even columns
- return the rows 1, 4, and 11
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-indexing_numpy}

## Reshape `numpy`

We can reshape, i.e. change row and column dimensions, of arrays.
The important part here is the way the array is viewed by its dimensions.
**Hint:** use `np.arange(x)` for the following exercise so you know the positions of the numbers.

- Reshape a 8 element vector into a $4 \times 2$ matrix.
- Reshape a 8 element vector into a $4 \times 2$ matrix and directly into a $2 \times 4$ without storing the intermediate result (in one line).
- Reshape a 16 element vector into a $2 \times x$ vector where `numpy` infers the second dimension from the data.
- Use the `shape` property of a matrix to reshape a vector.
- Does `reshape` create a copy of the original data?
- How do you _reverse_ back to a flat vector?
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-montecarlopi2}

## Monte Carlo simulations in `numpy`

Recall @exr-montecarlopi1 and implement a version of `in_unit_circle` that uses `numpy` arrays, you should take the code from @exr-montecarlopi_fun as basis and add a new function `in_unit_circle_np`.

To write this in Python follow these steps:

1. With `numpy.random.unified()` create a $2\times N$ matrix with random numbers.
1. Use element wise computation to get $M$. **Hint:** `True` is interpreted as `1` and `False` as `0` when you try to add boolean values.

Once you have the second implementation test it and compare it with the other version.

1. Is the accuracy the same?
1. Have a look at `timeit` and see which of your two code versions is faster for which `N`
1. Plot your results, i.e. for different values of $N$ the different execution times for the two versions, maybe use a logarithmic axis.
1. Are there other plots that might give you an insight for this example. 
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-pps}

## Predator Prey simulation

The Lotka-Volterra Equations 
$$
\begin{array}{c}
\dot{x} = \alpha x - \beta x y\\
\dot{y} = \gamma x y - \delta y
\end{array}
$$ {#eq-lve}
can be used to describe a predator-prey system.
In this case we can interpret the variables as:

- $x$ prey population
- $y$ predator population
- $\dot{x}$ growth rate of prey population
- $\dot{y}$ growth rate of predator population
- $\alpha$ natural growth rate of prey
- $\beta$ death rate of rabbits due to predators
- $\delta$ natural death rate of predators
- $\gamma$ growth rate of predators per consumed prey

We assume that the prey has unlimited food and the change rate is proportional to the size.
The predators only eat the specific prey and they are always hungry.

Create first an UML diagram and later Python code that follows these guidelines:

- Create a predator class with the parameters $x, \delta, \gamma$ where only the first is public
- Create a prey class with the parameters $y, \alpha, \beta$ where only the first is public
- Create a class to propagate your model:
    - the constructor takes a pray and a predator object 
    - create a private method to compute the two derivatives
    - create a second method to propagate a single time step $\Delta t$, as time integrator we suggest to implement a [_Forward Euler_](https://en.wikipedia.org/wiki/Euler_method) but you can also use something from `scipy.integrate` if you prefer.
       - use the classes to store the current population in the appropriate variable. 
    - create a public method where you provide the final time $t_1$ and $\Delta t$ and returns $x, y$ in each time step (you need to compute the amount of steps).
- Plot the results
- Test your method with the following parameters: 
    - $\alpha = 1$
    - $\beta = 0.1$
    - $\gamma = 0.5$
    - $\delta = 0.02$
    - $x = 100$ (initial population)
    - $y = 20$ (initial population)
- Create getter/setter methods for the parameters that are private where you check that the signs and types are appropriate if they get set.
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-pandas_sets}

## Use `pandas` to redo Section 2 of [MECH-M-DUAL-I-DBM](https://kandolfp.github.io/MECH-M-DUAL-1-DBM/basics/sets.html)

In [MECH-M-DUAL-I-DBM](https://kandolfp.github.io/MECH-M-DUAL-1-DBM/basics/sets.html) Section 2 we worked with the `mieten3.asc` dataset and did some computations on it. 

Use `pandas` to load the dataset and compute the same properties and create similar plots, where it is appropriate.

**Hint:** Data loading and some examples are done in @sec-sc-pandas.
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-pandas_sets}

## Advanced `pandas`

(@) The method `apply()` can _apply a function along an axis of a `DataFrame`_ and can be used in various ways. 

Use `.apply` to create categories, i.e. from 
```python
data = pd.DataFrame({
    'Age': [11, 16, 30, 51]
})
```
create 
```{python}
#| echo: false
import pandas as pd
data = pd.DataFrame({
    'Age': [11, 16, 30, 51]
})

def category(x):
    if x <= 12:
        return "Child"
    if x <= 18: 
        return "Teenager"
    return "Adult"

data['Category'] = data['Age'].apply(lambda x: category(x))
data
```

(@) Read in the [death_valley_2014.csv](https://raw.githubusercontent.com/ehmatthes/pcc/refs/heads/master/chapter_16/death_valley_2014.csv) from the GitHub repo corresponding to @Matthes2023. 

- Transform the `PST` column into a `DataTime` object (various possibilities)
- Create a new `DataFrame` that consists of the _temperature_ columns where they are converted from °F to °C
- Merge the two `DataFrame`s
- Repeat the same operation directly with `.apply`
- Let us assume, for some reason, the entries from January where off for $1\%$. Use the `.update` function to change them - i.e. correct them by the error.
- Use the `.pipe` function to _apply_ a series of functions to your data. 
   - Compute the `Mean Humidity` per month and scale this data with this value
   - Update the `WindDirDegree` such that the values in in $[-180, 180]$ instead of $[0, 360)$
    - Update the `PST` column to only contain month and day
::::
:::


::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exr-pandas_sets}

## Decorators

In Python we can use _decorators_ to modify the functionality of a function by wrapping it in another function, you can find an introductions in the following links

- [pythontips](https://book.pythontips.com/en/latest/decorators.html)
- [programiz](https://www.programiz.com/python-programming/decorator)
- [Python 101](https://python101.pythonlibrary.org/chapter25_decorators.html)

Write a decorator `@positive` that checks arguments to be positive and raise an Exception (with `raise Exception("Sorry, not positive")`). Test this implementation with @exr-montecarlopi2. We will look at exception handling later.

Can you modify the decorator such that you can give an optional argument specifying the location to check for positivity?
```python
@positiv(1)
def testfun(a, b, c)

# error for
testfun(-1, -1, -1)
# but not for
testfun(-1, 1, -1)
```
::::
:::


