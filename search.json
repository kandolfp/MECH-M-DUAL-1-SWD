[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Softwaredesign",
    "section": "",
    "text": "Warning\n\n\n\nThe notes presented here are still under construction and can change without warning.\n\n\n\nPreface\nThese are the lecture notes for the Softwaredesign class part of the MCI | The Entrepreneurial School master for Mechatronik - Automation, Robotics & AI in the winter term 2024/25.\n\n\nAcknowledgements\nWe want to thank the open source community for providing excellent tutorial and guides for Python, Git, and Docker on the web. Individual sources are cited at the appropriate spot throughout document at hand.\nWe want to thank Mirjam Ziselsberger for testing, checking, suggestions and general proofreading. We also want to thank Elias Tappeiner from the Department of Biomedizinische Bildanalyse UMIT, Hall in Tirol, Österreich for his slides on Git.\nThese notes are build with Quarto.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "basics/python.html",
    "href": "basics/python.html",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "Installation\nOn Linux and Mac a recent Python version is usually installed. Check this by opening a terminal and running\nand you should see something similar if not the same. If not have a look here and search for your platform.\nFor Windows 10 and above we can use the version from the Microsoft Store. If you have another version check here too and search for your platform.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#installation",
    "href": "basics/python.html#installation",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "$ python3 --version\nPython 3.12.3",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#getting-started",
    "href": "basics/python.html#getting-started",
    "title": "1  Introduction to Python",
    "section": "1.1 Getting started",
    "text": "1.1 Getting started\n\n\n\n\n\n\n Type along\n\n\n\nThis part is designed as a type along session!\n\n\nAs usual for programming guides, we start with:\n\nprint('Hello, World')\n\nHello, World\n\n\n\n\n\n\n\n\nNote\n\n\n\nThese notes are generated from markdown and executable code (for a lot of the Python aspects). This means sometimes the results are part of the text, but if we need to make sure you can see the output we highlight it with some background color. For this reason and to make it easier to copy and past code from the notes we omit &gt;&gt;&gt; that you see in your REPL.\n\n\nLets break down what we did above6:\n\nwe called a function print - indicated by ( and ) respectively,\nwe handed the text Hello, World to that function - indicated by the two ',\nthe REPL returned the result and printed it on screen.\n\nThe text above is called a string and you can do operations with strings, like:\n\nprint('Hello,' + 'World')\nprint('Spam' * 5)\n\nHello,World\nSpamSpamSpamSpamSpam\n\n\nHere + and * are so called operators. The first combines (concatenates) two strings, the second multiplies one string.\n\n\n\n\n\n\nImportant\n\n\n\nThe Style guide - PEP 8 tells us that an operator should have a leading and trailing white space.\n\n\nIn case we want to know more about the function print we can use another function to get some more insight:\n\nhelp(print)\n\nHelp on built-in function print in module builtins:\n\nprint(*args, sep=' ', end='\\n', file=None, flush=False)\n    Prints the values to a stream, or to sys.stdout by default.\n\n    sep\n      string inserted between values, default a space.\n    end\n      string appended after the last value, default a newline.\n    file\n      a file-like object (stream); defaults to the current sys.stdout.\n    flush\n      whether to forcibly flush the stream.\n\n\n\nNow let us pick up a bit of speed.\n\n1# Mathematical operators\n3 + 2\n2 * 10\n24 // 2    # Integer division\n4 / 3\n(9 + 8) * 32\n\n\n1\n\nWe can write comments, that get ignored by the interpreter. They start with #\n\n2\n\nComments can also follow a command\n\n\n\n\n544\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you copy and execute the code above your output will differ and look something like:\n&gt;&gt;&gt; # Mathematical operators\n&gt;&gt;&gt; 3 + 2\n5\n&gt;&gt;&gt; 2 * 10\n20\n&gt;&gt;&gt; 4 // 2\n2\n&gt;&gt;&gt; 4.0 / 2\n2.0\n&gt;&gt;&gt; (9 + 8) * 32\n544\nThis is due to the fact that the system used to create these notes does not feed the input to the REPL one by one but rather as a script. Therefore, we will often just suppress the output or if we want to make sure something is printed in the notes we will use print explicitly.\n\n\nThere are the usual boolean operators for comparison:\n\n1 != 2\n1 &lt; 2\n2 &gt; 3\n1.0 &gt;= 1\n0.99 &lt;= 1\n\n# and combine them with logical operators\n(1.0 &lt;= 1) and (1.0 &gt;= 1)\n(2 &lt; 1) or (2 &gt; 1)\nnot (1 != 2)\n\nWe can assign a value to a variable and use them later on:\n\npi = 3.1415926535897932\nx = 90\n\n# Convert degree to radiant\nx_rad = x * (pi / 180)\n\n# Convert it back to degree\nx_new = x_rad * (180 / pi)\n\n# Check if they are the same\nx == x_new\n\nWe can also change the value of a variable:\n\n# We can make the printed statement more elaborate\nprint('x =', x)\nx = 45.0\nprint(f'x = {x}')\nprint(f'{x=}')\n\nx = 90\nx = 45.0\nx=45.0\n\n\n\n\n\n\n\n\nNote\n\n\n\nPython is dynamically typed, meaning that the type of a variable is checked during runtime and not beforehand.\nAs a result you can change the type7 of a variable without the interpreter complaining about it. This is often the cause of strange bugs in programs so be aware that Python has types, even though we do not always see them.\n\n\nIn order to understand some of the control sequences we also need to introduce lists. In essence, they represent an ordered sequence of values that can have arbitrary types.\n\n# List of integers\n[2, 4, 6, 8]\n# List of strings\n['A', 'B', 'C']\n# List of lists\n[[2, 4, 6, 8], ['A', 'B', 'C']]\n# List of mixed types\n[2, 'A']\n# Assign a list to a variable\nintegers = [2, 4, 6, 8]\n# Changing values\nintegers[1] = -4\n\nWe also have control sequences:\n\nif x &lt; 90:\n  x = x * 2      # This section gets executed if the statement is true\nelse:            \n  x = x / 2      # And this if it is false\n\nprint(f'x = {x}')\n\nif x &lt; 45:\n  x = x * 2\nelif x &lt; 90:\n  x = x * 3      # If the first statement is false but the second true\nelse:\n  x = x ** 2     # If none of the above statements is true\nprint(f'x = {x}')\n\nx = 90.0\nx = 8100.0\n\n\nAs well as loops:\n\n# For loops work best with lists or sets\nsum = 0\nfor i in integers:\n  sum = sum + i\n\nmean = sum / len(integers)   # len computes the length of a list\nprint(mean)\n\n# While loops run until a statement is no longer true\na = 5\nb = 2\nc = 1\nwhile (a &gt; 0):\n  a = a - 1\n  c = c * b\nprint(c)\n\n3.0\n32\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThere is an internal function called sum and we just overwrote this function, so be careful how you choose your variable names.\n\n\nOf course there are easier ways to compute the sum of a list or \\(2^5\\). For this we need to import additional functions:\n\nimport math\nmean = math.fsum(integers) / len(integers)\nprint(mean)\n\nc = math.pow(2, 5)\nprint(c)\n\n3.0\n32.0\n\n\nmath is one of the Python standard libraries, but quite often they do not suffice for the task at hand and you need some additional libraries.\nIn the next section we will discuss package managers and one possible solution for this.\nFurthermore, so far we only typed in the REPL and if we want to do the same again we need to retype everything. So we need to talk about script files which will lead us to version control.\nFor now, this ends our brief start with Python.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#footnotes",
    "href": "basics/python.html#footnotes",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "A language that has a strong abstraction level between the hardware of the computer and the user.↩︎\nThe term describes how easy it is for a human reader to follow the purpose, control flow and the single operations of source code, i.e. a program.↩︎\nAs of September 6th 2024, see Python Source Releases for a current overview.↩︎\nA way of specifying what the usual three numbers of a version mean, see semver.org↩︎\nRead Evaluate Print Loop↩︎\nWe start easy and with a bit more explanation, but do not worry we will not always break it down as much.↩︎\nType could be something like integer, float, or string↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html",
    "href": "basics/packagemanager.html",
    "title": "2  Package manager",
    "section": "",
    "text": "2.1 Package management for python\nBefore we go into detail for the package manager of choice, we need to discuss what such a system is supposed to offer us.\nAs a starting point have a look at what xkcd has to say about it:\nHere is the (probably not complete) authors list (random order):\nThe Python Packaging Authority (PyPA)2 provides a user guide for distributing and installing Python packages. As soon as you think of providing your own package for others you should carefully study this guide, but for now, we only have a quick look into Tool recommendations.\nThe standard tool is pip and for scientific software specifically conda and Spack.\nWe are going to look at pdm (see Ming (2019)), as this is a modern Python package manager that uses pyproject.toml files to store metadata of the project and much more.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#package-management-for-python",
    "href": "basics/packagemanager.html#package-management-for-python",
    "title": "2  Package manager",
    "section": "",
    "text": "Figure 2.2: The xkcd comic #1987 discussing python enviroments. Click the image to get to the original image source https://imgs.xkcd.com/comics/python_environment.png.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPlease think about what you believe are must have and nice to have features that we should have for our package manager.\n\n\n\n\n\nmust haves\n\nper project based environments (venv)\nlock files for exact package version reproducibility, see {Section 4.1}\n\ncross platform dependencies\n\nreadable documentation\n\nnice to haves\n\nmultiple sources for packages\n\nprivate repos (work environment)\n\nstay close to official PEP standards 1\nbackwards compatibility for lock files\neasy way to have a project version\nlocal install for self written packages\ndifferent algorithms for building the dependency tree\ndeployment with testing capabilities\nintegrate with virtualization\ncompatibility to other package managers\nallow integration of environment variables, e.g. .env files\n\nobvious\n\nintegrate with version control software\nprovide a wide range of packages\nhave a good user interface\n\n\n\n\nThe Python packaging landscape consists of many different tools. For many tasks, the Python Packaging Authority (PyPA, the working group which encompasses many packaging tools and maintains this guide) purposefully does not make a blanket recommendation; for example, the reason there are many build backends is that the landscape was opened up in order to enable the development of new backends serving certain users’ needs better than the previously unique backend, setuptools. This guide does point to some tools that are widely recognized, and also makes some recommendations of tools that you should not use because they are deprecated or insecure.\nSource: From the PyPa Guide, as of 9th of September 2024\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe main thought behind selecting pdm for further discussions here is the experience of the authors regarding cross platform support, ease of use, and transferability to other languages like julia, rust, or go. Especially the Pgk.jl package in julia was such a drastic contrast to conda that the authors searched for an alternative.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#an-introduction-on-working-with-pdm-for-your-python-project",
    "href": "basics/packagemanager.html#an-introduction-on-working-with-pdm-for-your-python-project",
    "title": "2  Package manager",
    "section": "2.2 An introduction on working with PDM for your python project",
    "text": "2.2 An introduction on working with PDM for your python project\n\n\n\n\n\n\n Type along\n\n\n\nThis part is designed as a type along session!\n\n\n\nPDM can manage virtual environments (venvs) in both project and centralized locations, similar to Pipenv. It reads project metadata from a standardized pyproject.toml file and supports lockfiles. Users can add additional functionality through plugins, which can be shared by uploading them as distributions.\nUnlike Poetry and Hatch, PDM is not limited to a specific build backend; users have the freedom to choose any build backend they prefer.\nSource: From the pdm-project on github, as of 9th of September 2024\n\nThe following screen cast gives us a quick overview of its capabilities. \n\n\n\n\n\n\nNote\n\n\n\nFor this guide we closely follow the notes on the project page https://pdm-project.org/, please note that the original code and potential updates to it can be found there, see Ming (2019).\n\n\n\n2.2.1 Installation\nFirst we need to install pdm so that it is available (globally) on our system. For this to work, Python version 3.8 or later must be available on the system.\nThe recommended way is to use the provided install script.\n\nLinux/MacWindows\n\n\ncurl -sSL https://pdm-project.org/install-pdm.py | python3 -\n\n\n(Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).Content | py -\n\n\n\nOf course we do not just download a file from the internet without checking the content. At the time of writing the current sha256 is\ncdaae475a16ae781e06c7211c7b075df1b508470b0dc144bbb73acf9a8389f91  install-pdm.py\nsee install-pdm.py.sha256\nYou can check the file sha by calling:\n\nLinux/MacWindows\n\n\ncurl -sSL https://pdm-project.org/install-pdm.py | shasum -a 256\n\n\nGet-FileHash -InputStream (Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).RawContentStream -Algorithm SHA256\n\n\n\nBy default, pdm is installed into the user space (depending on the platform), but this can be modified via arguments to the script, see the help option of the script.\n\n2.2.1.1 Optional - Shell completion\nFor a better user experience we would recommend to include the shell completion.\n\nBash (Linux)Zsh (Mac)Powershell (Windows)\n\n\npdm completion bash &gt; /etc/bash_completion.d/pdm.bash-completion\n\n\n# Make sure ~/.zfunc is added to fpath, before compinit.\npdm completion zsh &gt; ~/.zfunc/_pdm\n\n\n# Create a directory to store completion scripts\nmkdir $PROFILE\\..\\Completions\necho @'\nGet-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object {\n    . $_.FullName\n}\n'@ | Out-File -Append -Encoding utf8 $PROFILE\n# Generate script\nSet-ExecutionPolicy Unrestricted -Scope CurrentUser\npdm completion powershell | Out-File -Encoding utf8 $PROFILE\\..\\Completions\\pdm_completion.ps1\n\n\n\n\n\n\n2.2.2 Start a new project\nLet us start a new project in a new directory:\n1$ mkdir test\nmkdir: created directory 'test'\n\n2$ cd test/\n\n1\n\ncreate a directory\n\n2\n\nchange into this directory\n\n\nIn order to start a new pdm project you can use pdm init. This will prompt you with a couple of questions and based on the answers the pyproject.toml file is initialized.\n1$ pdm init\nCreating a pyproject.toml for PDM...\n2Please enter the Python interpreter to use\n 0. cpython@3.11 (/usr/local/bin/python3)\n 1. cpython@3.12 (/usr/bin/python3.12)\n 2. cpython@3.11 (/usr/local/bin/python3.11)\n 3. cpython@3.8 (/usr/local/bin/python3.8)\nPlease select (0): 1\n3Virtualenv is created successfully at /tmp/test/.venv\n4Project name (test):\n5Project version (0.1.0):\n6Do you want to build this project for distribution(such as wheel)?\nIf yes, it will be installed by default when running `pdm install`. [y/n] (n): n\n7License(SPDX name) (MIT):\n8Author name (John Doe):\nAuthor email (John.Doe@generic.edu):\n9Python requires('*' to allow any) (==3.12.*):\nProject is initialized successfully\n\n1\n\nStart the initialization with pdm init.\n\n2\n\nWe need to select a python interpreter. pdm will search for all available interpreters on your path, if you need a different version than those available you can use pdm to install a new standalone python version, see pdm python command or the docs3.\n\n3\n\nBy default pdm will create a new virtualenv for you as this is the recommend procedure, if you want to influence this behavior see docs.\n\n4\n\nWe need to specify a project name. This name is used in the pyproject.toml and pdm will also generate a src/&lt;name&gt; directory for you right away (together with a test directory). pdm uses its default template, see docs.\n\n5\n\nThe version of your project needs to be initialized. pdm follows semantic versioning4 by default. If you do not have a specific version in mind stick to 0.1.0 for a new project.\n\n6\n\nNext we need to decide if we plan to distribute the project. For now n (no) will suffice, but hopefully by the end of these notes you feel comfortable enough to release your own package. Once this is the case, take a look at the docs and the Python Packaging User Guide.\n\n7\n\nLicensing is next. This is a rather important issue when you release software, but we need to postpone it as well. So stick to the default for now.\n\n8\n\nAuthor name and email can (and should) be a list if you have multiple contributors. pdm will try to figure out defaults from system settings.\n\n9\n\nFinally, you will be asked for the required python version. Here you can specify the compatibility of your project to various python versions5. For good reason, by default it will only allow the current version you selected in the first step. In theory you can specify something like &gt;=3.8,!=3.9.0,&lt;3.13 (a python version between 3.8 and 3.13, including 3.8 but excluding 3.13 and additionally excluding 3.9.0) but be aware that might become tricky when adding dependencies.\n\n\nNow you have a new project available and it should look like this:\n1$ tree -a\n.\n2├── .gitignore\n├── .pdm-python\n├── __pycache__\n├── pyproject.toml\n├── README.md\n├── src\n│   └── test\n│       ├── __init__.py\n│       └── __pycache__\n├── tests\n│   ├── __init__.py\n│   └── __pycache__\n3└── .venv\n    ├── bin\n    │   ├── activate\n    │   ├── activate.csh\n    │   ├── activate.fish\n    │   ├── activate.nu\n4    │   ├── activate.ps1\n    │   ├── activate_this.py\n    │   ├── python -&gt; /usr/bin/python3.12\n    │   ├── python3 -&gt; python\n    │   └── python3.12 -&gt; python\n    ├── .gitignore          \n    ├── lib\n    │   └── python3.12\n    │       └── site-packages\n    │           ├── _virtualenv.pth\n    │           └── _virtualenv.py\n    └── pyvenv.cfg\n\n12 directories, 19 files\n\n1\n\nList all files in the directory\n\n2\n\nA .gitignore file is created\n\n3\n\nVirtual environment\n\n4\n\nWindows activation start file (cross platform)\n\n\nThe second highlighted section tells us that pdm is designed to work with a version control system. By default it uses git as seen by the .gitignore file highlighted. In this context:\n\n\n\n\n\n\nImportant\n\n\n\nYou must commit the pyproject.toml file. You should commit the pdm.lock and pdm.toml file. Do not commit the .pdm-python file.6\n\n\nTo check what setup pdm created for you, you can use the pdm info command, where the --env option provides us with more details about the environment/platform.\n$ pdm info\nPDM version:\n  2.18.1\nPython Interpreter:\n  /tmp/test/.venv/bin/python (3.12)\nProject Root:\n  /tmp/test\nLocal Packages:\n  \n$ pdm info --env\n{\n  \"implementation_name\": \"cpython\",\n  \"implementation_version\": \"3.12.3\",\n  \"os_name\": \"posix\",\n  \"platform_machine\": \"x86_64\",\n  \"platform_release\": \"6.8.0-41-generic\",\n  \"platform_system\": \"Linux\",\n  \"platform_version\": \"#41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024\",\n  \"python_full_version\": \"3.12.3\",\n  \"platform_python_implementation\": \"CPython\",\n  \"python_version\": \"3.12\",\n  \"sys_platform\": \"linux\"\n}\n\n\n\n\n\n\nNote\n\n\n\nOf course it is also possible to import from other package manager systems, see docs.\n\n\n\n\n2.2.3 Manage dependencies\nNow that the project exists we can look at the main task: managing packages. We will cover the basics that we need, for a full guide see Manage Dependencies at docs.\n\n2.2.3.1 Add dependencies\nTo add a dependency you can use the pdm add command, where the system follows the PEP 508 specifications.\npdm add requests           # add requests\npdm add requests==2.25.1   # add requests with version constraint\npdm add requests[socks]    # add requests with extra dependency\npdm add \"flask&gt;=1.0\" flask-sqlalchemy   # add multiple dependencies with different specifiers\n\n\n\n\n\n\nNote\n\n\n\nBy default pdm searches for dependencies on PyPI, see docs on how to add to or modify the package index.\nIf you are not sure how a package is called use pdm search to locate it (even though the search could be improved).\n\n\nIt is rather common for python dependencies to have dependencies on their own. pdm will make sure to install all of those as well. Everything that is installed will end up in the pdm.lock file with the exact version and where it comes from.\nIn contrast to other dependency management systems such as requirements.txt a very handy feature of pdm is that it will only add the specified dependencies to the pyproject.toml and not all sub-dependencies. This makes it easier for somebody else to keep track of what your actual dependencies are and especially for update procedures.\n\n2.2.3.1.1 Add local dependencies\nQuite often it happens that you develop a project and use it as a dependency in another project you are working on. In this case you want to have a local dependency. This can be added by calling:\npdm add ./my-project\nIt is important to mention, that the path must start with . otherwise it is not interpreted as a local dependency.\n\n\n\n2.2.3.2 Development dependencies\nWith pdm you can also define groups of dependencies that are particularly useful during development. This might be a linter, formatter, or tools for testing and creating the docs.\npdm add -dG lint flake8\nYou will find these dependencies in a special section in you pyproject.toml file, namely:\n[tool.pdm.dev-dependencies]\nlint = [\"flake8\"]\n\n\n2.2.3.3 Inspect dependencies\nIf you need to find out what your installed dependencies are you can use pdm list or pdm list --tree.\n$ pdm list --tree\nrequests 2.32.3 [ required: &gt;=2.32.3 ]\n├── certifi 2024.8.30 [ required: &gt;=2017.4.17 ]\n├── charset-normalizer 3.3.2 [ required: &lt;4,&gt;=2 ]\n├── idna 3.8 [ required: &lt;4,&gt;=2.5 ]\n└── urllib3 2.2.2 [ required: &lt;3,&gt;=1.21.1 ]\n\n\n2.2.3.4 Update dependencies\nIf you find that a package has released an update that is required for your project you can use pdm to update your packages:\npdm update\nwill update all packages (if possible) in your pdm.lock file, while\npdm update requests\nwill only update the specified dependency (you can specify multiple packages).\n\n\n2.2.3.5 Remove dependencies\nIf you have added a dependency but no longer need it, you can remove it by calling pdm remove. Note that all sub-dependencies will be removed as well.\n\n\n2.2.3.6 List outdated dependencies\nWith pdm outdated you get a list of outdated packages with the latest version available.\n\n\n2.2.3.7 Other dependencies than python packages\nIt might happen that your project needs additional dependencies other than python resources. In this case you can also use pdm to install a multitude of those.\nAs an example, you can install the Intel Math Kernel Library (mkl) and cmake by calling\npdm add mkl cmake\n\n\n\n2.2.4 Initialize an existing project\nIf the pdm project already exists, e.g. you just cloned a project, all you need to do is run\npdm install\nto check the project file for changes, update the lock file if needed and run pdm sync to install all packages from the lock file.\n\n\n2.2.5 Running your code\nAs mentioned throughout these notes, pdm uses virtualenv to manage your project. This means you need to activate the project to work with it.\nIf you simply want to run a python script in your environment use:\npdm run python &lt;SCRIPT.py&gt; &lt;arguments&gt;\nSimilar you can start the python console via:\npdm run python\nIf you need to work in your current terminal with the environment you created it is easier to use pdm venv activate which will tell you how to activate the enviroment in your current terminal. In bash you can use\neval $(pdm venv activate)\nto directly activate the environment.\n\n\n\n\n\n\nTip\n\n\n\nYou should set up your IDE such that it searches for .venv directories for the python interpreter to make sure you do not get missing includes warnings and if you use the direct call or debug features you call the correct version.\n\n\nThis concludes our little guide for package managers in python. Make sure to revisit this sections and the pdm docs if you need them for the course of this section.\n\n\n\n\nMing, Frost. 2019. “PDM project site.” Online: Accessed 09-September-2024. https://pdm-project.org/.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#footnotes",
    "href": "basics/packagemanager.html#footnotes",
    "title": "2  Package manager",
    "section": "",
    "text": "Short for Python Enhancement Proposals, see Python PEPs↩︎\nThe Python Packaging Authority (PyPA) is a working group that maintains a core set of software projects used in Python packaging, see https://www.pypa.io/ as at 9th of September 2024↩︎\nIn case you are wondering what the .pdm-python files is, it stores the path to your python interpreter and is used for subsequent calls.↩︎\nWe recommend having a read of semver.org↩︎\nPython does not follow SemVer (see docs), sometimes a minor version will have a breaking change, so make sure to check the Porting to Python X.Y section for What’s new.↩︎\nQuote from pdm-project.org as at 9th of September 2024↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html",
    "href": "basics/versioncontrol.html",
    "title": "3  Version Control",
    "section": "",
    "text": "What is git and a bit of history\nGit was developed as a free and open source software by Linus Torvalds in 2005 for the development of the Linux kernel. The main goals in the development were (according to wikipedia):\nRegarding the name:\n“git” can mean anything, depending on your mood.\nIn the following we try to give a pragmatic hands on introduction to the concepts of Git and how it can be uses. The notes are a mix of several sources but the main ideas are based on the git training by the UnseenWizzard.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#basics-of-git",
    "href": "basics/versioncontrol.html#basics-of-git",
    "title": "3  Version Control",
    "section": "3.1 Basics of Git",
    "text": "3.1 Basics of Git\nGit is a distributed VCS, which means the entire repository is distributed on various machines and possible multiple remotes. This was a clear design choice that allows individual contributors to work independently of the availability of a remote but still have the full history available. The following is based on the git training by the UnseenWizzard. The main structure as well as the basic idea in the pictures follows these notes, with a view adaptations where needed.\nIn particular, such a setup could look something like this:\n\n\n\nBasic setup\n\n\nIn this setup the Remote Repository is the place you send your changes to in order to have them visible for others, and in return you can get changes from them via the Remote Repository.\nLike the name suggests the Local (development) environment sits on your machine. The working directory is your current version of the files contained in the repository and the Local Repository is the copy of the entire repository (with all changes) on your machine. We will learn more about these parts as we go along.\n\n3.1.1 Let us start with getting a Remote Repository\nIn order to allow a playfield for this class I created a repository that we are going to use. In order to get it onto you local machine, type the following commands in the Terminal:\n# Navigate to a suitable directory\ngit clone https://{YOUR ID}@git.uibk.ac.at/c702169/ulg22_playground.git\nThis will perform the following two actions:\n\nCheckout the content of the remote repository into the . By default this is the name of the repository, in your case the folder ulg22_playground is created and all files are put there.\nA copy of the remote repository is stored in the . For all intended purposes, it acts exactly the same as the Remote Repository, with the sole exception that is not shared with others.\n\n\n\n\nClone a remote repository to your machine\n\n\n\n\n3.1.2 Adding content\nWith the following snippet you can view the content of the repository (the second line is the response):\n&gt; ls ulg22_playground\npython_ex1 README.md\nAs you can see there is currently only a README.md and the folder python_ex1.\nNow lets add our solutions of the exercises we did in Python to the repository.\nFirst we copy the file to exercise directory\ncp PATH/TO/YOUR/FILE/solution_ex1.py python_ex1/{YOUR ID}.py \nIn my case the command reads like this:\n&gt; cp ../Exercises/reference_solution.py python_ex1/ID.py\n'../Exercises/reference_solution.py' -&gt; 'python_ex1/ID.py'\nThis has modified our working directory. In order to get an idea what Git thinks about this lets run git status in the working directory:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    python_ex1/ID.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLets break down the output of the command. First, Git tells you which branch you are on (we will hear more about that later), second, that local repository is different from the remote repository and it states that you have tracked and untracked files.\nNow, a tracked files is a file that is part of the repository and Git is keeping track of what is happening to it. An untracked file on the other hand, is a file that is in the same directory but it is not managed by Git.\nGit tells you how to change the status of your untracked file into a tracked file.\nWe do this by running git add python_ex1/ID.py.\nNow it is time to introduce another Git concept, namely the . The stating area is the curious white spot between your working directory and the local repository in the above pictures. This is the place where Git collects all the changes to your files that you want to put into the local repository.\n\n\n\nStaging area with the changes that can be moved to the repository\n\n\nBy rerunning git status we get\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    new file:   python_ex1/ID.py\nNow that we are confident that all our changes are in the staging area, we are ready to commit the changes to the local repository. This is done by running git commit. A text editor will open and you are able to write a message telling everybody what you just did in the repository. Usually you will also see the changes you are about to commit. The commit message is something really important and the message should be meaningful and readable as it will be later used by others to understand your action(s). There are several ways to do this and it boils down to what your team wants, but here are some links on good commit messages:\n\nConventional Commits\nhttps://cbea.ms/git-commit/\n\nThe same can be achieved directly in the Terminal by writing\n&gt; git commit -m \"feat: add my solution for python exercises 1\"\n[main 578e48f] feat: add my solution for python exercises 1\n 1 files changed, 85git insertions(+)\n create mode 100644 python_ex1/ID.py\n\n\n\nCommitting changes the repository\n\n\nIn the above message you can see that your commit gets some more meta data. Specifically, it gets a SHA-1 hash, namely 578e48f The hash is used to keep track of your commits and is one of the ground breaking ideas that makes Git so successful. The hash is much longer, but due to its nature it is in most cases unique from the first seven digits. :::{.callout-important} Any changes done to a file after running git add &lt;file&gt; will not be part of a commit. If they should be included you need to rerun git add &lt;file&gt;. :::\n\n\n\n\n\n\nImportant\n\n\n\nMy submitting an empty commit message you can abort a commit.\n\n\nNow the changes are in the local repository and you can continue working. In order to share your changes with others you need to get them to the remote repository. This is done by pushing the changes. We do this by calling git push, which gives us an output similar to:\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 1.17 KiB | 1.17 MiB/s, done.\nTotal 4 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://git.uibk.ac.at/c102338/ulg22_playground.git\n   e8f13f4..0b8a494  main -&gt; main\n\n\n\nPushing changes from the local to the remote repository\n\n\nNow, if you were to do this on your own, everything would work and you would be happy. Unfortunately, since we are doing this in a class and at the same time, we will encounter some difficulties. After all, this is a crash course for Git, so eventually something hat to crash.\nSome of you might get the following message for git push:\nTo https://git.uibk.ac.at/c102338/ulg22_playground.git\n ! [rejected]        main -&gt; main (non-fast-forward)\nerror: failed to push some refs to 'https://git.uibk.ac.at/c102338/ulg22_playground.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nThis gives us the opportunity to talk about how to get changes from the remote repository to your local repository after the initial clone. But first, in order to do this properly, we need to talk about branches.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#branches",
    "href": "basics/versioncontrol.html#branches",
    "title": "3  Version Control",
    "section": "3.2 Branches",
    "text": "3.2 Branches\nThe word branch was mentioned several times before but not explained. The main idea is rather simple.\nIf you consider having one commit after the other in a long chain like the trunk of a tree a branch is the same as for a tree:\n\n\n\nA branch in a chain of commits\n\n\nIn short, whenever multiple commits are based on the same commit they (and all following commits) form different branches.\nBy default, git always operates on branches. When we cloned the remote repository we also cloned its branches and we started working on the main branch. You can go back and check the messages, it is always there.\nNow without knowing we created a branch. It is not visible to us but it is clear from the point of the remote repository.\nThere are several ways of integrating or merging two branches back into one.\nFor now we will only talk about the most elegant and simplest way, with a rebase.\nNaturally, every branch is based on a commit. In the above example 9a98eb2 is based on e8f13f4. As the name suggests, rebase simple changes this base. This gives us a clean way of how the entire Git commit chain is supposed to be read. We will see one way to perform a rebase in a moment. But first we need to know how to get remote changes into your local repository.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#integrating-remote-changes-into-your-local-environment",
    "href": "basics/versioncontrol.html#integrating-remote-changes-into-your-local-environment",
    "title": "3  Version Control",
    "section": "3.3 Integrating remote changes into your local environment",
    "text": "3.3 Integrating remote changes into your local environment\nThe above error message gives us already a hint on what to do but lets make it more structured.\nBy running:\n&gt; git status\nOn branch main\nYour branch and 'origin/main' have diverged,\nand have 1 and 1 different commits each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\n\nnothing to commit, working tree clean\nwe can see that the remote and the local repository have different commits.\nWith git fetch you can get changes from the remote repository into the local repository. This is the other way around as with the git push command.\n\n\n\nFetching changes from the remote to the local repository\n\n\nThe important part here is, that this does not affect your working directory as the changes are only synchronized with the local repository and when you try to push again you will see the same message. It does not even affect your local branches, it will only make sure that all of the remote branches are synchronized.\n\n3.3.1 Pulling\nIn order to affect the working directory and your local branches, we need to pull the changes in. This is done with git pull.\nAs we have some conflicts we need to define a strategy how to deal with them. At the moment we only know one, so let us use:\n&gt; git pull --rebase\nSuccessfully rebased and updated refs/heads/main.\nThis should have worked for everybody as all of you added different files to the repository and the Git tree looks something like this:\n\n\n\nAfter pulling and rebasing\n\n\nNext we will see what happens if we modify some files.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#modifying-content-in-a-repository",
    "href": "basics/versioncontrol.html#modifying-content-in-a-repository",
    "title": "3  Version Control",
    "section": "3.4 Modifying content in a repository",
    "text": "3.4 Modifying content in a repository\nA good start to do this is to link our uploaded file to the table in the README file in the repository.\nWith your favourite editor add the following content next to your ID (btw. this is markdown syntax):\n# ulg22_playground\n\n## List of submitted python exercises \n\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) |\nIf we check with git status we can see that README.md is modified.\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nOf course this is only a change in our working directory and not in either of the two repositories. Before we add the changes to the local repository we can use git diff to see what we actually changed.\ndiff --git a/README.md b/README.md\nindex d9f0acb..9ac3846 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py)|\n | ID1 | |\n | ID2 | |\n | ID3 | |\nWe already know the next steps, add, commit, and push.\nSo lets recall, with git add README.md we move the file into the staging area. Note: If you run git diff now, the output is empty. This is because, git diff only works on the changes in your working directory. You can still get the diffs from your staging area with git diff --staged (some editors will use this if you type up your commit message).\nNow, before we commit, we decide to modify README.md again. Maybe we made a typo or we just really want to nail this hand in so we change it, maybe we add\n| ID     | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nto make it clear we know what we are doing.\nIf we run git status we see the following\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   README.md\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   README.md\nwhich tells us that README.mdis modified and staged.\nIf we run a git diff again we get\ndiff --git a/README.md b/README.md\nindex 9ac3846..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | [my upload](python_ex1/ID.py)|\n+| ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n | csad3581 | |\n | csak1512 | |\n | csak4299 | |\nwhich shows the changes to the staging area. If we are satisfied with our changes, we can use git add README.md again to add the file to the staging area and finally commit it with git commit. Of course we do this with a meaningful commit message.\nDepending on your timing, you might have to fetch and pull in changes to your local repository. By the way, you can directly call git pull, without first calling git fetch, the fetch is done implicitly. But we should not get a conflict as everybody changed a different line.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#conflicts-and-how-to-resolve-them",
    "href": "basics/versioncontrol.html#conflicts-and-how-to-resolve-them",
    "title": "3  Version Control",
    "section": "3.5 Conflicts and how to resolve them",
    "text": "3.5 Conflicts and how to resolve them\nIt will not always be this smooth and conflicts occur. For example when two commits with the same base make changes to a single line. We simulate this by simply copying our local repository and working directory - either with a new git clone or by copying the directory.\nFor this, we assume that in location A we changed README.md to\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) |\nand we commit and push this change to the remote repository.\nÀ&gt; git diff\ndiff --git a/README.md b/README.md\nindex d9f0acb..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py)|\n | ID1 | |\n | ID2 | |\n | ID3 | |\n\nA&gt; git add README.md\nA&gt; git commit -m \"add my exercise sheet\"\n[main a16b809] add my exercise sheet\n 1 file changed, 1 insertion(+), 1 deletion(-)\nA&gt; git push\nEnumerating objects: 8, done.\nCounting objects: 100% (8/8), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 769 bytes | 769.00 KiB/s, done.\nTotal 6 (delta 1), reused 0 (delta 0), pack-reused 0\nTo https://git.uibk.ac.at/c102338/ulg22_playground.git\n   0b8a494..a16b809  main -&gt; main\nNow in location B we do not get the changes from the remote repository but modify README.md to\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nand we try to do the same as before:\nB&gt; git diff\ndiff --git a/README.md b/README.md\nindex d9f0acb..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n | ID1 | |\n | ID2 | |\n | ID3 | |\nB&gt; git add README.md\nB&gt; git commit -m \"add my exercise sheet\"\n[main d9ac598] add my exercise sheet\n 1 file changed, 1 insertion(+), 1 deletion(-)\nB&gt; git push\nTo https://git.uibk.ac.at/c102338/ulg22_playground.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://git.uibk.ac.at/c102338/ulg22_playground.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nThis is to be expected so we pull in the changes from remote as we learned with rebase:\nB&gt; git pull --rebase\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nerror: could not apply d9ac598... add my exercise sheet\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply d9ac598... add my exercise sheet\nAs usual, Git is quite helpful and tells you what to do. We have several options:\n\nsolve the conflicts, add the files and continue the rebase.\nskip our our commit d9ac598, so do not apply these changes\nabort the procedure\n\nWe opt for 1. and take a look with git diff\ndiff --cc README.md\nindex 12ee10e,28dba4b..0000000\n--- a/README.md\n+++ b/README.md\n@@@ -4,7 -4,7 +4,11 @@@\n  \n  | Name/UID    | File        |\n  | ----------- | ----------- |\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n+ | ID  | [my upload](python_ex1/ID.py) |\n++=======\n+ | ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt; d9ac598 (add my exercise sheet)\nHEAD is the latest commit in the chain of commits on the current branch on the remote repository. So we see:\n\nwhat HEAD brings in &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD,\nthe end of the changes is marked with =======\nand what we want to push out ended by a line &gt;&gt;&gt;&gt;&gt;&gt;&gt; d9ac598 together with the commit message.\n\nThis will be repeated for every conflict in the file.\nIf the conflicts are more elaborate and connected it is good to use a tool to sort it out. Your favourite IDE will most likely come with some tool or you look at specific Git tools for conflict resolution.\nFor us it is simple. We just want the file to look like\n | ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nso we make these changes and call\nB&gt; git add README.md\nB&gt; git rebase --continue\n[detached HEAD 3c6b1e6] add my exercise sheet, and make a conflict resolution\n 1 file changed, 1 insertion(+), 1 deletion(-)\nSuccessfully rebased and updated refs/heads/main.\nThis will prompt us to write a commit message. Lets use add my exercise sheet, and make a conflict resolution.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#stashing",
    "href": "basics/versioncontrol.html#stashing",
    "title": "3  Version Control",
    "section": "3.6 Stashing",
    "text": "3.6 Stashing\nThere is one more case we need to have a look at. What if we made some changes to a file, are not ready to make a commit yet, but need to pull in some changes coming from the remote? Another scenario would be that something in the repository needs urgent fixing so we need to switch back to a clean copy without loosing our current work. Git gives us the possibility to deal with these situations with yet another area and the git stashcommand.\n&gt; git status\nOn branch main\nYour branch is behind 'origin/main' by 1 commits (non-fast-forward).\n  (use \"git pull\" to update your local branch)\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   python_ex1/ID.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n&gt; git diff\ndiff --git a/python_ex1/ID.py b/python_ex1/ID.py\nindex f5b74fc..22038a5 100644\n--- a/python_ex1/ID.py\n+++ b/python_ex1/ID.py\n@@ -61,6 +61,11 @@ print(f\"Accuracy of pi with N =    100:   {get_accuracy(   100):8.5f}\")\n print(f\"Accuracy of pi with N =   1000:   {get_accuracy(  1000):8.5f}\")\n print(f\"Accuracy of pi with N = 100000:   {get_accuracy(100000):8.5f}\")\n \n+# ----------------------------------------------\n+# Alternative Implementation for (2)\n+# ----------------------------------------------\n+points = np.random.uniform(0, 1, [2, N])\n+\n \n # ----------------------------------------------\n # (3) Gaussian density\nWe have a dirty working directory as we just started to work on an alternative implementation for (2) but we are 1 commit behind the remote. With git stash push we can tell git to put all the changes aside for us and keep them safe (an optional message can be added). After pulling the remote changes back in we can finally reapply our stashed work by calling git stash pop (this will apply the latest stash, in case we have several).\nHere it is as image and in the terminal.\n\n\n\nStashing changes and pulling in from remote, see numbers for order\n\n\n&gt; git stash push\nSaved working directory and index state WIP on main: 4e76603 update list of participants\n\n&gt; git status\nOn branch main\nYour branch is behind 'origin/main' by 1 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n\nnothing to commit, working tree clean\n\n&gt; git pull --rebase\nSuccessfully rebased and updated refs/heads/main.\n\n&gt; git stash list\nstash@{0}: WIP on main: 4e76603 update list of participants\n\n&gt; git stash pop\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   python_ex1/ID.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (d31654c50cfffd2b3f4b931ccf07b5c8362d365a)\n\n&gt; git diff\ndiff --git a/python_ex1/ID.py b/python_ex1/ID.py\nindex f5b74fc..22038a5 100644\n--- a/python_ex1/ID.py\n+++ b/python_ex1/ID.py\n@@ -61,6 +61,11 @@ print(f\"Accuracy of pi with N =    100:   {get_accuracy(   100):8.5f}\")\n print(f\"Accuracy of pi with N =   1000:   {get_accuracy(  1000):8.5f}\")\n print(f\"Accuracy of pi with N = 100000:   {get_accuracy(100000):8.5f}\")\n \n+# ----------------------------------------------\n+# Alternative Implementation for (2)\n+# ----------------------------------------------\n+points = np.random.uniform(0, 1, [2, N])\n+\n \n # ----------------------------------------------\n # (3) Gaussian density\nWith git stash list we can view different stashes.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#history",
    "href": "basics/versioncontrol.html#history",
    "title": "3  Version Control",
    "section": "3.7 History",
    "text": "3.7 History\nThe last thing we look into is the history. Of course it is possible to look what happened in the repository. With git log we can do this\nB&gt; git log\ncommit 3c6b1e63504e5f46d80d50d7188a4d5303a7aa86 (HEAD -&gt; main)\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Fri Oct 14 08:29:36 2022 +0200\n\n    add my exercise sheet, and make a conflict resolution\n\ncommit a16b809ce95b319180373c6b0c00647f2a6539f4 (origin/main, origin/HEAD)\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Fri Oct 14 08:25:14 2022 +0200\n\n    add my exercise sheet\n\ncommit 0b8a49431b40aed9903d1ec6b76c243c20613b92\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Sun Oct 9 15:59:42 2022 +0200\n\n    feat: add my solution for python exercises 1\n\n\n\n\n\n\nNote\n\n\n\nMost likely we will see way more commits here as our fellow students made some commits as well.\n\n\nSo this is the official log of the repository but sometimes it is nice to see more, especially what happened when. Maybe we messed up a rebase and our changes are missing or something similar. As Git was build with fail safes in mind it has you covered there. What we want to look at is reflog\nB&gt; git reflog\n3c6b1e6 (HEAD -&gt; main) HEAD@{0}: rebase (continue) (finish): returning to refs/heads/main\n3c6b1e6 (HEAD -&gt; main) HEAD@{1}: rebase (continue): add my exercise sheet, and make a conflict resolution\na16b809 (origin/main, origin/HEAD) HEAD@{2}: pull --rebase (start): checkout a16b809ce95b319180373c6b0c00647f2a6539f4\nd9ac598 HEAD@{3}: commit: add my exercise sheet\n5673f78 HEAD@{4}: commit: list of student ids\n0b8a494 HEAD@{5}: pull --rebase (finish): returning to refs/heads/main\n0b8a494 HEAD@{6}: pull --rebase (start): checkout 0b8a49431b40aed9903d1ec6b76c243c20613b92\n9a98eb2 HEAD@{7}: commit: feat: add my solution for python exercises 1\na0f8f01 HEAD@{8}: clone: from https://git.uibk.ac.at/c102338/ulg22_playground.git\nThis command shows us what happened in our local repository.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#further-stuff",
    "href": "basics/versioncontrol.html#further-stuff",
    "title": "3  Version Control",
    "section": "3.8 Further stuff",
    "text": "3.8 Further stuff\nThere is much more to see and do but this concludes the absolute basics. You will learn way more when you work with Git for some time. Some topics that you will come across are:\n\nThe .gitignore file\nMore elaborate work with branches\nMerging of branches\nCherry picking\nReverting commits\ngit blame to find out where this line of code comes from\nand so much more\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to Know about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nKandolf, Peter. 2024. “ULG Data Science - WS22 971001 Software - Introduction to Python, Git, and Docker.” https://doi.org/10.5281/zenodo.10532424.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with Git. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed. Sebastopol: O’Reilly.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/epilogue.html",
    "href": "basics/epilogue.html",
    "title": "4  Epilogue",
    "section": "",
    "text": "4.1 A note on dependency and reproducibility\nBefore we conclude our notes on package managers we should discuss reproducibility.\nIn our world of modern infrastructure we depend on a lot of other projects and quite often we do not even realize what tools we need in the background for our little program to run.\nThis is exquisitely illustrated in the following xkcd comic.\nThere only needs to be one little pebble misplaced and everything collapses. A package manager helps you.\nIn industry and academia it is often a problem that some computation can not be reproduced. Let it be an experiment that you need to rerun two years after your initial run, or generate some computations for an annual report. You will require your program to provide the same output for the same input.\nTo a large extent this is also the case for reproducibility of work, your own and the one performed by your code. Having a properly managed project is a foundation that will help you to achieve this goal more easily. The whole point of having a proper package management is to be able to copy your project to a new computer and setup your environment as quickly as possible to allow your code to function properly.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Epilogue</span>"
    ]
  },
  {
    "objectID": "basics/epilogue.html#sec-intro-pm-reproducibility",
    "href": "basics/epilogue.html#sec-intro-pm-reproducibility",
    "title": "4  Epilogue",
    "section": "",
    "text": "Figure 4.1: The xkcd comic #2347 discussing dependency. Click the image to get to the original image source https://imgs.xkcd.com/comics/dependency.png.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Epilogue</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Collection of interesting reads",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "summary.html#collection-of-interesting-reads",
    "href": "summary.html#collection-of-interesting-reads",
    "title": "Summary",
    "section": "",
    "text": "Semantic Versioning How to design the version of your project.",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to\nKnow about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nInden, Michael. 2023. Python Lernen – Kurz & Gut -.\nSebastopol: O’Reilly.\n\n\nKandolf, Peter. 2024. “ULG Data Science - WS22 971001 Software -\nIntroduction to Python, Git, and Docker.” https://doi.org/10.5281/zenodo.10532424.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based\nIntroduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed.\nSebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nMing, Frost. 2019. “PDM project\nsite.” Online: Accessed 09-September-2024. https://pdm-project.org/.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with\nGit. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed.\nSebastopol: O’Reilly.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on\nIntroduction. München: No Starch Press.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "basics/index.html",
    "href": "basics/index.html",
    "title": "Basics",
    "section": "",
    "text": "In this secton we are going to lay the ground work for our introduction into softwaredesign by looking at:\n\nour main programming language - Python - see 1  Introduction to Python\nour way of managing packages - pdm - see 2  Package manager\nour way of keeping track of our code and projects - git - see 3  Version Control\n\nWe will use these tools throughout the notes. Our aim is, that by the end of the notes you will use them without a second thought.\n\n\n\n\n\n\nNote\n\n\n\nAs mentioned earlier, these notes assume that you have some basic knowledge of programming and we build on that knowledge to widen your horizon.\n\n\nAt the end of this part you will also find an 4  Epilogue where we bind them all together with some final thoughts.\n\nAdditional resources\nHere you find some literature regarding the topics covered in this section.\n\nPython\n\nMatthes (2023): Python Crash Course - A hands-on, project-based introduction to programming; Online Material.\nPython Cheat Sheet provided by Matthes (2023).\nMcKinney (2022): Python for data analysis 3e; Online and Print\nVasiliev (2022): Python for Data Science - A Hands-On Introduction\nInden (2023): Python lernen – kurz & gut; German\n\n\n\nPDM\n\nProject page pdm-project.org\nProject on GitHub\n\n\n\nGit\n\nPonuthorai and Loeliger (2022): Version Control with Git: Powerful Tools and Techniques for Collaborative Software Development;\nChacon and Straub (2014): Pro Git: Everything you need to know about Git, Online\nSiessegger (2024): Git – kurz & gut; German\nPolge (2024): A Visual Git Reference, Online\nCoglan (2014): A book that tells you how to build Git on your own, Shop\nPolge (2024): Write yourself a Git; an online book that tells you how to build Git on your own, Link\nGit cheat sheet from education.github.com\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to Know about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nInden, Michael. 2023. Python Lernen – Kurz & Gut -. Sebastopol: O’Reilly.\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based Introduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with Git. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed. Sebastopol: O’Reilly.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on Introduction. München: No Starch Press.",
    "crumbs": [
      "Basics"
    ]
  }
]