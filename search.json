[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Softwaredesign",
    "section": "",
    "text": "Warning\n\n\n\nThe notes presented here are still under construction and can change without warning.\n\n\n\nPreface\nThese are the lecture notes for the Softwaredesign class part of the MCI | The Entrepreneurial School master for Mechatronik - Automation, Robotics & AI in the winter term 2024/25.\n\n\nAcknowledgements\nWe want to thank the open source community for providing excellent tutorial and guides for Python, Git, and Docker on the web. Individual sources are cited at the appropriate spot throughout document at hand.\nWe want to thank Mirjam Ziselsberger for testing, checking, suggestions and general proofreading. We also want to thank Elias Tappeiner from the Department of Biomedizinische Bildanalyse UMIT, Hall in Tirol, Österreich for his slides on Git.\nThese notes are built with Quarto.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "basics/python.html",
    "href": "basics/python.html",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "Installation\nOn Linux and Mac a recent Python version is usually installed. Check this by opening a terminal and running\nand you should see something similar if not the same. If not have a look here and search for your platform.\nFor Windows 10 and above we can use the version from the Microsoft Store. If you have another version check here too and search for your platform.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#installation",
    "href": "basics/python.html#installation",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "$ python3 --version\nPython 3.12.3",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#getting-started",
    "href": "basics/python.html#getting-started",
    "title": "1  Introduction to Python",
    "section": "1.1 Getting started",
    "text": "1.1 Getting started\n\n\n\n\n\n\n Type along\n\n\n\nThis part is designed as a type along session!\n\n\nAs usual for programming guides, we start with:\n\nprint(\"Hello, World\")\n\nHello, World\n\n\n\n\n\n\n\n\nNote\n\n\n\nThese notes are generated from markdown and executable code (for a lot of the Python aspects). This means sometimes the results are part of the text, but if we need to make sure you can see the output we highlight it with some background color. For this reason and to make it easier to copy and past code from the notes we omit &gt;&gt;&gt; that you see in your REPL.\n\n\nLets break down what we did above6:\n\nwe called a function print - indicated by ( and ) respectively,\nwe handed the text Hello, World to that function - indicated by the two \",\nthe REPL returned the result and printed it on screen.\n\nThe text above is called a string and you can do operations with strings, like:\n\nprint(\"Hello,\" + \"World\")\nprint(\"Spam\" * 5)\n\nHello,World\nSpamSpamSpamSpamSpam\n\n\nHere + and * are so called operators. The first combines (concatenates) two strings, the second multiplies one string.\n\n\n\n\n\n\nImportant\n\n\n\nThe Style guide - PEP 8 tells us that an operator should have a leading and trailing white space.\n\n\nIn case we want to know more about the function print we can use another function to get some more insight:\n\nhelp(print)\n\nHelp on built-in function print in module builtins:\n\nprint(*args, sep=' ', end='\\n', file=None, flush=False)\n    Prints the values to a stream, or to sys.stdout by default.\n\n    sep\n      string inserted between values, default a space.\n    end\n      string appended after the last value, default a newline.\n    file\n      a file-like object (stream); defaults to the current sys.stdout.\n    flush\n      whether to forcibly flush the stream.\n\n\n\nNow let us pick up a bit of speed.\n\n1# Mathematical operators\n3 + 2\n2 * 10\n24 // 2    # Integer division\n4 / 3\n(9 + 8) * 32\n\n\n1\n\nWe can write comments, that get ignored by the interpreter. They start with #\n\n2\n\nComments can also follow a command\n\n\n\n\n544\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you copy and execute the code above your output will differ and look something like:\n&gt;&gt;&gt; # Mathematical operators\n&gt;&gt;&gt; 3 + 2\n5\n&gt;&gt;&gt; 2 * 10\n20\n&gt;&gt;&gt; 4 // 2\n2\n&gt;&gt;&gt; 4.0 / 2\n2.0\n&gt;&gt;&gt; (9 + 8) * 32\n544\nThis is due to the fact that the system used to create these notes does not feed the input to the REPL one by one but rather as a script. Therefore, we will often just suppress the output or if we want to make sure something is printed in the notes we will use print explicitly.\n\n\nThere are the usual boolean operators for comparison:\n\n1 != 2\n1 &lt; 2\n2 &gt; 3\n1.0 &gt;= 1\n0.99 &lt;= 1\n\n# and combine them with logical operators\n(1.0 &lt;= 1) and (1.0 &gt;= 1)\n(2 &lt; 1) or (2 &gt; 1)\nnot (1 != 2)\n\nWe can assign a value to a variable and use them later on:\n\npi = 3.1415926535897932\nx = 90\n\n# Convert degree to radiant\nx_rad = x * (pi / 180)\n\n# Convert it back to degree\nx_new = x_rad * (180 / pi)\n\n# Check if they are the same\nx == x_new\n\nWe can also change the value of a variable:\n\n# We can make the printed statement more elaborate\nprint(\"x =\", x)\nx = 45.0\nprint(f\"x = {x}\")\nprint(f\"{x=}\")\n\nx = 90\nx = 45.0\nx=45.0\n\n\n\n\n\n\n\n\nNote\n\n\n\nPython is dynamically typed, meaning that the type of a variable is checked during runtime and not beforehand.\nAs a result you can change the type7 of a variable without the interpreter complaining about it. This is often the cause of strange bugs in programs so be aware that Python has types, even though we do not always see them.\n\n\nWe have simple simple control sequences that help us to run different code depending on a condition:\n\nif x &lt; 90:\n  x = x * 2      # This section gets executed if the statement is true\nelse:\n  x = x / 2      # And this if it is false\n\nprint(f\"x = {x}\")\n\nif x &lt; 45:\n  x = x * 2\nelif x &lt; 90:\n  x = x * 3      # If the first statement is false but the second true\nelse:\n  x = x ** 2     # If none of the above statements is true\nprint(f\"x = {x}\")\n\nx = 90.0\nx = 8100.0\n\n\nIn order to understand loops better we first need to introduce lists. In essence, they represent an ordered sequence of values that can have arbitrary types.\n\n# List of integers\n[2, 4, 6, 8]\n# List of strings\n[\"A\", \"B\", \"C\"]\n# List of lists\n[[2, 4, 6, 8], [\"A\", \"B\", \"C\"]]\n# List of mixed types\n[2, \"A\"]\n# Assign a list to a variable\nintegers = [2, 4, 6, 8]\n# Changing values\nintegers[1] = -4\n# append something to a list\nintegers.append(10)\n# combine to lists\nintegers + [1, 3]\n\nThere are also functions that can generate specific types of lists for you. One such function is range, with the signature range(start, stop[, step]).\n\n# List of integers from 0 to 2\nrange(3)\n# List of integers from 5 to 9\nrange(5, 10)\n# List of integers from 10 to 1 in reverse order\nrange(10, 0, -1)\n\nrange(10, 0, -1)\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that the stop value is not part of the list but rather stop -1 and technically range does not return a list but rather an object that behaves like a list for most parts.\n# Part of the help\n&gt;&gt;&gt; help(range)\n\nHelp on class range in module builtins:\n\nclass range(object)\n |  range(stop) -&gt; range object\n |  range(start, stop[, step]) -&gt; range object\n |  \n |  Return an object that produces a sequence of integers from start (inclusive)\n |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\n |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\n |  These are exactly the valid indices for a list of 4 elements.\n |  When step is given, it specifies the increment (or decrement).\n\n\nNow let us introduce loops as part of our control sequences:\n\n# For loops work best with lists or sets\nsum = 0\nfor i in integers:\n  sum = sum + i\n\nmean = sum / len(integers)   # len computes the length of a list\nprint(mean)\n\n# Find out how many even and how many odd number are in a list\nodd = 0\neven = 0\nfor i in range(1, 10):\n  if i % 2:\n    even = even + 1\n  else:\n    odd = odd + 1\nprint(f\"{even=}, {odd=}\")\n\n# While loops run until a statement is no longer true\na = 5\nb = 2\nc = 1\nwhile (a &gt; 0):\n  a = a - 1\n  c = c * b\nprint(f\"{b}^5 = {c}\")\n\n4.4\neven=5, odd=4\n2^5 = 32\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThere is an internal function called sum and we just overwrote this function, so be careful how you choose your variable names.\n\n\nOf course there are easier ways to compute the sum of a list or \\(2^5\\). For this we need to import additional functions:\n\nimport math\nmean = math.fsum(integers) / len(integers)\nprint(mean)\n\nc = math.pow(2, 5)\nprint(c)\n\n4.4\n32.0\n\n\nmath is one of the Python standard libraries, but quite often they do not suffice for the task at hand and you need some additional libraries.\nIn the next section we will discuss package managers and one possible solution for this.\nFurthermore, so far we only typed in the REPL and if we want to do the same again we need to retype everything. So we need to talk about script files which will lead us to version control.\nFor now, this ends our brief start with Python but you should try our new knowledge by finishing the following exercise.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#exercises",
    "href": "basics/python.html#exercises",
    "title": "1  Introduction to Python",
    "section": "1.2 Exercises",
    "text": "1.2 Exercises\n\n\n\n\n\n\n\nExercise 1.1 ( Lists, conditionals and loops) For two given lists list1 and list2 of integers with equal length define the following new lists:\n\nlist_zip which combines the two lists to a single list like a zip. So start with the first element of list1, followed by the first element of list2, than the second elements until all elements of the lists are combined.\nlist_odd which contains only the odd integers of list1, followed by the odd integers of list2.\nlist_zip_reverse which combines the elements of the lists like for list_zip but starts at the last element of list1.\n\n\nExample\nFor list1 = [1, 2, 3, 4, 5] and list2 = [11, 12, 13, 14, 15], we get\n\nlist_zip = [1, 11, 2, 12, 3, 13, 4, 14, 5, 15]\nlist_odd = [1, 3, 5, 11, 13, 15]\nlist_zip_reverse = [5, 15, 4, 14, 3, 13, 2, 12, 1, 11]",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/python.html#footnotes",
    "href": "basics/python.html#footnotes",
    "title": "1  Introduction to Python",
    "section": "",
    "text": "A language that has a strong abstraction level between the hardware of the computer and the user.↩︎\nThe term describes how easy it is for a human reader to follow the purpose, control flow and the single operations of source code, i.e. a program.↩︎\nAs of September 6th 2024, see Python Source Releases for a current overview.↩︎\nA way of specifying what the usual three numbers of a version mean, see semver.org↩︎\nRead Evaluate Print Loop↩︎\nWe start easy and with a bit more explanation, but do not worry we will not always break it down as much.↩︎\nType could be something like integer, float, or string↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Python</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html",
    "href": "basics/packagemanager.html",
    "title": "2  Package manager",
    "section": "",
    "text": "2.1 Package management for python\nBefore we go into detail for the package manager of choice, we need to discuss what such a system is supposed to offer us.\nAs a starting point have a look at what xkcd has to say about it:\nHere is the (probably not complete) authors list (random order):\nThe Python Packaging Authority (PyPA)2 provides a user guide for distributing and installing Python packages. As soon as you think of providing your own package for others you should carefully study this guide, but for now, we only have a quick look into Tool recommendations.\nThe standard tool is pip and for scientific software specifically conda and Spack.\nWe are going to look at pdm (see Ming (2019)), as this is a modern Python package manager that uses pyproject.toml files to store metadata of the project and much more.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#package-management-for-python",
    "href": "basics/packagemanager.html#package-management-for-python",
    "title": "2  Package manager",
    "section": "",
    "text": "Figure 2.2: The xkcd comic #1987 discussing python environments, explainxkcd. Click the image to get to the original image source https://imgs.xkcd.com/comics/python_environment.png.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPlease think about what you believe are must have and nice to have features that we should have for our package manager.\n\n\n\n\n\nmust haves\n\nper project based environments (venv)\nlock files for exact package version reproducibility, see {Section 4.1}\n\ncross platform dependencies\n\nreadable documentation\n\nnice to haves\n\nmultiple sources for packages\n\nprivate repos (work environment)\n\nstay close to official PEP standards 1\nbackwards compatibility for lock files\neasy way to have a project version\nlocal install for self written packages\ndifferent algorithms for building the dependency tree\ndeployment with testing capabilities\nintegrate with virtualization\ncompatibility to other package managers\nallow integration of environment variables, e.g. .env files\n\nobvious\n\nintegrate with version control software\nprovide a wide range of packages\nhave a good user interface\n\n\n\n\nThe Python packaging landscape consists of many different tools. For many tasks, the Python Packaging Authority (PyPA, the working group which encompasses many packaging tools and maintains this guide) purposefully does not make a blanket recommendation; for example, the reason there are many build backends is that the landscape was opened up in order to enable the development of new backends serving certain users’ needs better than the previously unique backend, setuptools. This guide does point to some tools that are widely recognized, and also makes some recommendations of tools that you should not use because they are deprecated or insecure.\nSource: From the PyPa Guide, as of 9th of September 2024\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe main thought behind selecting pdm for further discussions here is the experience of the authors regarding cross platform support, ease of use, and transferability to other languages like julia, rust, or go. Especially the Pgk.jl package in julia was such a drastic contrast to conda that the authors searched for an alternative.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#an-introduction-on-working-with-pdm-for-your-python-project",
    "href": "basics/packagemanager.html#an-introduction-on-working-with-pdm-for-your-python-project",
    "title": "2  Package manager",
    "section": "2.2 An introduction on working with PDM for your python project",
    "text": "2.2 An introduction on working with PDM for your python project\n\n\n\n\n\n\n Type along\n\n\n\nThis part is designed as a type along session!\n\n\n\nPDM can manage virtual environments (venvs) in both project and centralized locations, similar to Pipenv. It reads project metadata from a standardized pyproject.toml file and supports lockfiles. Users can add additional functionality through plugins, which can be shared by uploading them as distributions.\nUnlike Poetry and Hatch, PDM is not limited to a specific build backend; users have the freedom to choose any build backend they prefer.\nSource: From the pdm-project on github, as of 9th of September 2024\n\nThe following screen cast gives us a quick overview of its capabilities. \n\n\n\n\n\n\nNote\n\n\n\nFor this guide we closely follow the notes on the project page https://pdm-project.org/, please note that the original code and potential updates to it can be found there, see Ming (2019).\n\n\n\n2.2.1 Installation\nFirst we need to install pdm so that it is available (globally) on our system. For this to work, Python version 3.8 or later must be available on the system.\nThe recommended way is to use the provided install script.\n\nLinux/MacWindows\n\n\ncurl -sSL https://pdm-project.org/install-pdm.py | python3 -\n\n\n(Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).Content | py -\n\n\n\nOf course we do not just download a file from the internet without checking the content. At the time of writing the current sha256 is\ncdaae475a16ae781e06c7211c7b075df1b508470b0dc144bbb73acf9a8389f91  install-pdm.py\nsee install-pdm.py.sha256\nYou can check the file sha by calling:\n\nLinux/MacWindows\n\n\ncurl -sSL https://pdm-project.org/install-pdm.py | shasum -a 256\n\n\nGet-FileHash -InputStream (Invoke-WebRequest -Uri https://pdm-project.org/install-pdm.py -UseBasicParsing).RawContentStream -Algorithm SHA256\n\n\n\nBy default, pdm is installed into the user space (depending on the platform), but this can be modified via arguments to the script, see the help option of the script.\n\n2.2.1.1 Optional - Shell completion\nFor a better user experience we would recommend to include the shell completion.\n\nBash (Linux)Zsh (Mac)Powershell (Windows)\n\n\npdm completion bash &gt; /etc/bash_completion.d/pdm.bash-completion\n\n\n# Make sure ~/.zfunc is added to fpath, before compinit.\npdm completion zsh &gt; ~/.zfunc/_pdm\n\n\n# Create a directory to store completion scripts\nmkdir $PROFILE\\..\\Completions\necho @'\nGet-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object {\n    . $_.FullName\n}\n'@ | Out-File -Append -Encoding utf8 $PROFILE\n# Generate script\nSet-ExecutionPolicy Unrestricted -Scope CurrentUser\npdm completion powershell | Out-File -Encoding utf8 $PROFILE\\..\\Completions\\pdm_completion.ps1\n\n\n\n\n\n\n2.2.2 Start a new project\nLet us start a new project in a new directory:\n1$ mkdir test\nmkdir: created directory 'test'\n\n2$ cd test/\n\n1\n\ncreate a directory\n\n2\n\nchange into this directory\n\n\nIn order to start a new pdm project you can use pdm init. This will prompt you with a couple of questions and based on the answers the pyproject.toml file is initialized.\n1$ pdm init\nCreating a pyproject.toml for PDM...\n2Please enter the Python interpreter to use\n 0. cpython@3.11 (/usr/local/bin/python3)\n 1. cpython@3.12 (/usr/bin/python3.12)\n 2. cpython@3.11 (/usr/local/bin/python3.11)\n 3. cpython@3.8 (/usr/local/bin/python3.8)\nPlease select (0): 1\n3Virtualenv is created successfully at /tmp/test/.venv\n4Project name (test):\n5Project version (0.1.0):\n6Do you want to build this project for distribution(such as wheel)?\nIf yes, it will be installed by default when running `pdm install`. [y/n] (n): n\n7License(SPDX name) (MIT):\n8Author name (John Doe):\nAuthor email (John.Doe@generic.edu):\n9Python requires('*' to allow any) (==3.12.*):\nProject is initialized successfully\n\n1\n\nStart the initialization with pdm init.\n\n2\n\nWe need to select a python interpreter. pdm will search for all available interpreters on your path, if you need a different version than those available you can use pdm to install a new standalone python version, see pdm python command or the docs3.\n\n3\n\nBy default pdm will create a new virtualenv for you as this is the recommend procedure, if you want to influence this behavior see docs.\n\n4\n\nWe need to specify a project name. This name is used in the pyproject.toml and pdm will also generate a src/&lt;name&gt; directory for you right away (together with a test directory). pdm uses its default template, see docs.\n\n5\n\nThe version of your project needs to be initialized. pdm follows semantic versioning4 by default. If you do not have a specific version in mind stick to 0.1.0 for a new project.\n\n6\n\nNext we need to decide if we plan to distribute the project. For now n (no) will suffice, but hopefully by the end of these notes you feel comfortable enough to release your own package. Once this is the case, take a look at the docs and the Python Packaging User Guide.\n\n7\n\nLicensing is next. This is a rather important issue when you release software, but we need to postpone it as well. So stick to the default for now.\n\n8\n\nAuthor name and email can (and should) be a list if you have multiple contributors. pdm will try to figure out defaults from system settings.\n\n9\n\nFinally, you will be asked for the required python version. Here you can specify the compatibility of your project to various python versions5. For good reason, by default it will only allow the current version you selected in the first step. In theory you can specify something like &gt;=3.8,!=3.9.0,&lt;3.13 (a python version between 3.8 and 3.13, including 3.8 but excluding 3.13 and additionally excluding 3.9.0) but be aware that might become tricky when adding dependencies.\n\n\nNow you have a new project available and it should look like this:\n1$ tree -a\n.\n2├── .gitignore\n├── .pdm-python\n├── __pycache__\n├── pyproject.toml\n├── README.md\n├── src\n│   └── test\n│       ├── __init__.py\n│       └── __pycache__\n├── tests\n│   ├── __init__.py\n│   └── __pycache__\n3└── .venv\n    ├── bin\n    │   ├── activate\n    │   ├── activate.csh\n    │   ├── activate.fish\n    │   ├── activate.nu\n4    │   ├── activate.ps1\n    │   ├── activate_this.py\n    │   ├── python -&gt; /usr/bin/python3.12\n    │   ├── python3 -&gt; python\n    │   └── python3.12 -&gt; python\n    ├── .gitignore          \n    ├── lib\n    │   └── python3.12\n    │       └── site-packages\n    │           ├── _virtualenv.pth\n    │           └── _virtualenv.py\n    └── pyvenv.cfg\n\n12 directories, 19 files\n\n1\n\nList all files in the directory\n\n2\n\nA .gitignore file is created\n\n3\n\nVirtual environment\n\n4\n\nWindows activation start file (cross platform)\n\n\nThe second highlighted section tells us that pdm is designed to work with a version control system. By default it uses git as seen by the .gitignore file highlighted. In this context:\n\n\n\n\n\n\nImportant\n\n\n\nYou must commit the pyproject.toml file. You should commit the pdm.lock and pdm.toml file. Do not commit the .pdm-python file.6\n\n\nTo check what setup pdm created for you, you can use the pdm info command, where the --env option provides us with more details about the environment/platform.\n$ pdm info\nPDM version:\n  2.18.1\nPython Interpreter:\n  /tmp/test/.venv/bin/python (3.12)\nProject Root:\n  /tmp/test\nLocal Packages:\n  \n$ pdm info --env\n{\n  \"implementation_name\": \"cpython\",\n  \"implementation_version\": \"3.12.3\",\n  \"os_name\": \"posix\",\n  \"platform_machine\": \"x86_64\",\n  \"platform_release\": \"6.8.0-41-generic\",\n  \"platform_system\": \"Linux\",\n  \"platform_version\": \"#41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024\",\n  \"python_full_version\": \"3.12.3\",\n  \"platform_python_implementation\": \"CPython\",\n  \"python_version\": \"3.12\",\n  \"sys_platform\": \"linux\"\n}\n\n\n\n\n\n\nNote\n\n\n\nOf course it is also possible to import from other package manager systems, see docs.\n\n\n\n\n2.2.3 Manage dependencies\nNow that the project exists we can look at the main task: managing packages. We will cover the basics that we need, for a full guide see Manage Dependencies at docs.\n\n2.2.3.1 Add dependencies\nTo add a dependency you can use the pdm add command, where the system follows the PEP 508 specifications.\npdm add requests           # add requests\npdm add requests==2.25.1   # add requests with version constraint\npdm add requests[socks]    # add requests with extra dependency\npdm add \"flask&gt;=1.0\" flask-sqlalchemy   # add multiple dependencies with different specifiers\n\n\n\n\n\n\nNote\n\n\n\nBy default pdm searches for dependencies on PyPI, see docs on how to add to or modify the package index.\nIf you are not sure how a package is called use pdm search to locate it (even though the search could be improved).\n\n\nIt is rather common for python dependencies to have dependencies on their own. pdm will make sure to install all of those as well. Everything that is installed will end up in the pdm.lock file with the exact version and where it comes from.\nIn contrast to other dependency management systems such as requirements.txt a very handy feature of pdm is that it will only add the specified dependencies to the pyproject.toml and not all sub-dependencies. This makes it easier for somebody else to keep track of what your actual dependencies are and especially for update procedures.\n\n2.2.3.1.1 Add local dependencies\nQuite often it happens that you develop a project and use it as a dependency in another project you are working on. In this case you want to have a local dependency. This can be added by calling:\npdm add ./my-project\nIt is important to mention, that the path must start with . otherwise it is not interpreted as a local dependency.\n\n\n\n2.2.3.2 Development dependencies\nWith pdm you can also define groups of dependencies that are particularly useful during development. This might be a linter, formatter, or tools for testing and creating the docs.\npdm add -dG lint flake8\nYou will find these dependencies in a special section in you pyproject.toml file, namely:\n[tool.pdm.dev-dependencies]\nlint = [\"flake8\"]\n\n\n2.2.3.3 Inspect dependencies\nIf you need to find out what your installed dependencies are you can use pdm list or pdm list --tree.\n$ pdm list --tree\nrequests 2.32.3 [ required: &gt;=2.32.3 ]\n├── certifi 2024.8.30 [ required: &gt;=2017.4.17 ]\n├── charset-normalizer 3.3.2 [ required: &lt;4,&gt;=2 ]\n├── idna 3.8 [ required: &lt;4,&gt;=2.5 ]\n└── urllib3 2.2.2 [ required: &lt;3,&gt;=1.21.1 ]\n\n\n2.2.3.4 Update dependencies\nIf you find that a package has released an update that is required for your project you can use pdm to update your packages:\npdm update\nwill update all packages (if possible) in your pdm.lock file, while\npdm update requests\nwill only update the specified dependency (you can specify multiple packages).\n\n\n2.2.3.5 Remove dependencies\nIf you have added a dependency but no longer need it, you can remove it by calling pdm remove. Note that all sub-dependencies will be removed as well.\n\n\n2.2.3.6 List outdated dependencies\nWith pdm outdated you get a list of outdated packages with the latest version available.\n\n\n2.2.3.7 Other dependencies than python packages\nIt might happen that your project needs additional dependencies other than python resources. In this case you can also use pdm to install a multitude of those.\nAs an example, you can install the Intel Math Kernel Library (mkl) and cmake by calling\npdm add mkl cmake\n\n\n\n2.2.4 Initialize an existing project\nIf the pdm project already exists, e.g. you just cloned a project, all you need to do is run\npdm install\nto check the project file for changes, update the lock file if needed and run pdm sync to install all packages from the lock file.\n\n\n2.2.5 Running your code\nAs mentioned throughout these notes, pdm uses virtualenv to manage your project. This means you need to activate the project to work with it.\nIf you simply want to run a python script in your environment use:\npdm run python &lt;SCRIPT.py&gt; &lt;arguments&gt;\nSimilar you can start the python console via:\npdm run python\nIf you need to work in your current terminal with the environment you created it is easier to use pdm venv activate which will tell you how to activate the enviroment in your current terminal. In bash you can use\neval $(pdm venv activate)\nto directly activate the environment.\n\n\n\n\n\n\nTip\n\n\n\nYou should set up your IDE such that it searches for .venv directories for the python interpreter to make sure you do not get missing includes warnings and if you use the direct call or debug features you call the correct version.\n\n\nThis concludes our little guide for package managers in python. Make sure to revisit this sections and the pdm docs if you need them for the course of this section.\n\n\n\n\nMing, Frost. 2019. “PDM project site.” Online: Accessed 09-September-2024. https://pdm-project.org/.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/packagemanager.html#footnotes",
    "href": "basics/packagemanager.html#footnotes",
    "title": "2  Package manager",
    "section": "",
    "text": "Short for Python Enhancement Proposals, see Python PEPs↩︎\nThe Python Packaging Authority (PyPA) is a working group that maintains a core set of software projects used in Python packaging, see https://www.pypa.io/ as at 9th of September 2024↩︎\nIn case you are wondering what the .pdm-python files is, it stores the path to your python interpreter and is used for subsequent calls.↩︎\nWe recommend having a read of semver.org↩︎\nPython does not follow SemVer (see docs), sometimes a minor version will have a breaking change, so make sure to check the Porting to Python X.Y section for What’s new.↩︎\nQuote from pdm-project.org as at 9th of September 2024↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Package manager</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html",
    "href": "basics/versioncontrol.html",
    "title": "3  Version Control",
    "section": "",
    "text": "What is git and a bit of history\nGit was developed as a free and open source software by Linus Torvalds in 2005 for the development of the Linux kernel. The main goals in the development were (according to wikipedia):\nRegarding the name:\n“git” can mean anything, depending on your mood.\nIn the following we try to give a pragmatic hands on introduction to the concepts of Git and how it can be uses. The notes are a mix of several sources but the main ideas are based on the git training by the UnseenWizzard.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#basics-of-git",
    "href": "basics/versioncontrol.html#basics-of-git",
    "title": "3  Version Control",
    "section": "3.1 Basics of Git",
    "text": "3.1 Basics of Git\nGit is a distributed VCS, which means the entire repository is distributed on various machines and possible multiple remotes. This was a clear design choice that allows individual contributors to work independently of the availability of a remote but still have the full history available. The following is based on the git training by the UnseenWizzard. The main structure as well as the basic idea in the pictures follows these notes, with a view adaptations where needed.\nIn particular, such a setup could look something like this:\n\n\n\nBasic setup\n\n\nIn this setup the Remote Repository is the place you send your changes to in order to have them visible for others, and in return you can get changes from them via the Remote Repository.\nLike the name suggests the Local (development) environment sits on your machine. The working directory is your current version of the files contained in the repository and the Local Repository is the copy of the entire repository (with all changes) on your machine. We will learn more about these parts as we go along.\n\n\n\n\n\n\nNote\n\n\n\nWe will use the small exercise from the previous Python section as python_ex1.py file.\n\n\n\n3.1.1 Let us start with getting a Remote Repository\nIn order to allow a playfield for this class I created a repository that we are going to use. In order to get it onto you local machine, type the following commands in the Terminal:\n# Navigate to a suitable directory\ngit clone https://github.com/kandolfp/playground.git\nThis will perform the following two actions:\n\nCheckout the content of the remote repository into the working directory. By default this is the name of the repository, in your case the folder playground is created and all files are put there.\nA copy of the remote repository is stored in the local repository. For all intended purposes, it acts exactly the same as the Remote Repository, with the sole exception that is not shared with others.\n\n\n\n\nClone a remote repository to your machine\n\n\n\n\n3.1.2 Adding content\nWith the following snippet you can view the content of the repository (the second line is the response):\n&gt; ls playground\npython_ex1 README.md\nAs you can see there is currently only a README.md and the folder python_ex1.\nNow lets add our solutions of the exercises we did in Python to the repository.\nFirst we copy the file to exercise directory\ncp PATH/TO/YOUR/FILE/solution_ex1.py python_ex1/{YOUR ID}.py \nIn my case the command reads like this:\n&gt; cp ../Exercises/reference_solution.py python_ex1/ID.py\n'../Exercises/reference_solution.py' -&gt; 'python_ex1/ID.py'\nThis has modified our working directory. In order to get an idea what Git thinks about this lets run git status in the working directory:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    python_ex1/ID.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLets break down the output of the command. First, Git tells you which branch you are on (we will hear more about that later), second, that local repository is different from the remote repository and it states that you have tracked and untracked files.\nNow, a tracked files is a file that is part of the repository and Git is keeping track of what is happening to it. An untracked file on the other hand, is a file that is in the same directory but it is not managed by Git.\nGit tells you how to change the status of your untracked file into a tracked file.\nWe do this by running git add python_ex1/ID.py.\nNow it is time to introduce another Git concept, namely the staging area. The stating area is the curious white spot between your working directory and the local repository in the above pictures. This is the place where Git collects all the changes to your files that you want to put into the local repository.\n\n\n\nStaging area with the changes that can be moved to the repository\n\n\nBy rerunning git status we get\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    new file:   python_ex1/ID.py\nNow that we are confident that all our changes are in the staging area, we are ready to commit the changes to the local repository. This is done by running git commit. A text editor will open and you are able to write a message telling everybody what you just did in the repository. Usually you will also see the changes you are about to commit. The commit message is something really important and the message should be meaningful and readable as it will be later used by others to understand your action(s). There are several ways to do this and it boils down to what your team wants, but here are some links on good commit messages:\n\nConventional Commits\nhttps://cbea.ms/git-commit/\n\nThe same can be achieved directly in the Terminal by writing\n&gt; git commit -m \"feat: add my solution for python exercises 1\"\n[main 578e48f] feat: add my solution for python exercises 1\n 1 files changed, 85git insertions(+)\n create mode 100644 python_ex1/ID.py\n\n\n\nCommitting changes the repository\n\n\nIn the above message you can see that your commit gets some more meta data. Specifically, it gets a SHA-1 hash, namely 578e48f The hash is used to keep track of your commits and is one of the ground breaking ideas that makes Git so successful. The hash is much longer, but due to its nature it is in most cases unique from the first seven digits.\n\n\n\n\n\n\nImportant\n\n\n\nAny changes done to a file after running git add &lt;file&gt; will not be part of a commit. If they should be included you need to rerun git add &lt;file&gt;.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nMy submitting an empty commit message you can abort a commit.\n\n\nNow the changes are in the local repository and you can continue working. In order to share your changes with others you need to get them to the remote repository. This is done by pushing the changes. We do this by calling git push, which gives us an output similar to:\nEnumerating objects: 6, done.\nCounting objects: 100% (6/6), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 1.17 KiB | 1.17 MiB/s, done.\nTotal 4 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/kandolfp/playground.git\n   e8f13f4..0b8a494  main -&gt; main\n\n\n\nPushing changes from the local to the remote repository\n\n\nNow, if you were to do this on your own, everything would work and you would be happy. Unfortunately, since we are doing this in a class and at the same time, we will encounter some difficulties. After all, this is a crash course for Git, so eventually something hat to crash.\nSome of you might get the following message for git push:\nTo https://github.com/kandolfp/playground.git\n ! [rejected]        main -&gt; main (non-fast-forward)\nerror: failed to push some refs to 'https://github.com/kandolfp/playground.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nThis gives us the opportunity to talk about how to get changes from the remote repository to your local repository after the initial clone. But first, in order to do this properly, we need to talk about branches.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#branches",
    "href": "basics/versioncontrol.html#branches",
    "title": "3  Version Control",
    "section": "3.2 Branches",
    "text": "3.2 Branches\nThe word branch was mentioned several times before but not explained. The main idea is rather simple.\nIf you consider having one commit after the other in a long chain like the trunk of a tree a branch is the same as for a tree:\n\n\n\nA branch in a chain of commits\n\n\nIn short, whenever multiple commits are based on the same commit they (and all following commits) form different branches.\nBy default, git always operates on branches. When we cloned the remote repository we also cloned its branches and we started working on the main branch. You can go back and check the messages, it is always there.\nNow without knowing we created a branch. It is not visible to us but it is clear from the point of the remote repository.\nThere are several ways of integrating or merging two branches back into one.\nFor now we will only talk about the most elegant and simplest way, with a rebase.\nNaturally, every branch is based on a commit. In the above example 9a98eb2 is based on e8f13f4. As the name suggests, rebase simple changes this base. This gives us a clean way of how the entire Git commit chain is supposed to be read. We will see one way to perform a rebase in a moment. But first we need to know how to get remote changes into your local repository.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#integrating-remote-changes-into-your-local-environment",
    "href": "basics/versioncontrol.html#integrating-remote-changes-into-your-local-environment",
    "title": "3  Version Control",
    "section": "3.3 Integrating remote changes into your local environment",
    "text": "3.3 Integrating remote changes into your local environment\nThe above error message gives us already a hint on what to do but lets make it more structured.\nBy running:\n&gt; git status\nOn branch main\nYour branch and 'origin/main' have diverged,\nand have 1 and 1 different commits each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\n\nnothing to commit, working tree clean\nwe can see that the remote and the local repository have different commits.\nWith git fetch you can get changes from the remote repository into the local repository. This is the other way around as with the git push command.\n\n\n\nFetching changes from the remote to the local repository\n\n\nThe important part here is, that this does not affect your working directory as the changes are only synchronized with the local repository and when you try to push again you will see the same message. It does not even affect your local branches, it will only make sure that all of the remote branches are synchronized.\n\n3.3.1 Pulling\nIn order to affect the working directory and your local branches, we need to pull the changes in. This is done with git pull.\nAs we have some conflicts we need to define a strategy how to deal with them. At the moment we only know one, so let us use:\n&gt; git pull --rebase\nSuccessfully rebased and updated refs/heads/main.\nThis should have worked for everybody as all of you added different files to the repository and the Git tree looks something like this:\n\n\n\nAfter pulling and rebasing\n\n\nNext we will see what happens if we modify some files.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#modifying-content-in-a-repository",
    "href": "basics/versioncontrol.html#modifying-content-in-a-repository",
    "title": "3  Version Control",
    "section": "3.4 Modifying content in a repository",
    "text": "3.4 Modifying content in a repository\nA good start to do this is to link our uploaded file to the table in the README file in the repository.\nWith your favourite editor add the following content next to your ID (btw. this is markdown syntax):\n# Playground\n\n## List of submitted python exercises \n\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) |\nIf we check with git status we can see that README.md is modified.\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nOf course this is only a change in our working directory and not in either of the two repositories. Before we add the changes to the local repository we can use git diff to see what we actually changed.\ndiff --git a/README.md b/README.md\nindex d9f0acb..9ac3846 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py)|\n | ID1 | |\n | ID2 | |\n | ID3 | |\nWe already know the next steps, add, commit, and push.\nSo lets recall, with git add README.md we move the file into the staging area. Note: If you run git diff now, the output is empty. This is because, git diff only works on the changes in your working directory. You can still get the diffs from your staging area with git diff --staged (some editors will use this if you type up your commit message).\nNow, before we commit, we decide to modify README.md again. Maybe we made a typo or we just really want to nail this hand in so we change it, maybe we add\n| ID     | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nto make it clear we know what we are doing.\nIf we run git status we see the following\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   README.md\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   README.md\nwhich tells us that README.mdis modified and staged.\nIf we run a git diff again we get\ndiff --git a/README.md b/README.md\nindex 9ac3846..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | [my upload](python_ex1/ID.py)|\n+| ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n | ID1 | |\n | ID2 | |\n | ID3 | |\nwhich shows the changes to the staging area. If we are satisfied with our changes, we can use git add README.md again to add the file to the staging area and finally commit it with git commit. Of course we do this with a meaningful commit message.\nDepending on your timing, you might have to fetch and pull in changes to your local repository. By the way, you can directly call git pull, without first calling git fetch, the fetch is done implicitly. But we should not get a conflict as everybody changed a different line.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#conflicts-and-how-to-resolve-them",
    "href": "basics/versioncontrol.html#conflicts-and-how-to-resolve-them",
    "title": "3  Version Control",
    "section": "3.5 Conflicts and how to resolve them",
    "text": "3.5 Conflicts and how to resolve them\nIt will not always be this smooth and conflicts occur. For example when two commits with the same base make changes to a single line. We simulate this by simply copying our local repository and working directory - either with a new git clone or by copying the directory.\nFor this, we assume that in location A we changed README.md to\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) |\nand we commit and push this change to the remote repository.\nÀ&gt; git diff\ndiff --git a/README.md b/README.md\nindex d9f0acb..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py)|\n | ID1 | |\n | ID2 | |\n | ID3 | |\n\nA&gt; git add README.md\nA&gt; git commit -m \"add my exercise sheet\"\n[main a16b809] add my exercise sheet\n 1 file changed, 1 insertion(+), 1 deletion(-)\nA&gt; git push\nEnumerating objects: 8, done.\nCounting objects: 100% (8/8), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 769 bytes | 769.00 KiB/s, done.\nTotal 6 (delta 1), reused 0 (delta 0), pack-reused 0\nTo https://github.com/kandolfp/playground.git\n   0b8a494..a16b809  main -&gt; main\nNow in location B we do not get the changes from the remote repository but modify README.md to\n| Name/UID    | File        |\n| ----------- | ----------- |\n| ID     | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nand we try to do the same as before:\nB&gt; git diff\ndiff --git a/README.md b/README.md\nindex d9f0acb..28dba4b 100644\n--- a/README.md\n+++ b/README.md\n@@ -4,7 +4,7 @@\n \n | Name/UID    | File        |\n | ----------- | ----------- |\n-| ID  | |\n+| ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n | ID1 | |\n | ID2 | |\n | ID3 | |\nB&gt; git add README.md\nB&gt; git commit -m \"add my exercise sheet\"\n[main d9ac598] add my exercise sheet\n 1 file changed, 1 insertion(+), 1 deletion(-)\nB&gt; git push\nTo https://github.com/kandolfp/playground.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'https://github.com/kandolfp/playground.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\nThis is to be expected so we pull in the changes from remote as we learned with rebase:\nB&gt; git pull --rebase\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nerror: could not apply d9ac598... add my exercise sheet\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply d9ac598... add my exercise sheet\nAs usual, Git is quite helpful and tells you what to do. We have several options:\n\nsolve the conflicts, add the files and continue the rebase.\nskip our our commit d9ac598, so do not apply these changes\nabort the procedure\n\nWe opt for 1. and take a look with git diff\ndiff --cc README.md\nindex 12ee10e,28dba4b..0000000\n--- a/README.md\n+++ b/README.md\n@@@ -4,7 -4,7 +4,11 @@@\n  \n  | Name/UID    | File        |\n  | ----------- | ----------- |\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n+ | ID  | [my upload](python_ex1/ID.py) |\n++=======\n+ | ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt; d9ac598 (add my exercise sheet)\nHEAD is the latest commit in the chain of commits on the current branch on the remote repository. So we see:\n\nwhat HEAD brings in &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD,\nthe end of the changes is marked with =======\nand what we want to push out ended by a line &gt;&gt;&gt;&gt;&gt;&gt;&gt; d9ac598 together with the commit message.\n\nThis will be repeated for every conflict in the file.\nIf the conflicts are more elaborate and connected it is good to use a tool to sort it out. Your favourite IDE will most likely come with some tool or you look at specific Git tools for conflict resolution.\nFor us it is simple. We just want the file to look like\n | ID  | [my upload](python_ex1/ID.py) run it by calling `python3 python_ex1/ID.py`|\nso we make these changes and call\nB&gt; git add README.md\nB&gt; git rebase --continue\n[detached HEAD 3c6b1e6] add my exercise sheet, and make a conflict resolution\n 1 file changed, 1 insertion(+), 1 deletion(-)\nSuccessfully rebased and updated refs/heads/main.\nThis will prompt us to write a commit message. Lets use add my exercise sheet, and make a conflict resolution.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#stashing",
    "href": "basics/versioncontrol.html#stashing",
    "title": "3  Version Control",
    "section": "3.6 Stashing",
    "text": "3.6 Stashing\nThere is one more case we need to have a look at. What if we made some changes to a file, are not ready to make a commit yet, but need to pull in some changes coming from the remote? Another scenario would be that something in the repository needs urgent fixing so we need to switch back to a clean copy without loosing our current work. Git gives us the possibility to deal with these situations with yet another area and the git stashcommand.\n&gt; git status\nOn branch main\nYour branch is behind 'origin/main' by 1 commits (non-fast-forward).\n  (use \"git pull\" to update your local branch)\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   python_ex1/ID.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n&gt; git diff\ndiff --git a/python_ex1/ID.py b/python_ex1/ID.py\nindex f5b74fc..22038a5 100644\n--- a/python_ex1/ID.py\n+++ b/python_ex1/ID.py\n@@ -61,6 +61,11 @@ print(f\"Accuracy of pi with N =    100:   {get_accuracy(   100):8.5f}\")\n print(f\"Accuracy of pi with N =   1000:   {get_accuracy(  1000):8.5f}\")\n print(f\"Accuracy of pi with N = 100000:   {get_accuracy(100000):8.5f}\")\n \n+# ----------------------------------------------\n+# Alternative Implementation for (2)\n+# ----------------------------------------------\n+points = np.random.uniform(0, 1, [2, N])\n+\n \n # ----------------------------------------------\n # (3) Gaussian density\nWe have a dirty working directory as we just started to work on an alternative implementation for (2) but we are 1 commit behind the remote. With git stash push we can tell git to put all the changes aside for us and keep them safe (an optional message can be added). After pulling the remote changes back in we can finally reapply our stashed work by calling git stash pop (this will apply the latest stash, in case we have several).\nHere it is as image and in the terminal.\n\n\n\nStashing changes and pulling in from remote, see numbers for order\n\n\n&gt; git stash push\nSaved working directory and index state WIP on main: 4e76603 update list of participants\n\n&gt; git status\nOn branch main\nYour branch is behind 'origin/main' by 1 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n\nnothing to commit, working tree clean\n\n&gt; git pull --rebase\nSuccessfully rebased and updated refs/heads/main.\n\n&gt; git stash list\nstash@{0}: WIP on main: 4e76603 update list of participants\n\n&gt; git stash pop\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   python_ex1/ID.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped refs/stash@{0} (d31654c50cfffd2b3f4b931ccf07b5c8362d365a)\n\n&gt; git diff\ndiff --git a/python_ex1/ID.py b/python_ex1/ID.py\nindex f5b74fc..22038a5 100644\n--- a/python_ex1/ID.py\n+++ b/python_ex1/ID.py\n@@ -61,6 +61,11 @@ print(f\"Accuracy of pi with N =    100:   {get_accuracy(   100):8.5f}\")\n print(f\"Accuracy of pi with N =   1000:   {get_accuracy(  1000):8.5f}\")\n print(f\"Accuracy of pi with N = 100000:   {get_accuracy(100000):8.5f}\")\n \n+# ----------------------------------------------\n+# Alternative Implementation for (2)\n+# ----------------------------------------------\n+points = np.random.uniform(0, 1, [2, N])\n+\n \n # ----------------------------------------------\n # (3) Gaussian density\nWith git stash list we can view different stashes.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#history",
    "href": "basics/versioncontrol.html#history",
    "title": "3  Version Control",
    "section": "3.7 History",
    "text": "3.7 History\nThe last thing we look into is the history. Of course it is possible to look what happened in the repository. With git log we can do this\nB&gt; git log\ncommit 3c6b1e63504e5f46d80d50d7188a4d5303a7aa86 (HEAD -&gt; main)\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Fri Oct 14 08:29:36 2022 +0200\n\n    add my exercise sheet, and make a conflict resolution\n\ncommit a16b809ce95b319180373c6b0c00647f2a6539f4 (origin/main, origin/HEAD)\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Fri Oct 14 08:25:14 2022 +0200\n\n    add my exercise sheet\n\ncommit 0b8a49431b40aed9903d1ec6b76c243c20613b92\nAuthor: {Your Name} &lt;{Your email}&gt;\nDate:   Sun Oct 9 15:59:42 2022 +0200\n\n    feat: add my solution for python exercises 1\n\n\n\n\n\n\nNote\n\n\n\nMost likely we will see way more commits here as our fellow students made some commits as well.\n\n\nSo this is the official log of the repository but sometimes it is nice to see more, especially what happened when. Maybe we messed up a rebase and our changes are missing or something similar. As Git was build with fail safes in mind it has you covered there. What we want to look at is reflog\nB&gt; git reflog\n3c6b1e6 (HEAD -&gt; main) HEAD@{0}: rebase (continue) (finish): returning to refs/heads/main\n3c6b1e6 (HEAD -&gt; main) HEAD@{1}: rebase (continue): add my exercise sheet, and make a conflict resolution\na16b809 (origin/main, origin/HEAD) HEAD@{2}: pull --rebase (start): checkout a16b809ce95b319180373c6b0c00647f2a6539f4\nd9ac598 HEAD@{3}: commit: add my exercise sheet\n5673f78 HEAD@{4}: commit: list of student ids\n0b8a494 HEAD@{5}: pull --rebase (finish): returning to refs/heads/main\n0b8a494 HEAD@{6}: pull --rebase (start): checkout 0b8a49431b40aed9903d1ec6b76c243c20613b92\n9a98eb2 HEAD@{7}: commit: feat: add my solution for python exercises 1\na0f8f01 HEAD@{8}: clone: from https://github.com/kandolfp/playground.git\nThis command shows us what happened in our local repository.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/versioncontrol.html#further-stuff",
    "href": "basics/versioncontrol.html#further-stuff",
    "title": "3  Version Control",
    "section": "3.8 Further stuff",
    "text": "3.8 Further stuff\nThere is much more to see and do but this concludes the absolute basics. You will learn way more when you work with Git for some time. Some topics that you will come across are:\n\nThe .gitignore file\nMore elaborate work with branches\nMerging of branches\nCherry picking\nReverting commits\ngit blame to find out where this line of code comes from\nand so much more\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to Know about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nKandolf, Peter. 2024. “ULG Data Science - WS22 971001 Software - Introduction to Python, Git, and Docker.” https://doi.org/10.5281/zenodo.10532424.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with Git. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed. Sebastopol: O’Reilly.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "basics/epilogue.html",
    "href": "basics/epilogue.html",
    "title": "4  Epilogue",
    "section": "",
    "text": "4.1 A note on dependency and reproducibility\nBefore we conclude our introduction to package managers and version control we would like to share some thoughts on reproducibility.\nIn our world of modern infrastructure we depend on a lot of other projects and quite often we do not even realize what tools we need in the background for our little program to run. Best example, do you have any idea what the programming languages for the commands git, python, or pdm are and what system dependencies they have?\nThis is exquisitely illustrated in the following xkcd comic.\nThere only needs to be one little pebble misplaced and everything collapses.\nIn industry and academia it is often a problem that some computation can not be reproduced. Let it be an experiment that you need to rerun two years after your initial run, or generate some computations for an annual report. Or the more trivial matter of running you code on a different machine (of a colleague or after you got a new computer). Such situations require your program to provide the same output for the same input. Quite often we do not think about this during the development of our code but if we stick to some basic concepts we are already closer to reproducibility. Trust us if we say: Sooner or later you will need this!\nIn this last sections we discussed two tools that will help us in this quest:\nOur code will have dependencies and keeping the correct list and pinning the correct version helps us greatly. The dependencies also undergo development and are not standing still so we need to be aware that we run on a specific version. The same is true for our own code and version control helps us keep track of what, why, and how we did it. This helps us correct errors, return to an old but working versions, figure out who to blame for the error.\nBesides these two tools we should also write our code in such a way that it is easy to follow and we should try to keep it as little attached to our current work environment as possible - in particular with paths to files - and we can avoid a situation like the following:\nWe know that this is a bit much for beginners but if we stick to it from the start we have less to change later on.\nAnyway, lets end with:\nand Python style guide - PEP 8.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Epilogue</span>"
    ]
  },
  {
    "objectID": "basics/epilogue.html#sec-intro-pm-reproducibility",
    "href": "basics/epilogue.html#sec-intro-pm-reproducibility",
    "title": "4  Epilogue",
    "section": "",
    "text": "Figure 4.1: The xkcd comic #2347 discussing dependency, explainxkcd. Click the image to get to the original image source https://imgs.xkcd.com/comics/dependency.png.\n\n\n\n\n\n\n\npackage management\nversion control\n\n\n\n\nSure I can share my code but I am glad it runs on my machine. I have no idea how to get it to run on yours.\n\n\n\n\n\n\n\n\n\nFigure 4.2: The xkcd comic #1513 discussing code quality, explainxkcd. Click the image to get to the original image source https://imgs.xkcd.com/comics/code_quality.png.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Epilogue</span>"
    ]
  },
  {
    "objectID": "sss/sss1.html",
    "href": "sss/sss1.html",
    "title": "5  Self Study Session I",
    "section": "",
    "text": "5.1 Topics\nFor each topic we list various materials and what is the basic idea behind it.",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Self Study Session I</span>"
    ]
  },
  {
    "objectID": "sss/sss1.html#topics",
    "href": "sss/sss1.html#topics",
    "title": "5  Self Study Session I",
    "section": "",
    "text": "5.1.1 Variables, Data Types, Functions, Typing and Type Hints, Modules\nOnce you are familiar with how Python handles these topics you will be able to answer questions like:\n\nWhat is a variable?\nWhat is the scope of a variable?\nWhat is the type of a variable?\nHow can I change the type of a variable?\nIs Python typed?\nDoes talking about casting makes sense?\nWhat is the difference between assignment and copy?\nWhat happens to objects that are no longer referenced by any variable?\nIs Python using call by value or call by reference?\nWhat is the signature of a function?\nWhat are optional arguments?\nCan I figure out or define for function arguments some basic properties?\netc.\n\nThis topics are covered in the following resources (given in no particular order):\n\nMcKinney (2022) Online, Section 2 and 3\nMatthes (2023) Section 2 to 8\nVasiliev (2022) Chapter 2\nMCI Lecture notes of Julian Huber and Matthias Panny Online, Section 1 (German)\nMCI Lecture notes of Julian Huber Online, Section 1.2; (Access code is provided in Sakai)\nOverview article on type hinting dagster.io\nType hints at docs.python.org\nType hints cheat sheet form the docs of mypy Online",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Self Study Session I</span>"
    ]
  },
  {
    "objectID": "sss/sss1.html#exercises",
    "href": "sss/sss1.html#exercises",
    "title": "5  Self Study Session I",
    "section": "5.2 Exercises",
    "text": "5.2 Exercises\n\n\n\n\n\n\nImportant\n\n\n\nIf, and only if, you are taking the class at MCI and are not reading these notes on your own, you are expected to hand in the exercises below as a git repository.\n\n\n\n\n\n\nHow you should hand in the exercises\n\n\n\n\n\nIn order to get a bit of git and pdm training done we work for all exercises on GitHub.\n\nCreate a new private project in GitHub -&gt; you might want to use it for all later exercises as well.\nUse meaningful commit messages, see Conventional commits.\nGive the instructors (kandolfp) access to the project, see docs for help.\nCreate a pdm project in your repository and commit the necessary files.\nCreate an appropriate structure in your repository for the rest of the exercise (maybe have a look at the exercises to have a better idea first), not everything should be in the main folder.\nTry to structure your work on the exercises with git, i.e.\n\nDon’t commit things that do not belong together in one single commit. Each exercise can be considered as a separate thing. Subparts of an exercise might be independent as well.\nUse meaningful commit messages, see Conventional commits.\nMake sure that you do not commit something that does not work - produces an error. If you have difficulties with an exercise you can also commit your best effort in this case.\n\nAdd a README.md that explains what you are doing, how to run the exercises and anything else that is necessary (quick guide to pdm), maybe note your name somewhere (github nicks are not always easy to track down).\nOptional\n\nWork with issues, you can reference the issue in the commit message, docs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.1 (Indent is important in Python) Explain the outputs of the following code snippets, (compare Matthes 2023, chap. 4):\n\n\n\n\n\n\n1. Loop start to end - start\n\n\n\n\n\n\nband_members = [\"Peter\", \"Bjorn\", \"John\"]\n\nfor member in band_members:\nprint(member)\n\n\n  Cell In[1], line 4\n    print(member)\n    ^\nIndentationError: expected an indented block after 'for' statement on line 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 Loop start and end - middle\n\n\n\n\n\n\nband_members = [\"Peter\", \"Bjorn\", \"John\"]\n\nfor member in band_members:\n    print(f\"{member} played great in this song.\")\nprint(f\"I can not wait to hear {member} play in the next song.\")\n\nPeter played great in this song.\nBjorn played great in this song.\nJohn played great in this song.\nI can not wait to hear John play in the next song.\n\n\n\n\n\n\n\n\n\n\n\n3 Loop start and end - end\n\n\n\n\n\n\nband_members = [\"Peter\", \"Bjorn\", \"John\"]\n\nfor member in band_members:\n    print(f\"{member} played great in this song.\")\n    print(f\"I can not wait to hear {member} play in the next song.\")\n\n    print(f\"I can not wait to hear all of you at the next gig.\")\n\nPeter played great in this song.\nI can not wait to hear Peter play in the next song.\nI can not wait to hear all of you at the next gig.\nBjorn played great in this song.\nI can not wait to hear Bjorn play in the next song.\nI can not wait to hear all of you at the next gig.\nJohn played great in this song.\nI can not wait to hear John play in the next song.\nI can not wait to hear all of you at the next gig.\n\n\n\n\n\n\n\n\n\n\n\n4 Loop start and end - everything\n\n\n\n\n\n\nband_members = [\"Peter\", \"Bjorn\", \"John\"]\n\nfor member in band_members:\n    print(f\"{member} played great in this song.\")\n    print(f\"I can not wait to hear {member} play in the next song.\")\n\nprint(f\"I can not wait to hear all of you at the next gig.\")\n\nPeter played great in this song.\nI can not wait to hear Peter play in the next song.\nBjorn played great in this song.\nI can not wait to hear Bjorn play in the next song.\nJohn played great in this song.\nI can not wait to hear John play in the next song.\nI can not wait to hear all of you at the next gig.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.2 (Lists, conditionals and loops) For two given lists list1 and list2 of integers with equal length define the following new lists:\n\nlist_zip which combines the two lists to a single list like a zip. So start with the first element of list1, followed by the first element of list2, than the second elements until all elements of the lists are combined.\nlist_odd which contains only the odd integers of list1, followed by the odd integers of list2.\nlist_zip_reverse which combines the elements of the lists like for list_zip but starts at the last element of list1.\n\nExample:\nFor list1 = [1, 2, 3, 4, 5] and list2 = [11, 12, 13, 14, 15], we get\n\nlist_zip = [1, 11, 2, 12, 3, 13, 4, 14, 5, 15]\nlist_odd = [1, 3, 5, 11, 13, 15]\nlist_zip_reverse = [5, 15, 4, 14, 3, 13, 2, 12, 1, 11]\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.3 (Fizz Buzz) Write a program that prints the integers from 1 to 100 (inclusive). If, however, the number is a multiple of three then print Fizz instead, and if the number is a multiple of five then print Buzz.\nIf multiple conditions hold true then all replacements should be printed, for example 15 should print FizzBuzz.\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.4 (Difference between assignment, copy and deep copy) Have a look at the module copy and the functions copy, deepcopy as well as the standard assignment operator =.\nRun the following code and explain its output:\n\n\n\n\n\n\nShow the code and output\n\n\n\n\n\n\nimport copy\nlist1 = [[1, 2, 3], [4, 5, 6], [\"a\", \"b\", \"c\"], 2]\nlist2 = list1\nlist3 = copy.copy(list1)\nlist4 = copy.deepcopy(list1)\n\nprint(\"List # \\tID\\tEntries\")\nprint(\"1\\t\", id(list1), \"\\t\", list1)\nprint(\"2\\t\", id(list2), \"\\t\", list2)\nprint(\"3\\t\", id(list3), \"\\t\", list3)\nprint(\"4\\t\", id(list4), \"\\t\", list4)\n\nlist1[3] = -2\n\nprint(\"List # \\tID\\tEntries\")\nprint(\"1\\t\", id(list1), \"\\t\", list1)\nprint(\"2\\t\", id(list2), \"\\t\", list2)\nprint(\"3\\t\", id(list3), \"\\t\", list3)\nprint(\"4\\t\", id(list4), \"\\t\", list4)\n\nlist2[2][2] = 9\n\nprint(\"List # \\tID\\tEntries\")\nprint(\"1\\t\", id(list1), \"\\t\", list1)\nprint(\"2\\t\", id(list2), \"\\t\", list2)\nprint(\"3\\t\", id(list3), \"\\t\", list3)\nprint(\"4\\t\", id(list4), \"\\t\", list4)\n\nlist1.append([0, 8, 15])\n\nprint(\"List # \\tID\\tEntries\")\nprint(\"1\\t\", id(list1), \"\\t\", list1)\nprint(\"2\\t\", id(list2), \"\\t\", list2)\nprint(\"3\\t\", id(list3), \"\\t\", list3)\nprint(\"4\\t\", id(list4), \"\\t\", list4)\n\nList #  ID  Entries\n1    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\n2    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\n3    140274647522880     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\n4    140274647529152     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\nList #  ID  Entries\n1    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], -2]\n2    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], -2]\n3    140274647522880     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\n4    140274647529152     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\nList #  ID  Entries\n1    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], -2]\n2    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], -2]\n3    140274647522880     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], 2]\n4    140274647529152     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\nList #  ID  Entries\n1    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], -2, [0, 8, 15]]\n2    140274647529088     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], -2, [0, 8, 15]]\n3    140274647522880     [[1, 2, 3], [4, 5, 6], ['a', 'b', 9], 2]\n4    140274647529152     [[1, 2, 3], [4, 5, 6], ['a', 'b', 'c'], 2]\n\n\n\n\n\nHint: The function id returns the identity of an object. It is guaranteed to be unique and constant for every object as long as it exists in memory.\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.5 (Monte Carlo simulations with random numbers, functions, conditionals and loops) A circle with radius \\(r\\) has an area of \\[A_{circle} = \\pi r^2\\] and the square that encases it \\[A_{square} = 4 r^2.\\]\nThe ratio between the area of the circle and the area of the square is \\[\n\\frac{A_{circle}}{A_{square}} = \\frac{\\pi r^2}{4 r^2} = \\frac{\\pi}{4}\n\\] and therefore we can define \\(\\pi\\) as \\[\n\\pi = 4\\frac{A_{circle}}{A_{square}}.\n\\] The same is true if we just take the first quadrant, so \\(\\frac14\\) of the square as well as the circle. This simplification will make the code more compact and faster.\nThe algorithm therefore becomes:\n\nFor a given number \\(N\\) of uniformly scattered points in the quadrant, determine if these points are in the circle (distance less than 1) or not. We call the number of points in the circle \\(M\\).\nEstimate \\(\\pi\\) by computing \\[\n\\pi \\approx 4  \\frac{M}{N}.\n\\tag{5.1}\\]\n\nTo write this in Python follow these steps:\n\nSearch for a module that allows to generate random values in python.\nDefine a function def in_unit_circle(N) that computes and returns \\(M\\) from the function input \\(N\\), which is a single positive integer. Hint: You can interpret two numbers between \\(0\\) and \\(1\\) as cartesian coordinates of a point and the squared sum of them will tell you the distance of this point from the origin.\nDefine a function def estimate_pi(N) that computes and returns the estimation of \\(\\pi\\) with Equation 5.1.\nSearch for a module that provides the exact value of \\(\\pi\\) and write a function that returns the absolute difference between the above function and \\(\\pi\\).\nTest your function with different values of \\(N\\). Hint: \\(N\\) needs to be quite large to have multiple digits of \\(\\pi\\) correct.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.6 (Type hinting) For the functions extimate_pi and in_unit_circle in Exercise 5.5 provide type hints to suggest only integers are allowed.\nHow can you give a further hint that the integer is always positive?\nIs the type enforced during runtime?\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.7 (Functions can be arguments) Provide a version of the function estimate_pi(N) from Exercise 5.5 that has a second argument that specifies the function to call e.g. in_unit_circle.\nProvide type hints for the new function.\nNote: We will come back to this example later where this will be of use.\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.8 (Recursion with Fibonacci) Create a function that computes the \\(n\\)th Fibonacci number with recursion, i.e. a function calling itself, here is the sequence:\n\\[\nx_0 = 0,\\quad x_1 = 1,\\quad x_n = x_{n-1} + x_{n-2},\\quad n\\geq 2.\n\\] The first couple of elements are: \\(0\\), \\(1\\), \\(1\\), \\(2\\), \\(3\\), \\(5\\), \\(8\\), \\(13\\), \\(21\\), \\(34\\), \\(55\\), \\(89\\), \\(144\\), \\(233\\), \\(377\\), \\(610\\), \\(\\ldots\\)\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.9 (Working with dictionaries) Compute the arabic number from a roman numeral, for positive integers from \\(1\\) to \\(3999\\). In order to do so use the dict as provided below, if you see fit you may change or add entries:\nroman = {I:1, IV: 4, V: 5, IX: 9, X: 10, XL: 40, \n         L: 50, XC: 90, C: 100, CD: 400, D: 500,\n         CM:900, M: 1000}\nExamples\n\n\n\nRoman\nArabic\n\n\n\n\nMMMDCCXXIV\n3724\n\n\nMXCIV\n1094\n\n\nVIII\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.10 (Set, List and Dictionary Comprehensions)  \n\nTransform a list of tuples into a list of numbers using (nested) list comprehension, i.e. the list flat should be created and filled in one call from the content of list_of_sets.\n\nlist_of_sets = [(1, 2, 3), (4, 5, 6), (7, 8)]\nflat = [1, 2, 3, 4, 5, 6, 7, 8]\n\nIs it still working if we include a set with a single entry?\n\nlist_of_sets = [(1, 2, 3), (4, 5, 6), (7, 8), (9)]\nflat = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nWhat happens when we indicate that it is supposed to be a set clearly?\n\nlist_of_sets = [(1, 2, 3), (4, 5, 6), (7, 8), (9,)]\nflat = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nWhat happens if we have lists instead of sets?\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8], [9]]\nflat = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nSplit a sentence give as string into a list of words (ignore ,, . for now).\n\nsentence = \"I spy with my little eye a tricky\" \\\n           \" list and dict comprehension coming up\"\nwords = [\"I\", \"spy\", \"with\", \"my\", \"little\", \"eye\",\n         \"a\", \"tricky\", \"list\", \"and\", \"dict\",\n         \"comprehension\", \"coming\", \"up\"]\n\nFrom this list of words, get a set (therefore unique) lengths of these words, i.e. spy -&gt; 3. Hint: you might want to look into the function map.\nCombine everything to get from a sentence a dictionary with length of word as key and a set of words as value. Test it with a couple of different sentences.\nCan you reduce this into dictionary comprehension , i.e. create the dictionary from scratch in one go.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.11 (Creating a module) Create your own module. The module should have the following functions:\n\nFor a given year, check if it is a leap year.\nFor a given date, return the day of the week, use the algorithm outlined here. Hint: Dictionaries can help you for some of the mappings.\nReturn the week number of the year of a certain date, you can use the algorithm outlined here.\nProvide doc strings for each of your methods and for the module itself.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5.12 (Using your own module) Use the module created in Exercise 5.11 and build a program on it.\n\nInclude the local module via pdm.\nUse the module to generate from a date the following output\n\nleap year -&gt; true/false\nday of the week\nweek of the year\n\nHow can you deal with european and american styled day-month order?\nUpdate your module by adding the above described function where the returned value should be a dictionary with keys: leapyear, weekday,week.\nCan you use the new function in the module right away or do you need to reinstall it somehow?\n\n\n\n\n\n\n\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based Introduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on Introduction. München: No Starch Press.",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Self Study Session I</span>"
    ]
  },
  {
    "objectID": "sss/sss2.html",
    "href": "sss/sss2.html",
    "title": "6  Self Study Session II",
    "section": "",
    "text": "6.1 Topics\nFor each topic we list various materials and what is the basic idea behind it.",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Self Study Session II</span>"
    ]
  },
  {
    "objectID": "sss/sss2.html#topics",
    "href": "sss/sss2.html#topics",
    "title": "6  Self Study Session II",
    "section": "",
    "text": "6.1.1 Object oriented programming/design, scientific computing, decorators\nOnce you are familiar with how Python handles these topics you will be able to answer questions like:\n\nWhat is an object?\nWhat is the scope of attributes/methods?\nHow can I inherit properties from an object?\nHow can I implement an interface in Python?\nHow is slicing working in numpy and pandas?\nWhat is vectorization and why should I use it?\netc.\n\nThese topics are covered in the following resources (given in no particular order):\n\nMcKinney (2022) Online, Section 4 (numpy) and 5 (pandas)\nMatthes (2023) Section 9\nVasiliev (2022) Chapter 3, 5, 6, 7\nMCI Lecture notes of Julian Huber and Matthias Panny Online, Section 1 (German)\nClasses t docs.python.org\nType hints cheat sheet form the docs of mypy Online\nNumPy docs\n\nNumPy quickstart\nNumPy the absolute basics for beginners\nNumPy for MATLAB users\n\npandas docs\n\n10 minutes to pandas",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Self Study Session II</span>"
    ]
  },
  {
    "objectID": "sss/sss2.html#exercises",
    "href": "sss/sss2.html#exercises",
    "title": "6  Self Study Session II",
    "section": "6.2 Exercises",
    "text": "6.2 Exercises\n\n\n\n\n\n\nImportant\n\n\n\nIf, and only if, you are taking the class at MCI and are not reading these notes on your own, you are expected to hand in the exercises below as a git repository, you can use the old one if you like.\n\n\n\n\n\n\n\n\n\nExercise 6.1 (UML fact checker)  \n\n\n\n\n\nclassDiagram\nStudent \"*\" --* University : Composition\n    class University{\n        - name: string\n        - address: Address \n    }\n    class Student{\n        - name: string \n        - fee: float \n    }\n\n\n\n\n\n\nWhich of the following can be answered with Yes and which with No:\n\nNo two universities can have the same name?\nA university and a student can not have the same name?\nNo student studies at more than one university?\nEach student studies at at least one university?\nTwo students with the same name can not study at the same university?\nTwo students with the same name can not study at different universities?\nTwo universities can have the same address?\n\nIs there a way to specify a attribute in UML as unique?\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.2 (From text to UML) Convert the following description into an appropriate UML diagram, with multiplicities and associations.\n\nEvery person has a name, a phone number and an e-mail address.\nEvery address is only occupied by one person, some addresses might have no inhabitant.\nEach address is associated with a street, a city, an area code, and a country.\nAddresses can be verified as a home address for a person and printed for post service.\nThere are two types of persons:\n\nStudents that can enlist for a class\nProfessors that can receive a salary\n\nA student has a study ID and an average grade.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.3 (From UML to Python) Convert the UML diagram from Exercise 6.2 into Python code and test your classes.\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.4 (Interface) Consider the following UML diagram and implement it in Python with interfaces. Set lives for a Cat to the appropriate 7, feed some cat food generated with random integers uniformly distributed between \\(-10\\) and \\(10\\) and look how much food it can eat until it dies. Plot this for different initial values of currentFood.\n\n\n\n\n\nclassDiagram\n    Cat --|&gt; Animal\n    Cat ..|&gt; FourLegged\n    Cat ..|&gt; OxygenBreather\n    class FourLegged{\n        &lt;&lt;interface&gt;&gt;\n        + run(destination)\n    }\n    class OxygenBreather{\n        &lt;&lt;interface&gt;&gt;\n        + breath()\n    }\n    class Animal{\n        - lives: int\n        - currentFood: int\n        + eat(food: int)\n    }\n    class Cat{\n        + getLivesLeft()\n        + getCurrentAmountofFood()\n        - decreaseLives()\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.5 (Indexing in numpy or slicing) There exists a multitude of different ways to index numpy arrays. Create an appropriate (or multiple appropriate arrays) and provide the answer to the following questions with slicing:\nFor a vector:\n\nreturn the last 5 elements\nreturn every second element\nreverse the vector\nreturn element 1, 4 and 11\nreturn all elements bigger than the mean\n\nFor a matrix:\n\nflip the second and third row\nadd the second column to the entire matrix\nextract the sub matrix that only consists of odd rows and even columns\nreturn the rows 1, 4, and 11\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.6 (Reshape numpy) We can reshape, i.e. change row and column dimensions, of arrays. The important part here is the way the array is viewed by its dimensions. Hint: use np.arange(x) for the following exercise so you know the positions of the numbers.\n\nReshape a 8 element vector into a \\(4 \\times 2\\) matrix.\nReshape a 8 element vector into a \\(4 \\times 2\\) matrix and directly into a \\(2 \\times 4\\) without storing the intermediate result (in one line).\nReshape a 16 element vector into a \\(2 \\times x\\) vector where numpy infers the second dimension from the data.\nUse the shape property of a matrix to reshape a vector.\nDoes reshape create a copy of the original data?\nHow do you reverse back to a flat vector?\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.7 (Monte Carlo simulations in numpy) Recall Exercise 5.5 and implement a version of in_unit_circle that uses numpy arrays, you should take the code from Exercise 5.7 as basis and add a new function in_unit_circle_np.\nTo write this in Python follow these steps:\n\nWith numpy.random.uniform() create a \\(2\\times N\\) matrix with random numbers.\nUse element wise computation to get \\(M\\). Hint: True is interpreted as 1 and False as 0 when you try to add boolean values.\n\nOnce you have the second implementation test it and compare it with the other version.\n\nIs the accuracy the same?\nHave a look at timeit and see which of your two code versions is faster for which N\nPlot your results, i.e. for different values of \\(N\\) the different execution times for the two versions, maybe use a logarithmic axis.\nAre there other plots that might give you an insight for this example.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.8 (Predator Prey simulation) The Lotka-Volterra Equations \\[\n\\begin{array}{c}\n\\dot{x} = \\alpha x - \\beta x y\\\\\n\\dot{y} = \\delta x y - \\gamma y\n\\end{array}\n\\tag{6.1}\\] can be used to describe a predator-prey system. In this case we can interpret the variables as:\n\n\\(x\\) prey population\n\\(y\\) predator population\n\\(\\dot{x}\\) growth rate of prey population\n\\(\\dot{y}\\) growth rate of predator population\n\\(\\alpha\\) natural growth rate of prey\n\\(\\beta\\) death rate of prey due to predators\n\\(\\delta\\) natural death rate of predators\n\\(\\gamma\\) growth rate of predators per consumed prey\n\nWe assume that the prey has unlimited food and the change rate is proportional to the size. The predators only eat the specific prey and they are always hungry.\nCreate first an UML diagram and later Python code that follows these guidelines:\n\nCreate a predator class with the parameters \\(x, \\alpha, \\beta\\) where only the first is public\nCreate a prey class with the parameters \\(y, \\delta, \\gamma\\) where only the first is public\nCreate a class to propagate your model:\n\nthe constructor takes a prey and a predator object\ncreate a private method to compute the two derivatives\ncreate a second method to propagate a single time step \\(\\Delta t\\), as time integrator we suggest to implement a Forward Euler but you can also use something from scipy.integrate if you prefer.\n\nuse the classes to store the current population in the appropriate variable.\n\ncreate a public method where you provide the final time \\(t_1\\) and \\(\\Delta t\\) and returns \\(x, y\\) in each time step (you need to compute the amount of steps).\n\nPlot the results\nTest your method with the following parameters:\n\n\\(\\alpha = 1\\)\n\\(\\beta = 0.1\\)\n\\(\\gamma = 0.5\\)\n\\(\\delta = 0.02\\)\n\\(x = 100\\) (initial population)\n\\(y = 20\\) (initial population)\n\nCreate getter/setter methods for the parameters that are private where you check that the signs and types are appropriate if they get set.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.9 (Use pandas to redo Section 2 of MECH-M-DUAL-I-DBM) In MECH-M-DUAL-I-DBM Section 2 we worked with the mieten3.asc dataset and did some computations on it.\nUse pandas to load the dataset and compute the same properties and create similar plots, where it is appropriate.\nHint: Data loading and some examples are done in Chapter 9.\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.10 (Advanced pandas)  \n\nThe method apply() can apply a function along an axis of a DataFrame and can be used in various ways.\n\nUse .apply to create categories, i.e. from\ndata = pd.DataFrame({\n    'Age': [11, 16, 30, 51]\n})\ncreate\n\n\n\n\n\n\n\n\n\nAge\nCategory\n\n\n\n\n0\n11\nChild\n\n\n1\n16\nTeenager\n\n\n2\n30\nAdult\n\n\n3\n51\nAdult\n\n\n\n\n\n\n\n\nRead in the death_valley_2014.csv from the GitHub repo corresponding to Matthes (2023).\n\n\nTransform the PST column into a DataTime object (various possibilities)\nCreate a new DataFrame that consists of the temperature columns where they are converted from °F to °C\nMerge the two DataFrames\nRepeat the same operation directly with .apply\nLet us assume, for some reason, the entries from January where off for \\(1\\%\\). Use the .update function to change them - i.e. correct them by the error.\nUse the .pipe function to apply a series of functions to your data.\n\nCompute the Mean Humidity per month and scale this data with this value\nUpdate the WindDirDegree such that the values in in \\([-180, 180]\\) instead of \\([0, 360)\\)\nUpdate the PST column to only contain month and day\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 6.11 (Decorators) In Python we can use decorators to modify the functionality of a function by wrapping it in another function, you can find an introductions in the following links\n\npythontips\nprogramiz\nPython 101\n\nWrite a decorator @positive that checks arguments to be positive and raise an Exception (with raise Exception(\"Sorry, not positive\")). Test this implementation with Exercise 6.7. We will look at exception handling later.\nCan you modify the decorator such that you can give an optional argument specifying the location to check for positivity?\n@positiv(1)\ndef testfun(a, b, c)\n\n# error for\ntestfun(-1, -1, -1)\n# but not for\ntestfun(-1, 1, -1)\n\n\n\n\n\n\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based Introduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on Introduction. München: No Starch Press.",
    "crumbs": [
      "Self Study Sessions",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Self Study Session II</span>"
    ]
  },
  {
    "objectID": "oop/index.html",
    "href": "oop/index.html",
    "title": "7  Object Oriented Programming",
    "section": "",
    "text": "7.1 Object Oriented Programming in Python\nThe best way to explain OOP is by defining a class and objects. So let us start creating a class.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object Oriented Programming</span>"
    ]
  },
  {
    "objectID": "oop/index.html#sec-oop-python",
    "href": "oop/index.html#sec-oop-python",
    "title": "7  Object Oriented Programming",
    "section": "",
    "text": "Tip\n\n\n\nRight from the start we will include doc strings as descriptions and we use type hints for the functions to give an orientation.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object Oriented Programming</span>"
    ]
  },
  {
    "objectID": "oop/index.html#definition-of-attributes",
    "href": "oop/index.html#definition-of-attributes",
    "title": "7  Object Oriented Programming",
    "section": "7.2 Definition of attributes",
    "text": "7.2 Definition of attributes\n\n1class Robot:\n    \"\"\" Class representing a robot. \"\"\"\n\n    def __init__(self, \n                 name: str,\n                 ip: list[int],\n                 port: int,\n2                 speed: float) -&gt; None:\n        \"\"\" Initialize the name and the ip address of the robot\"\"\"\n3        self.name = name\n        self.ip = ip\n4        self.__port = port\n        self.speed = speed\n\n\n1\n\nThe common convention is that classes use a capital letter.\n\n2\n\nThe constructor of the class is defined with __init__ and self indicated that the method belongs to an object.\n\n3\n\nWe use attributes to store certain aspects of a object where we use self.name to identify the scope.\n\n4\n\nWe can hide attributes such that they can not be accessed from outside.\n\n\n\n\nNow that we have a simple class we can define our first objects.\n\nr2d2 = Robot(\"R2D2\", [0, 0, 0, 1], 443, 32)\nnumber5 = Robot(\"Number 5\", [0, 0, 0, 3], 80, 20)\n\nprint(f\"I am called {r2d2.name}, I can be reached under \"\n      f\"{'.'.join(str(s) for s in r2d2.ip)}\"\n      f\" and my top speed is {r2d2.speed}!\")\nprint(f\"I am called {number5.name}, I can be reached under \"\n      f\"{'.'.join(str(s) for s in number5.ip)}\"\n      f\" and my top speed is {number5.speed}!\")\n\nI am called R2D2, I can be reached under 0.0.0.1 and my top speed is 32!\nI am called Number 5, I can be reached under 0.0.0.3 and my top speed is 20!\n\n\nHidden properties can not be access from outside:\n\nprint(f\"{r2d2.__port=}\")\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(f\"{r2d2.__port=}\")\n\nAttributeError: 'Robot' object has no attribute '__port'\n\n\n\nThe little introduction each of the robots provides us with should be part of the class, not a property but a method.\n\n7.2.1 Definition of methods\n\nclass Robot:\n    \"\"\" Class representing a robot. \"\"\"\n\n    def __init__(self, \n                 name: str,\n                 ip: list[int],\n                 port: int,\n                 speed: float) -&gt; None:\n        \"\"\" Initialize the name and the ip address of the robot\"\"\"\n        self.name = name        \n        self.ip = ip            \n        self.__port = port      \n        self.speed = speed      \n                                \n\n    def introduction(self) -&gt; str:\n        \"\"\" Short introduction of the robot\"\"\"\n        return (f\"I am called {self.name}, I can be reached under \"\n4                f\"{self.__ip2str()} and my top speed is {self.speed}!\")\n    \n\n    def __ip2str(self) -&gt; str:\n        \"\"\" Transform the integer set with the port into a string\"\"\"\n1        return f\"{'.'.join(str(s) for s in self.ip)}:{self.__port}\"\n\n2r2d2 = Robot(\"R2D2\", [0, 0, 0, 1], 443, 32)\nnumber5 = Robot(\"Number 5\", [0, 0, 0, 3], 80, 20)\n\n3print(r2d2.introduction())\nprint(number5.introduction())\n\n\n1\n\nWe can use the hidden attribute.\n\n2\n\nWe need to redefine the objects for the new class.\n\n3\n\nCalling a method is like calling a function but for the class object.\n\n4\n\nWe can call other methods inside our object and they can be hidden.\n\n\n\n\nI am called R2D2, I can be reached under 0.0.0.1:443 and my top speed is 32!\nI am called Number 5, I can be reached under 0.0.0.3:80 and my top speed is 20!\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo summarize our first findings.\n\nClass:\n\nOur class Robot is an abstract description of all the Robots we can think about.\nWe can have properties that are described by attributes and actions described by methods.\nWe can define hidden attributes and methods if they should only be access from within the object.\n\nObject:\n\nA specific object like r2d2 is an instance of the class Robot and keeps track of its own set of attributes.\nThe methods are shared with all and we can specify and use our attributes.\n\n\n\n\nWe can see a lot of similarities between classes and modules, how we call specific functions attributed to modules and how they are organised within Python.\n\n\n7.2.2 Overwriting methods and integration with operators\nA lot of the base types we have been using are actually classes and we where dealing with the objects. It stands to reason, that we should be able to treat them similar.\n\nprint(f\"{r2d2==number5=}\")\nprint(f\"{r2d2&lt;number5=}\")\nprint(r2d2)\nprint(r2d2 + number5)\n\nr2d2==number5=False\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 2\n      1 print(f\"{r2d2==number5=}\")\n----&gt; 2 print(f\"{r2d2&lt;number5=}\")\n      3 print(r2d2)\n      4 print(r2d2 + number5)\n\nTypeError: '&lt;' not supported between instances of 'Robot' and 'Robot'\n\n\n\nIn order to allow a seamless integration of our object into these types we should implement a couple of the basic customizations\n\nclass Robot:\n    \"\"\" Class representing a robot. \"\"\"\n\n    def __init__(self, \n                 name: str,\n                 ip: list[int],\n                 port: int,\n                 speed: float) -&gt; None:\n        \"\"\" Initialize the name and the ip address of the robot\"\"\"\n        self.name = name        \n        self.ip = ip            \n        self.__port = port      \n        self.speed = speed      \n\n    def introduction(self) -&gt; str:\n        \"\"\" Short introduction of the robot\"\"\"\n        return (f\"I am called {self.name}, I can be reached under \"\n                f\"{self.__ip2str()} and my top speed is {self.speed}!\")\n    \n    def __ip2str(self) -&gt; str:\n        \"\"\" Transform the integer set with the port into a string\"\"\"\n        return f\"{'.'.join(str(s) for s in self.ip)}:{self.__port}\"     \n\n    def __ep__(self, other):\n        \"\"\" Compare two objects of type Robot\"\"\"\n        return self.speed == other.speed\n\n    def __lt__(self, other):\n        \"\"\" Less than for Robot\"\"\"\n        return self.speed &lt; other.speed\n\n    def __str__(self):\n        \"\"\" The official string representation \"\"\"\n        return self.introduction()\n    \n    def __add__(self, other):\n        return Robot(self.name + \"♥\" + other.name, \n                     list(map(lambda x, y: x + y, self.ip, other.ip)),\n                     self.__port,\n                     min(self.speed, other.speed))\n\n\nr2d2 = Robot(\"R2D2\", [0, 0, 0, 1], 443, 32)                         \nr2d3 = Robot(\"R2D3\", [0, 0, 0, 2], 443, 32)                         \nnumber5 = Robot(\"Number 5\", [0, 0, 0, 3], 80, 20)\n\nprint(f\"{r2d2==number5=}\")\nprint(f\"{r2d2==r2d3=}\")\nprint(f\"{number5&lt;r2d2=}\")\nprint(f\"{r2d2&lt;number5=}\")\nprint(r2d2)\nprint(r2d2 + number5)\n\nr2d2==number5=False\nr2d2==r2d3=False\nnumber5&lt;r2d2=True\nr2d2&lt;number5=False\nI am called R2D2, I can be reached under 0.0.0.1:443 and my top speed is 32!\nI am called R2D2♥Number 5, I can be reached under 0.0.0.4:443 and my top speed is 20!\n\n\n\n\n7.2.3 Inheritance\nQuite often we want to define a class not from scratch but start form another class. This concept is called inheritance or we can formulate it as one class is the child of another class.\n\n1class Cat:\n\n    def __init__(self, name: str, habitat: list[str]) -&gt; None:\n        self.name = name\n        self.habitat = habitat\n        print(f\"I live in {', '.join(habitat)}\")\n\n    def __str__(self) -&gt; str:\n        return f\"My name is {self.name}, I am a Cat\"\n\n2class Tiger(Cat):\n\n3    def __init__(self, name: str, habitat: list[str]=[\"Asia\"]) -&gt; None:\n        super().__init__(name, habitat)\n\n    def __str__(self) -&gt; str:                               \n4        return f\"{super().__str__()} -&gt; Tiger\"\n\nclass Lion(Cat):\n    \n    def __init__(self, name: str, habitat: list[str]=[\"Africa\", \"India\"]) -&gt; None:\n        super().__init__(name, habitat)\n\n    def __str__(self) -&gt; str:\n        return f\"{super().__str__()} -&gt; Lion\"\n\n5class Liger(Lion, Tiger):\n\n    def __str__(self) -&gt; str:\n        return (f\"{super().__str__()} -&gt; Liger\"             \n6               f\" (Father {self.__class__.__bases__[0].__name__},\"\n               f\" Mother {self.__class__.__bases__[1].__name__})\")\n\n7class Tigon(Tiger, Lion):\n\n    def __str__(self) -&gt; str:\n        return (f\"{super().__str__()} -&gt; Tigon\"\n               f\" (Father {self.__class__.__bases__[0].__name__},\"\n               f\" Mother {self.__class__.__bases__[1].__name__})\")\n\nsven = Liger(\"Sven\")\nolson = Tigon(\"Olson\")\nprint(sven)\nprint(olson)\nLiger.__mro__\n\n\n1\n\nWe can define a base class with a constructor and a way of producing a string.\n\n2\n\nWe inherit from a class simply by putting the class name into the definition as argument.\n\n3\n\nIf we inherit from the base we do not need to overwrite everything, only the methods we want to and we can be more specific like defining defaults.\n\n4\n\nWe can access the parent with super(), similar to self.\n\n5\n\nWe can inherit from multiple classes.\n\n6\n\nThere are multiple ways of accessing properties of parent classes.\n\n7\n\nThe order of the classes for inheritance matters.\n\n\n\n\nI live in Africa, India\nI live in Asia\nMy name is Sven, I am a Cat -&gt; Tiger -&gt; Lion -&gt; Liger (Father Lion, Mother Tiger)\nMy name is Olson, I am a Cat -&gt; Lion -&gt; Tiger -&gt; Tigon (Father Tiger, Mother Lion)\n\n\n(__main__.Liger, __main__.Lion, __main__.Tiger, __main__.Cat, object)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object Oriented Programming</span>"
    ]
  },
  {
    "objectID": "oop/index.html#sec-uml",
    "href": "oop/index.html#sec-uml",
    "title": "7  Object Oriented Programming",
    "section": "7.3 Unified Programming Language",
    "text": "7.3 Unified Programming Language\nNow that we know about the basics of OOP and how we can deal with it in Python we can take a step back and look at an abstract interface that helps us work in the framework of OOP. The Unified Modelling Language (UML) can be used to define how classes look like and how they interact. It provides a language independent way of designing a OO program.\nSo let us extend our class Cat first with an UML diagram before we extend the code. In UML we see how classes interact but in general we will not see any specific object.\n\n\n\nUML Class diagram\n\n\nFurthermore, we can model different relationships with different arrow styles, how does this look like for our big cats:\n\n\n\n\n\nclassDiagram\n    note \"About big cats\"\n    Cat &lt;|-- Lion\n    Cat &lt;|-- Tiger\n    note for Tigon \"Hybrid between male lion\\nand female tiger\"\n    Tiger &lt;|-- Liger\n    Lion &lt;|-- Liger\n    Lion &lt;|-- Tigon\n    Tiger &lt;|-- Tigon\n    Cat : +String name\n    Cat : +List~String~ habitat\n    Cat : +String gender\n    Cat : +int age\n    Cat : -String mood\n    Cat : -Cat father\n    Cat : -Cat mother\n    Cat : +breath()\n    Cat : +mate(other Cat)\n    Cat : +eat(food)\n    Cat : +run(destination)\n    Cat : +sleep(hours float)\n    Cat : +meow()\n    class Liger{\n        -Lion father\n        -Tiger mother\n    }\n    class Tigon{\n        -Tiger father\n        -Lion mother\n    }\n    class Lion{\n        -Lion father\n        -Lion mother\n    }\n    class Tiger{\n        -Tiger father\n        -Tiger mother\n    }\n\n\n Relationship between different classes \n\n\n\n\n7.3.1 One way relationships\nBesides inheritance we can have other relationships between classes.\n\n\n\n\n\nclassDiagram\nTiger --|&gt; Cat : Inheritance\nMammal ..|&gt; Animal : Generalization\nMath -- Informatics : Association/Link\nProfessor --&gt; Student : One way Association\n\n\n Relationships in terms of arrows \n\n\n\n\nInheritance - Tiger inherits from Cat - is a relation\nGeneralization - Mammal implements/is a specific variant of Animal\nAssociation/Link - Math and Informatics call each other\nOne way Association - Professor can call Student’s properties and methods but not visa versa\n\nOf course we can also reflect other more complex relationships. An easy to understand example is the inclusion of a professor into a higher educational institution.\n\n\n\n\n\nclassDiagram\nDepartment --* University : Composition\nProfessor --o Department : Aggregation\nProfessor ..&gt; Salary : Dependency\nProfessor ..|&gt; Academic : Realization\n\n\n Relationships in terms of arrows part 2 \n\n\n\n\nComposition - University has an instance of Department, Department cannot exist without University\nAggregation - F has a instance of E. E can exist if F is not present\nDependency - Professor requires, needs or depends on Salary\nRealization - Professor realizes the behaviour of Academic\n\n\n\n7.3.2 Multiplicity\nQuite often it is necessary to describe the relation in terms of multiplicity, i.e. specifying how often a class is used in the relationship.\n\nDifferent multiplicities and their meaning\n\n\nmultiplicity\nmeaning\n\n\n\n\n1\nexactly one\n\n\nm\nexactly m\n\n\n+\nmany, none or multiple, optional\n\n\n0..1\nnone to one, optional\n\n\nm..n\nm to n, including the boundary\n\n\n1..*\none or more\n\n\nm..*\nm or more than m\n\n\n\nLet us try to illustrate this with the example of a car on a parking lot:\n\n\n\n\n\nclassDiagram\nCar \"0..5\" -- \"1\" Person : uses\nParkingLot \"0..1\" o-- \"0..*\" Car : occupied\nCar \"1\" *.. \"4\" Wheel : has\n\n\n Cardinality with cars on parking lots \n\n\n\nYou read this away from the class:\n\nexactly four wheels belong to one car\na parking lot contains zero to infinity cars (not at the same time)\none car is standing on at most one parking lot\na person can only sit in one car\na car does not need to be occupied by a person but no more than 5",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object Oriented Programming</span>"
    ]
  },
  {
    "objectID": "oop/index.html#principles-of-oop",
    "href": "oop/index.html#principles-of-oop",
    "title": "7  Object Oriented Programming",
    "section": "7.4 Principles of OOP",
    "text": "7.4 Principles of OOP\nThere are multiple principals of OOD and as the list on the german wikipedia is organised nicer we refer this version here.\nWe will pick a couple to give a first introduction.\n\n7.4.1 Principle of abstraction\nAn abstraction only needs to be as accurate to the real world as the application requires. For example if you model an aeroplane for the dynamic simulation of the behaviour during flight you need a different model than for a ticket booking system.\n\n\n\n\n\nclassDiagram\n    class Aeroplane{\n        - speed\n        - altitude\n        - rollAngle\n        - pitchAngle\n        - yawAngle\n        + fly()\n    }\n\n\n Aeroplane for a simulator \n\n\n\n\n\n\n\n\nclassDiagram\n    class Aeroplane{\n        - seats\n        + reserveSeat(n)\n    }\n\n\n Aeroplane for a booking system \n\n\n\nThis is often referred to as the single responsibility principle.\n\n\n7.4.2 Principle of encapsulation\nWe also want to make sure to encapsulate our objects as best as possible. So only allow access to the methods that are really needed from outside and not to everything, especially to properties, e.g. the aeroplane pitch angle should not be controlled by the airport.\nIn a similar way we can define interfaces. They are classes with abstract methods that can be implemented by another class.\nIn Python this is done with the Abstract Base Classes or ABC.\n\n\n\n\n\nclassDiagram\n    Airport --&gt; FlyingTransport : Dependency\n    Helicopter ..|&gt; FlyingTransport\n    Aeroplane ..|&gt; FlyingTransport\n    Domesticated Gryphon ..|&gt; FlyingTransport\n    class FlyingTransport{\n        &lt;&lt;interface&gt;&gt;\n        + fly(origin, destination, passengers)\n    }\n    note for FlyingTransport \"An interface in UML has only methods\"\n    class Helicopter{\n        - ...\n        + fly(origin, destination, passengers)\n    }\n    class Aeroplane{\n        - ...\n        + fly(origin, destination, passengers)\n    }\n    class Domesticated Gryphon{\n        - ...\n        + fly(origin, destination, passengers)\n    }\n    class Airport{\n        - ...\n        + accept(FlyingTransport vehicle)\n    }\n\n\n Airport and its flying inhabitants \n\n\n\n\nfrom abc import ABC, abstractmethod\n\n# Abstract Class\nclass FlyingTransport(ABC):\n    @abstractmethod\n    def fly(self, origin, destination, passengers):\n        pass # Abstract Method has no implementation!\n\n# Non-Abstract Class\nclass Helicopter(FlyingTransport):\n    def fly(self, origin, destination, passengers):\n        print(\"Helicopter flying\")\n\n# Non-Abstract Class\nclass Aeroplane(FlyingTransport):\n    def fly(self, origin, destination, passengers):\n        print(\"Aeroplane flying\")\n\nhelicopter1 = Helicopter()\naeroplane1 = Aeroplane()\n\nhelicopter1.fly(\"INN\", \"QOJ\", 2) #&gt; Helicopter flying\naeroplane1.fly(\"INN\", \"BER\", 200) #&gt; Aeroplane flying\n\nHelicopter flying\nAeroplane flying\n\n\n\n\n7.4.3 Principle of inheritance\nYou can base a class on another, where a sub class will have (at least) the same interface as the super class. This allows you to create less copy-past code.\nIt is necessary that we always implement all the abstract methods we might inherit from interfaces.\n\n\n7.4.4 Principle of polymorphism\nLiskov substitution principle says that you can exchange an object within a program with a sub class of that object without breaking the program. Meaning, a sub class always needs to behave as the super class if you look at it like it would be a super class.\nYou can state this in nice mathematical formulas \\[\nS \\leq T \\to (\\forall x: T.\\phi(x) \\to \\forall y: S.\\phi(y)),\n\\] where \\(T.\\phi(x)\\) is a property provable about object \\(x\\) of type T.\nWith regards to Python you can easily overwrite methods with the same name in different classes.\nWith this we close our quick excursion into Object Oriented Programming and move to Scientific Computing.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Object Oriented Programming</span>"
    ]
  },
  {
    "objectID": "sc/numpy.html",
    "href": "sc/numpy.html",
    "title": "8  NumPy",
    "section": "",
    "text": "8.1 Motivation\nSpeed is often the main motivation to work in numpy.\nLet us look at the simple example of the scalar product to see why.\nimport random\nimport timeit\nimport numpy as np\n\nrandom.seed(42)\n\nmin_value = 1 \nmax_value = 100\n\n# Generate the two lists of 10_000_000 random numbers each\na = [random.randint(min_value, max_value) for _ in range(1_000_000)]\nb = [random.randint(min_value, max_value) for _ in range(1_000_000)]\n\ndef dot(a, b):\n    r = 0\n    for first, second in zip(a, b):\n        r += first * second\n    return r\n\nt1 = timeit.timeit(lambda: dot(a, b), number=1000)\n\nnp_a = np.array(a, dtype=np.int64)\nnp_b = np.array(b, dtype=np.int64)\n\nt2 = timeit.timeit(lambda: np.vdot(np_a, np_b), number=1000)\n\nprint(f\"loop result {dot(a,b)}, time {t1=}\")\nprint(f\"numpy result {np.vdot(np_a, np_b)}, time {t2=}\")\nprint(f\"Speedup {t1/t2}\")\n\nloop result 2550205506, time t1=55.481295003000014\nnumpy result 2550205506, time t2=0.6063190049999889\nSpeedup 91.50512279093252\nFor the above example we see a speed up of 92.0. With numpy we will often see a speed up of 10 to 100 or likely even more.",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "sc/numpy.html#motivation",
    "href": "sc/numpy.html#motivation",
    "title": "8  NumPy",
    "section": "",
    "text": "Note\n\n\n\nLately Python has invested in getting there loops faster, you will see a much higher speed up for this example with old versions of Python.",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "sc/numpy.html#references",
    "href": "sc/numpy.html#references",
    "title": "8  NumPy",
    "section": "8.2 References",
    "text": "8.2 References\nAs we cover a lot of the basics in action in the sister class Basics of Data Science this introduction ends here and we refer to others for a longer read like\n\nMcKinney (2022) (direct link to the NumPy-Basics)\nMCI Lecture notes of Julian Huber and Matthias Panny Online\nNumPy docs\n\nNumPy quickstart\nNumPy the absolute basics for beginners\nNumPy for MATLAB users\n\n\n\n\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "sc/pandas.html",
    "href": "sc/pandas.html",
    "title": "9  Pandas",
    "section": "",
    "text": "9.1 Tidy Data\nA lot of algorithms and functions require the same tidy data structure as input so there should be a common definition.\nIt is common to start a section about tidy data with two quotes:\nThe basic rules are:\nAs usual you can stretch these rules a bit to save storage to\nThe advantage her is that you have only one line per timestamp but you loose flexibility. Most of the time you will have multiple processes providing different streams and you have a raw vault for these streams and you process them into a format you rely on to work with further.\nNow that we know how we can structure data we can go on and start with pandas.",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "sc/pandas.html#tidy-data",
    "href": "sc/pandas.html#tidy-data",
    "title": "9  Pandas",
    "section": "",
    "text": "Happy families are all alike; every unhappy family is unhappy in its own way - Leo Tolstoy\n\n\nLike families, tidy datasets are all alike but every messy dataset is messy in its own way. Tidy datasets provide a standardized way to link the structure of a dataset (its physical layout) with its semantics (its meaning). - Hadley Wickham\n\n\n\n\n\n\n\nNote\n\n\n\nIf you follow the tidy data principle you basically have a Codd’s 3 normal form database.\n\n\n\n\nevery variable has its own column\nevery observation/stamp/… has its own row\nevery single values has its own cell\n\n\nExample for tidy data\n\n\nRobot_ID\nTimestamp\nSensor_Type\nSensor_Value\nUnit\n\n\n\n\n\n1\n2023-09-27 08:00:00\nTemperature\n25.3\n°C\n\n\n\n1\n2023-09-27 08:00:15\nTemperature\n25.5\n°C\n\n\n\n1\n2023-09-27 08:00:30\nHumidity\n45.2\n%\n\n\n\n2\n2023-09-27 08:00:00\nTemperature\n24.8\n°C\n\n\n\n2\n2023-09-27 08:00:15\nTemperature\n24.9\n°C\n\n\n\n2\n2023-09-27 08:00:30\nHumidity\n46.0\n%\n\n\n\n3\n2023-09-27 08:00:00\nTemperature\n25.0\n°C\n\n\n\n3\n2023-09-27 08:00:15\nTemperature\n25.1\n°C\n\n\n\n3\n2023-09-27 08:00:30\nHumidity\n45.8\n%\n\n\n\n\n\n\nExample for almost tidy data\n\n\nRobot_ID\nTimestamp\nTemperature_C\nHumidity_%\n\n\n\n\n1\n2023-09-27 08:00:00\n25.3\n45.2\n\n\n1\n2023-09-27 08:00:15\n25.5\n45.1\n\n\n2\n2023-09-27 08:00:00\n24.8\n46.0\n\n\n2\n2023-09-27 08:00:15\n24.9\n46.2\n\n\n3\n2023-09-27 08:00:00\n25.0\n45.8\n\n\n3\n2023-09-27 08:00:15\n25.1\n45.9",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "sc/pandas.html#basic-structure",
    "href": "sc/pandas.html#basic-structure",
    "title": "9  Pandas",
    "section": "9.2 Basic structure",
    "text": "9.2 Basic structure\n\n\n\n\n\n\nTip\n\n\n\nSimilar to the convention to call numpy by the short handle np, pandas is usually referenced by pd\nSo we will use\n\nimport numpy as np\nimport pandas as pd\n\n\n\nThe two main data structures in pandas are\n\npd.Series for one-dimensional labelled array holding dta of any type,\npd.DataFrame for a two-dimensional data structure that holds data like a two-dimensional array of a table with rows and columns.\n\n\n1s = pd.Series([4, 7, np.nan, -5, 3])\n2print(s)\n3print(s.array)\n4print(s.index)\n5s2 = pd.Series([4, 7, np.nan, -5, 3], index=[\"c\", \"a\", \"b\", \"d\", \"e\"])\n6print(f\"{s[0] == s2[\"c\"]=}\")\nprint(f\"{s2[[\"c\", \"b\"]]=}\")\n7es = np.exp(s)\nprint(f\"{es}\")\n\n\n1\n\ndata creation is similar to numpys ndarray\n\n2\n\nthe output is different as it has an index and an array\n\n3\n\nwe can also access them independently\n\n4\n\nthe index is by default an integer starting from 0\n\n5\n\nthe index can be specified\n\n6\n\nyou can access via a list of indices or a single index\n\n7\n\nyou can compute on the series\n\n\n\n\n0    4.0\n1    7.0\n2    NaN\n3   -5.0\n4    3.0\ndtype: float64\n&lt;NumpyExtensionArray&gt;\n[ np.float64(4.0),  np.float64(7.0),  np.float64(nan), np.float64(-5.0),\n  np.float64(3.0)]\nLength: 5, dtype: float64\nRangeIndex(start=0, stop=5, step=1)\ns[0] == s2[\"c\"]=np.True_\ns2[[\"c\", \"b\"]]=c    4.0\nb    NaN\ndtype: float64\n0      54.598150\n1    1096.633158\n2            NaN\n3       0.006738\n4      20.085537\ndtype: float64\n\n\nWe can take this to a more extensive example and start of with the second data type the DataFrame.\n\n\n\n\n\n\nNote\n\n\n\npandas provides a nice interface that also shows data as tables and it interacts perfectly with iPythonNotebooks or Quarto.\nSo the tables you see are generated directly from Python, in order to have a better viewing experience we therefore split up the code more extensively as usual.\n\n\n\narea_dict = {\"Vienna\": 415,   \"Lower Austria\": 19178,\n                 \"Styria\": 16401, \"Upper Austria\": 11982,\n                 \"Tyrol\": 12648,  \"Carinthia\": 9536,\n                 \"Salzburg\": 7154,\"Vorarlberg\": 2601,\n                 \"Burgenland\": 3965}\npop_dict = {\"Vienna\": 1794770, \"Lower Austria\": 1636287,\n                \"Styria\": 1221014, \"Upper Austria\": 1436791,\n                \"Tyrol\": 728537,   \"Carinthia\": 557371,\n                \"Salzburg\": 538258,\"Vorarlberg\": 378490,\n                \"Burgenland\": 288229}\narea = pd.Series(area_dict)\npop = pd.Series(pop_dict)\nstates = pd.DataFrame({\"area\": area, \"population\": pop})\nstates\n\n\n\n\n\n\n\n\narea\npopulation\n\n\n\n\nVienna\n415\n1794770\n\n\nLower Austria\n19178\n1636287\n\n\nStyria\n16401\n1221014\n\n\nUpper Austria\n11982\n1436791\n\n\nTyrol\n12648\n728537\n\n\nCarinthia\n9536\n557371\n\n\nSalzburg\n7154\n538258\n\n\nVorarlberg\n2601\n378490\n\n\nBurgenland\n3965\n288229\n\n\n\n\n\n\n\nWe can access transfer it back into a Series by accessing it accordingly.\n\n2states.iloc[0:2, :]\n1states.loc[[\"Vienna\", \"Lower Austria\"], \"population\"]\n\n\n1\n\nSelect by position\n\n2\n\nSelect by label will both return a Series and you can look at a detailed description of the entire DataFrame for each column with\n\n\n\n\nVienna           1794770\nLower Austria    1636287\nName: population, dtype: int64\n\n\n\nstates.describe()\n\n\n\n\n\n\n\n\narea\npopulation\n\n\n\n\ncount\n9.000000\n9.000000e+00\n\n\nmean\n9320.000000\n9.533052e+05\n\n\nstd\n6357.483543\n5.736115e+05\n\n\nmin\n415.000000\n2.882290e+05\n\n\n25%\n3965.000000\n5.382580e+05\n\n\n50%\n9536.000000\n7.285370e+05\n\n\n75%\n12648.000000\n1.436791e+06\n\n\nmax\n19178.000000\n1.794770e+06\n\n\n\n\n\n\n\nthat already provides common properties we have seen in the Data sets section of the sister lecture. Of course we can also add new columns, if they have the same index\n\nstates[\"density\"] = states[\"population\"]/states[\"area\"]\nstates.sort_values(by=[\"density\"])\n\n\n\n\n\n\n\n\narea\npopulation\ndensity\n\n\n\n\nTyrol\n12648\n728537\n57.600965\n\n\nCarinthia\n9536\n557371\n58.449140\n\n\nBurgenland\n3965\n288229\n72.693317\n\n\nStyria\n16401\n1221014\n74.447534\n\n\nSalzburg\n7154\n538258\n75.238748\n\n\nLower Austria\n19178\n1636287\n85.321045\n\n\nUpper Austria\n11982\n1436791\n119.912452\n\n\nVorarlberg\n2601\n378490\n145.517109\n\n\nVienna\n415\n1794770\n4324.746988\n\n\n\n\n\n\n\nLet us use the Munich renting dataset for further investigations, as it is significantly bigger.\nWe can directly load it into a DataFrame and view its head or tail\n\n1df = pd.read_csv(\"https://data.ub.uni-muenchen.de/2/1/miete03.asc\", sep=\"\\t\")\n\ndf.head() # no output\ndf.tail()\n\n\n1\n\nLoad a csv like file.\n\n\n\n\n\n\n\n\n\n\n\nnm\nnmqm\nwfl\nrooms\nbj\nbez\nwohngut\nwohnbest\nww0\nzh0\nbadkach0\nbadextra\nkueche\n\n\n\n\n2048\n802.99\n8.54\n94\n4\n1992.0\n19\n1\n0\n0\n0\n0\n0\n0\n\n\n2049\n271.16\n7.75\n35\n1\n1966.0\n19\n0\n0\n0\n0\n0\n0\n0\n\n\n2050\n567.54\n8.11\n70\n3\n1973.0\n16\n0\n0\n0\n0\n0\n0\n0\n\n\n2051\n323.42\n9.24\n35\n1\n1970.0\n21\n0\n0\n0\n0\n0\n0\n0\n\n\n2052\n506.19\n7.79\n65\n3\n1966.0\n7\n0\n0\n0\n0\n1\n0\n0\n\n\n\n\n\n\n\nOf course we can transfer it into a numpy array.\n\ndf.to_numpy()\n\narray([[741.39,  10.9 ,  68.  , ...,   0.  ,   0.  ,   0.  ],\n       [715.82,  11.01,  65.  , ...,   0.  ,   0.  ,   0.  ],\n       [528.25,   8.38,  63.  , ...,   0.  ,   0.  ,   0.  ],\n       ...,\n       [567.54,   8.11,  70.  , ...,   0.  ,   0.  ,   0.  ],\n       [323.42,   9.24,  35.  , ...,   0.  ,   0.  ,   0.  ],\n       [506.19,   7.79,  65.  , ...,   1.  ,   0.  ,   0.  ]])\n\n\nBut this has the potential downside to cast everything to one type even as we have here clearly integers and floats mixed.\n\ndf.dtypes\n\nnm          float64\nnmqm        float64\nwfl           int64\nrooms         int64\nbj          float64\nbez           int64\nwohngut       int64\nwohnbest      int64\nww0           int64\nzh0           int64\nbadkach0      int64\nbadextra      int64\nkueche        int64\ndtype: object\n\n\nAs we can see the bj is a float64 while it should be a int64 we can fix this by calling\n\ndf = df.astype({\"bj\": \"int64\"})\ndf.dtypes\n\nnm          float64\nnmqm        float64\nwfl           int64\nrooms         int64\nbj            int64\nbez           int64\nwohngut       int64\nwohnbest      int64\nww0           int64\nzh0           int64\nbadkach0      int64\nbadextra      int64\nkueche        int64\ndtype: object\n\n\n\ndf = df.astype({\"bj\": \"int64\"})\ndf.dtypes\n\nnm          float64\nnmqm        float64\nwfl           int64\nrooms         int64\nbj            int64\nbez           int64\nwohngut       int64\nwohnbest      int64\nww0           int64\nzh0           int64\nbadkach0      int64\nbadextra      int64\nkueche        int64\ndtype: object\n\n\nWe can also transpose a DataFrame in the same style as we do in numpy\n\ndf.T\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n...\n2043\n2044\n2045\n2046\n2047\n2048\n2049\n2050\n2051\n2052\n\n\n\n\nnm\n741.39\n715.82\n528.25\n553.99\n698.21\n935.65\n204.85\n426.93\n446.33\n381.45\n...\n988.00\n397.98\n470.39\n505.99\n260.15\n802.99\n271.16\n567.54\n323.42\n506.19\n\n\nnmqm\n10.90\n11.01\n8.38\n8.52\n6.98\n11.55\n3.72\n5.40\n8.58\n4.95\n...\n11.36\n4.28\n9.80\n10.12\n5.00\n8.54\n7.75\n8.11\n9.24\n7.79\n\n\nwfl\n68.00\n65.00\n63.00\n65.00\n100.00\n81.00\n55.00\n79.00\n52.00\n77.00\n...\n87.00\n93.00\n48.00\n50.00\n52.00\n94.00\n35.00\n70.00\n35.00\n65.00\n\n\nrooms\n2.00\n2.00\n3.00\n3.00\n4.00\n4.00\n2.00\n3.00\n1.00\n3.00\n...\n3.00\n4.00\n2.00\n2.00\n2.00\n4.00\n1.00\n3.00\n1.00\n3.00\n\n\nbj\n1918.00\n1995.00\n1918.00\n1983.00\n1995.00\n1980.00\n1924.00\n1924.00\n1957.00\n1948.00\n...\n1992.00\n1957.00\n1983.00\n1987.00\n1948.00\n1992.00\n1966.00\n1973.00\n1970.00\n1966.00\n\n\nbez\n2.00\n2.00\n2.00\n16.00\n16.00\n16.00\n6.00\n6.00\n6.00\n6.00\n...\n17.00\n17.00\n16.00\n16.00\n16.00\n19.00\n19.00\n16.00\n21.00\n7.00\n\n\nwohngut\n1.00\n1.00\n1.00\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n1.00\n0.00\n0.00\n0.00\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n\n\nwohnbest\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\nww0\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\nzh0\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\nbadkach0\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n1.00\n\n\nbadextra\n0.00\n0.00\n0.00\n1.00\n1.00\n0.00\n1.00\n0.00\n0.00\n0.00\n...\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\nkueche\n0.00\n0.00\n0.00\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n...\n0.00\n0.00\n0.00\n1.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\n\n\n13 rows × 2053 columns\n\n\n\nbut note that this might mess up your data types\n\ndf.T.dtypes\n\n0       float64\n1       float64\n2       float64\n3       float64\n4       float64\n         ...   \n2048    float64\n2049    float64\n2050    float64\n2051    float64\n2052    float64\nLength: 2053, dtype: object\n\n\nWe can also use boolean indexing to filter by certain conditions\n\n# Filter for no central heating and no warm water\nfilter = (df[\"ww0\"] == 1) & (df[\"zh0\"] == 1)\ndf[filter]\n\n\n\n\n\n\n\n\nnm\nnmqm\nwfl\nrooms\nbj\nbez\nwohngut\nwohnbest\nww0\nzh0\nbadkach0\nbadextra\nkueche\n\n\n\n\n17\n796.07\n4.47\n178\n6\n1918\n1\n1\n0\n1\n1\n0\n0\n0\n\n\n24\n390.00\n4.24\n92\n3\n1918\n4\n1\n0\n1\n1\n0\n0\n0\n\n\n40\n360.48\n5.81\n62\n3\n1918\n9\n1\n0\n1\n1\n0\n0\n0\n\n\n78\n269.84\n4.35\n62\n2\n1918\n2\n0\n0\n1\n1\n0\n0\n0\n\n\n92\n132.24\n3.57\n37\n2\n1948\n11\n0\n0\n1\n1\n0\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1854\n183.09\n3.98\n46\n2\n1918\n25\n0\n0\n1\n1\n0\n0\n0\n\n\n1881\n281.21\n5.31\n53\n2\n1918\n3\n1\n0\n1\n1\n0\n0\n0\n\n\n1913\n362.00\n6.14\n59\n2\n1957\n3\n1\n0\n1\n1\n1\n0\n0\n\n\n1954\n409.42\n5.12\n80\n3\n1918\n5\n0\n0\n1\n1\n1\n0\n0\n\n\n2015\n420.26\n6.78\n62\n2\n1918\n2\n1\n0\n1\n1\n1\n0\n0\n\n\n\n\n61 rows × 13 columns\n\n\n\nWe can also use several functions to deal with missing data:\n\ndf.dropna(how=\"any\") deletes all rows that contain a NaN anywhere\ndf.fillna(value=1) fills all occurring NaN with a value (in this case 1)\npd.isna(df) will return a boolean mask for all NaN entries.\n\nWith user defined functions we can apply properties along specific axis\n\ndf.agg([\"sum\", \"min\", \"mean\"], axis=0)\n\n\n\n\n\n\n\n\nnm\nnmqm\nwfl\nrooms\nbj\nbez\nwohngut\nwohnbest\nww0\nzh0\nbadkach0\nbadextra\nkueche\n\n\n\n\nsum\n1.170401e+06\n17232.680000\n142879.000000\n5333.000000\n4.019690e+06\n23133.000000\n803.000000\n45.000000\n72.000000\n175.000000\n380.000000\n191.000000\n150.000000\n\n\nmin\n7.731000e+01\n1.470000\n17.000000\n1.000000\n1.918000e+03\n1.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nmean\n5.700930e+02\n8.393902\n69.595226\n2.597662\n1.957959e+03\n11.267901\n0.391135\n0.021919\n0.035071\n0.085241\n0.185095\n0.093035\n0.073064\n\n\n\n\n\n\n\nand transform, i.e. manipulate data\n\n1df.groupby(\"bj\")[\"bj\"].transform(lambda x: x - 1900)\n\n\n1\n\ngroupby will split the data into groups based on the criteria of Date.\n\n\n\n\n0       18\n1       95\n2       18\n3       83\n4       95\n        ..\n2048    92\n2049    66\n2050    73\n2051    70\n2052    66\nName: bj, Length: 2053, dtype: int64\n\n\nQuite often it is useful to find out how often a value appears, this can be done by\n\ndf[\"ww0\"].value_counts()\n\nww0\n0    1981\n1      72\nName: count, dtype: int64\n\n\nOf course we can combine or merge Series and DataFrame objects.\nThe handling is similar as with databases where there are different ways to _ join_ data. First we concat row-wise\n\nsections = [df[:3], df[3:7], df[1000:1001]]\npd.concat(sections)\n\n\n\n\n\n\n\n\nnm\nnmqm\nwfl\nrooms\nbj\nbez\nwohngut\nwohnbest\nww0\nzh0\nbadkach0\nbadextra\nkueche\n\n\n\n\n0\n741.39\n10.90\n68\n2\n1918\n2\n1\n0\n0\n0\n0\n0\n0\n\n\n1\n715.82\n11.01\n65\n2\n1995\n2\n1\n0\n0\n0\n0\n0\n0\n\n\n2\n528.25\n8.38\n63\n3\n1918\n2\n1\n0\n0\n0\n0\n0\n0\n\n\n3\n553.99\n8.52\n65\n3\n1983\n16\n0\n0\n0\n0\n0\n1\n0\n\n\n4\n698.21\n6.98\n100\n4\n1995\n16\n1\n0\n0\n0\n0\n1\n1\n\n\n5\n935.65\n11.55\n81\n4\n1980\n16\n0\n0\n0\n0\n0\n0\n0\n\n\n6\n204.85\n3.72\n55\n2\n1924\n6\n0\n0\n0\n0\n0\n1\n0\n\n\n1000\n640.99\n8.66\n74\n3\n1998\n14\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\nTo illustrate a simple join we define some new DataFrames\n\nleft = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]})\nright = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]})\npd.merge(left, right, on=\"key\")\n\n\n\n\n\n\n\n\nkey\nlval\nrval\n\n\n\n\n0\nfoo\n1\n4\n\n\n1\nfoo\n1\n5\n\n\n2\nfoo\n2\n4\n\n\n3\nfoo\n2\n5\n\n\n\n\n\n\n\nThe entire list on how this can be performed in a SQL like fashion can be found here.\nBefore we finish up our excursion into pandas we also want to show the plotting possibilities.\n\n%config InlineBackend.figure_formats = ['svg']\ndf.boxplot(column=[\"nm\"])\n\n\n\n\nBox plot of the total rent\n\n\n\n\nWe can also compute the correlation between two series\n\ndf[\"nm\"].corr(df[\"wfl\"])\n\nnp.float64(0.7074626685750687)\n\n\nor the entire DataFrame\n\ndf.corr()\n\n\n\n\n\n\n\n\nnm\nnmqm\nwfl\nrooms\nbj\nbez\nwohngut\nwohnbest\nww0\nzh0\nbadkach0\nbadextra\nkueche\n\n\n\n\nnm\n1.000000\n0.474797\n0.707463\n0.544247\n0.046899\n-0.066760\n0.160568\n0.147495\n-0.158632\n-0.190115\n-0.132485\n0.294068\n0.232006\n\n\nnmqm\n0.474797\n1.000000\n-0.226830\n-0.272906\n0.286289\n-0.074426\n0.150382\n0.110457\n-0.282217\n-0.298151\n-0.172683\n0.064557\n0.188240\n\n\nwfl\n0.707463\n-0.226830\n1.000000\n0.840645\n-0.199098\n-0.052163\n0.091258\n0.062842\n0.070852\n0.022593\n-0.025485\n0.276846\n0.086211\n\n\nrooms\n0.544247\n-0.272906\n0.840645\n1.000000\n-0.152770\n0.029349\n0.002112\n0.027458\n0.083504\n0.029149\n0.001135\n0.211483\n0.048320\n\n\nbj\n0.046899\n0.286289\n-0.199098\n-0.152770\n1.000000\n0.311889\n-0.109691\n0.060595\n-0.215680\n-0.321621\n-0.102482\n0.042413\n0.146066\n\n\nbez\n-0.066760\n-0.074426\n-0.052163\n0.029349\n0.311889\n1.000000\n-0.310562\n0.061914\n-0.069356\n-0.127157\n-0.039538\n0.057875\n0.076300\n\n\nwohngut\n0.160568\n0.150382\n0.091258\n0.002112\n-0.109691\n-0.310562\n1.000000\n-0.119985\n0.037104\n0.016269\n-0.011902\n0.062858\n0.051125\n\n\nwohnbest\n0.147495\n0.110457\n0.062842\n0.027458\n0.060595\n0.061914\n-0.119985\n1.000000\n-0.028540\n-0.045698\n-0.028517\n0.043673\n0.060236\n\n\nww0\n-0.158632\n-0.282217\n0.070852\n0.083504\n-0.215680\n-0.069356\n0.037104\n-0.028540\n1.000000\n0.520224\n0.079585\n-0.033713\n-0.053524\n\n\nzh0\n-0.190115\n-0.298151\n0.022593\n0.029149\n-0.321621\n-0.127157\n0.016269\n-0.045698\n0.520224\n1.000000\n0.146457\n-0.049728\n-0.072298\n\n\nbadkach0\n-0.132485\n-0.172683\n-0.025485\n0.001135\n-0.102482\n-0.039538\n-0.011902\n-0.028517\n0.079585\n0.146457\n1.000000\n-0.036066\n-0.051876\n\n\nbadextra\n0.294068\n0.064557\n0.276846\n0.211483\n0.042413\n0.057875\n0.062858\n0.043673\n-0.033713\n-0.049728\n-0.036066\n1.000000\n0.109827\n\n\nkueche\n0.232006\n0.188240\n0.086211\n0.048320\n0.146066\n0.076300\n0.051125\n0.060236\n-0.053524\n-0.072298\n-0.051876\n0.109827\n1.000000\n\n\n\n\n\n\n\nThere are a lot of additional features contained in pandas that we will learn by using it. Nevertheless let us recall some further references:\n\n10 minutes to pandas\nMcKinney (2022) (direct link to the Pandas section)\n7 unique pandas functions to elevate your analysis\n\n\n\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.",
    "crumbs": [
      "Scientific Computing",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "errorhandling/exception.html",
    "href": "errorhandling/exception.html",
    "title": "10  Exception handling",
    "section": "",
    "text": "10.1 Exceptions\nThe BaseException class is the base class for the built-in exceptions (see docs and tutorials) and all the built-in exception are inherited from this class. For writing our own exceptions however, we should use Exception as the base.\nIn order to introduce the concept let us show some of the most common exceptions\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:\n    inverse = 1.0 / number\n    print(f\"Check: {inverse} * {number} = {inverse * number}\")\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\n\n\n\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[1], line 4\n      1 numberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n      3 for number in numberlist:\n----&gt; 4     inverse = 1.0 / number\n      5     print(f\"Check: {inverse} * {number} = {inverse * number}\")\n\nZeroDivisionError: float division by zero\nWe can see that an ZeroDivisionError is raised for the third entry in the list of numberlist. What happened above is not a graceful exit as our little program just stopped at the point of exception and the last action of the interpreter was to print the traceback. Importantly, the other elements in the list are never looked at.\nWe can handle exceptions with the try-except construction to actually make sure that we react appropriately.\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\n1try:\n    for number in numberlist:\n        inverse = 1.0 / number\n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n2except ZeroDivisionError:\n3    print(\"Warning: zero does not have an inverse!\")\n\n\n1\n\nThe try clause starts with try and ends with except and is executed normal\n\n2\n\nThe exception clause starts at except, we can specify for which exception to look for.\n\n3\n\nThe code in the context of except is only accessed if an exception occurs.\n\n\n\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\nWarning: zero does not have an inverse!\nFrom the output we can see that the exception occurred and was handled properly. Nevertheless, the rest of the elements in the list are still not handled. To make sure this is the case we need to move our try/except into the loop.\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n                                                                  \n1for number in numberlist:\n2    try:\n        inverse = 1.0 / number\n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n3    except ZeroDivisionError:\n        print(\"Warning: zero does not have an inverse!\")\n\n\n1\n\nContext of the for loop\n\n2\n\nContext of the try clause\n\n3\n\nContext of the except clause\n\n\n\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\nWarning: zero does not have an inverse!\nCheck: 1.0 * 1 = 1.0\nCheck: 0.5 * 2 = 1.0\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[3], line 5\n      3 for number in numberlist:                                            # &lt;1&gt;\n      4     try:                                                          # &lt;2&gt;  \n----&gt; 5         inverse = 1.0 / number                                    # &lt;2&gt;\n      6         print(f\"Check: {inverse} * {number} = {inverse * number}\")# &lt;2&gt;\n      7     except ZeroDivisionError:                                     # &lt;3&gt;\n\nTypeError: unsupported operand type(s) for /: 'float' and 'str'\nNow everything works as expected and we see our second error TypeError happen for \"a\" in the list. We have multiple options as this point how to deal with more than one exception.\nThe construct has one further extension. After all of the except blocks we can place an else as well finally at the very end. The else block is called if no exception occurred and the finally is always called.\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n                                                                  \nfor number in numberlist:                                            \n    try:                                                            \n        inverse = 1.0 / number                                    \n1    except BaseException as be:\n2        print(f\"Error: I can not compute the inverse of {number}!\")\n        print(f\"Message is: {be}\")\n3    else:\n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n4    finally:\n        print(\"Let us work on the next element\")\n\n\n1\n\nInheritance allows you to match for all child error classes\n\n2\n\nIf we give the exception a name we can access it during the error handling.\n\n3\n\nThis block is only called if no exception occurred\n\n4\n\nThis block is always called and normally used to clean up\n\n\n\n\nCheck: -0.5 * -2 = 1.0\nLet us work on the next element\nCheck: -1.0 * -1 = 1.0\nLet us work on the next element\nError: I can not compute the inverse of 0!\nMessage is: float division by zero\nLet us work on the next element\nCheck: 1.0 * 1 = 1.0\nLet us work on the next element\nCheck: 0.5 * 2 = 1.0\nLet us work on the next element\nError: I can not compute the inverse of a!\nMessage is: unsupported operand type(s) for /: 'float' and 'str'\nLet us work on the next element\nCheck: 4.0 * 0.25 = 1.0\nLet us work on the next element\nOf course you can also work with exception and raise them yourself, see docs for all the details.\nTo raise an exception we use\nraise ValueError(\"No value given.\")\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 raise ValueError(\"No value given.\")\n\nValueError: No value given.\nWe can chain exceptions in case something happens during the handling of an exception\ntry:\n    open(\"missing.txt\")\nexcept OSError as e:\n    raise RuntimeError(\"Oh good, I can not handle this at the moment.\") from e\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[8], line 2\n      1 try:\n----&gt; 2     open(\"missing.txt\")\n      3 except OSError as e:\n\nFile ~/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/.venv/lib/python3.12/site-packages/IPython/core/interactiveshell.py:324, in _modified_open(file, *args, **kwargs)\n    318     raise ValueError(\n    319         f\"IPython won't let you open fd={file} by default \"\n    320         \"as it is likely to crash IPython. If you know what you are doing, \"\n    321         \"you can use builtins' open.\"\n    322     )\n--&gt; 324 return io_open(file, *args, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'missing.txt'\n\nThe above exception was the direct cause of the following exception:\n\nRuntimeError                              Traceback (most recent call last)\nCell In[8], line 4\n      2     open(\"missing.txt\")\n      3 except OSError as e:\n----&gt; 4     raise RuntimeError(\"Oh good, I can not handle this at the moment.\") from e\n\nRuntimeError: Oh good, I can not handle this at the moment.\nTo deactivate the chaining we use from None.\nAlternatively, you can enrich the error with a note:\ntry:\n    raise ValueError(\"No value given.\")\nexcept ValueError as e:\n    e.add_note(\"Oh good, I can not handle this at the moment.\")\n    raise\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[9], line 2\n      1 try:\n----&gt; 2     raise ValueError(\"No value given.\")\n      3 except ValueError as e:\n      4     e.add_note(\"Oh good, I can not handle this at the moment.\")\n\nValueError: No value given.\nOh good, I can not handle this at the moment.",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exception handling</span>"
    ]
  },
  {
    "objectID": "errorhandling/exception.html#exceptions",
    "href": "errorhandling/exception.html#exceptions",
    "title": "10  Exception handling",
    "section": "",
    "text": "Separate error handingSingle error handling\n\n\nIf we use multiple except we can interpret them similar to if, elif, and else statements, where we jump into one part as soon as we match.\n\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n                                                                  \nfor number in numberlist:                                            \n    try:                                                            \n        inverse = 1.0 / number                                    \n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n1    except ZeroDivisionError:\n        print(\"Warning: zero does not have an inverse!\")\n2    except TypeError:\n        print(\"Error: The inverse is only defined for a number!\")\n\n\n1\n\nContext of the ZeroDivisionError\n\n2\n\nContext of the TypeError\n\n\n\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\nWarning: zero does not have an inverse!\nCheck: 1.0 * 1 = 1.0\nCheck: 0.5 * 2 = 1.0\nError: The inverse is only defined for a number!\nCheck: 4.0 * 0.25 = 1.0\n\n\n\n\nSimilar to when we inherited for multiple classes, we can combine exceptions by putting them into a set (with ( and )).\n\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n                                                                  \nfor number in numberlist:                                            \n    try:                                                            \n        inverse = 1.0 / number                                    \n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n1    except (ZeroDivisionError, TypeError):\n        print(\"Error: I can not compute the inverse!\")            \n\n\n1\n\nHandling multiple errors in one except clause.\n\n\n\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\nError: I can not compute the inverse!\nCheck: 1.0 * 1 = 1.0\nCheck: 0.5 * 2 = 1.0\nError: I can not compute the inverse!\nCheck: 4.0 * 0.25 = 1.0",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exception handling</span>"
    ]
  },
  {
    "objectID": "errorhandling/exception.html#with-statements",
    "href": "errorhandling/exception.html#with-statements",
    "title": "10  Exception handling",
    "section": "10.2 with statements",
    "text": "10.2 with statements\nFor certain objects it is clear that some clean-up is required. The prime example is accessing a file:\n\npath = \"exception.qmd\"                  \n1file = open(path, \"r\")\ntry:\n2    print(file.readline())\nfinally:\n3    file.close()\n\n\n1\n\nOpen the file\n\n2\n\nRead from the file\n\n3\n\nWe always need to close the file again.\n\n\n\n\n# Exception handling\n\n\n\nThe short and easier to read version is\n\npath = \"exception.qmd\"\n1with open(path, \"r\") as file:\n    print(file.readline())\n\n\n1\n\nAutomatically closes the file as soon as the context is closed.\n\n\n\n\n# Exception handling\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis is not a full replacement of a try-except block.\n\n\n\npath = \"exception1.qmd\"\ntry:\n    with open(path, \"r\") as file:\n        print(file.readline())\nexcept OSError as os:\n    print(f\"Something happened: {os}\")\n\nSomething happened: [Errno 2] No such file or directory: 'exception1.qmd'\n\n\nIf you write your own class you can include the necessary functions for the with statement as follows, Example from GeeksForGeeks:\n\nclass MessageWriter(object):\n    def __init__(self, file_name):\n        self.file_name = file_name\n    \n    def __enter__(self):\n        self.file = open(self.file_name, \"w\")\n        return self.file\n\n    def __exit__(self, *args):\n        self.file.close()\n\n# using with statement with MessageWriter\n\nwith MessageWriter(\"my_file.txt\") as xfile:\n    xfile.write(\"hello world\")\n\nIt is also possible to collect exceptions and raise them in a group.\n\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\nerrors = []\n\nfor i, number in enumerate(numberlist):\n    try:                                                            \n        inverse = 1.0 / number\n    except BaseException as be:\n        be.add_note(f\"Happened for entry {i}\")\n        errors.append(be)\nif len(errors) &gt; 0:\n    raise ExceptionGroup(\"The following exceptions occurred:\", errors)\n\n  + Exception Group Traceback (most recent call last):\n  |   File \"/home/runner/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/.venv/lib/python3.12/site-packages/IPython/core/interactiveshell.py\", line 3577, in run_code\n  |     exec(code_obj, self.user_global_ns, self.user_ns)\n  |   File \"/tmp/ipykernel_2264/3846130209.py\", line 11, in &lt;module&gt;\n  |     raise ExceptionGroup(\"The following exceptions occurred:\", errors)\n  | ExceptionGroup: The following exceptions occurred: (2 sub-exceptions)\n  +-+---------------- 1 ----------------\n    | Traceback (most recent call last):\n    |   File \"/tmp/ipykernel_2264/3846130209.py\", line 6, in &lt;module&gt;\n    |     inverse = 1.0 / number\n    |               ~~~~^~~~~~~~\n    | ZeroDivisionError: float division by zero\n    | Happened for entry 2\n    +---------------- 2 ----------------\n    | Traceback (most recent call last):\n    |   File \"/tmp/ipykernel_2264/3846130209.py\", line 6, in &lt;module&gt;\n    |     inverse = 1.0 / number\n    |               ~~~~^~~~~~~~\n    | TypeError: unsupported operand type(s) for /: 'float' and 'str'\n    | Happened for entry 5\n    +------------------------------------",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exception handling</span>"
    ]
  },
  {
    "objectID": "errorhandling/exception.html#sec-error-assert",
    "href": "errorhandling/exception.html#sec-error-assert",
    "title": "10  Exception handling",
    "section": "10.3 Assertions",
    "text": "10.3 Assertions\nThere is an additional feature that is a good way to make sure that conditions are met before working on something. For this assert can be used. It tests if a condition is true and if this is not the case an AssertionError is raised.\n\nimport numbers\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:\n    try:\n        assert isinstance(number, numbers.Number)\n        assert number != 0\n        inverse = 1.0 / number\n    except AssertionError:\n        print(f\"Error: I can not compute the inverse of {number}!\")\n    else:\n        print(f\"Check: {inverse} * {number} = {inverse * number}\")\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\nError: I can not compute the inverse of 0!\nCheck: 1.0 * 1 = 1.0\nCheck: 0.5 * 2 = 1.0\nError: I can not compute the inverse of a!\nCheck: 4.0 * 0.25 = 1.0\n\n\nThis feature is usually used during development. Therefore, there is an option -O to deactivate it during the run of a python program.\nThis is often done, due to the fact that each of these assert statements takes some time to be processed.\npdm run python -O test_assert.py\n\n\nCheck: -0.5 * -2 = 1.0\nCheck: -1.0 * -1 = 1.0\n\n\nTraceback (most recent call last):\n  File \"/home/runner/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/errorhandling/../_assets/errorhandling/test_assert.py\", line 8, in &lt;module&gt;\n    inverse = 1.0 / number\n              ~~~~^~~~~~~~\nZeroDivisionError: float division by zero",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exception handling</span>"
    ]
  },
  {
    "objectID": "errorhandling/logging.html",
    "href": "errorhandling/logging.html",
    "title": "11  Logging",
    "section": "",
    "text": "Logging is the concept of that is used to protocol everything or at least every important action/result that happens in a program in order to allow track how the program is doing.\nThis is particularly useful for the developer of an application to perform\n\nerror analysis\nperformance analysis\ngeneral tracking\ndebugging 🐛\n\n\n\n\n\n\n\nTip\n\n\n\nA logger is particularly useful when an application is not running under the supervision of the developer. For example by another user, on an embedded system, a server, etc..\n\n\nPython provides an extensive module named logging for these purposes.\n\n1import logging\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:    \n    try:\n2        logging.info(f\"Working on number {number}\")\n        inverse = 1.0 / number\n    except ZeroDivisionError as e:\n        logging.error(f\"Tried to divide by zero, error is {e}\")\n    except TypeError:\n        logging.warning(f\"The list does not only contain numbers\")\n\n\n1\n\nInclude the module\n\n2\n\nWe can classify what type of content we are logging, the correspond to the log level\n\n\n\n\nERROR:root:Tried to divide by zero, error is float division by zero\nWARNING:root:The list does not only contain numbers\n\n\nBy default the logger write to the terminal. This might not always be what you want so this can be changed easily, together with the log level:\n\nimport logging\n1logging.basicConfig(filename=\"app.log\",\n2                    level=logging.INFO)\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:    \n    try:\n        logging.info(f\"Working on number {number}\")\n        inverse = 1.0 / number\n    except ZeroDivisionError as e:\n        logging.error(f\"Tried to divide by zero, error is {e}\")\n    except TypeError:\n        logging.warning(f\"The list does not only contain numbers\")\n\n\n1\n\nwe can specify a filename\n\n2\n\nwe can also specify what the current log level, i.e. what kind of messages are actually put into the logger.\n\n\n\n\ncat app.log\n\n\nINFO:root:Working on number -2\nINFO:root:Working on number -1\nINFO:root:Working on number 0\nERROR:root:Tried to divide by zero, error is float division by zero\nINFO:root:Working on number 1\nINFO:root:Working on number 2\nINFO:root:Working on number a\nWARNING:root:The list does not only contain numbers\nINFO:root:Working on number 0.25\nDEBUG:asyncio:Using selector: EpollSelector\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWe currently use the root logger and as soon as one handler is defined, i.e. the logger is called for the first time, calling logging.basicConfig has no effect, unless force=True is included.\nAs e consequence you need to restart Python if you want to use the code below as is consecutively.\n\n\nThere is a range of levels available that can always be extended. The default levels are in the following table and if you set the level only message of a type equal or higher (numeric value) are written to the output.:\n\nThe different log levels explained. The table is copied from docs, accessed on the 21st Nov. 24.\n\n\nLevel\nNumeric value\nWhat it means / When to use it\n\n\n\n\nlogging.NOTSET\n0\nWhen set on a logger, indicates that ancestor loggers are to be consulted to determine the effective level. If that still resolves to NOTSET, then all events are logged. When set on a handler, all events are handled.\n\n\nlogging.DEBUG\n10\nDetailed information, typically only of interest to a developer trying to diagnose a problem.\n\n\nlogging.INFO\n20\nConfirmation that things are working as expected.\n\n\nlogging.WARNING\n30\nAn indication that something unexpected happened, or that a problem might occur in the near future (e.g. ‘disk space low’). The software is still working as expected.\n\n\nlogging.ERROR\n40\nDue to a more serious problem, the software has not been able to perform some function.\n\n\nlogging.CRITICAL\n50\nA serious error, indicating that the program itself may be unable to continue running.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe default logging level setting is logging.WARNING as can be seen in the output of the first listing.\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that the logger module does not automatically flush to the file. Meaning it might not be a real time logging process.\n\n\nAn important additional feature is to specify the format of the message. This is particularly useful to get debugging information with certain timing information.\n\nimport logging                                                          \nlogging.basicConfig(format=\"%(asctime)s:%(levelname)s: %(message)s\",\n                    level=logging.DEBUG)\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:    \n    try:\n        logging.debug(f\"Working on number {number}\")\n        inverse = 1.0 / number\n    except ZeroDivisionError as e:\n        logging.error(f\"Tried to divide by zero, error is {e}\")\n    except TypeError:\n        logging.warning(f\"The list does not only contain numbers\")\n\n2024-11-27 14:05:22,918:DEBUG: Working on number -2\n2024-11-27 14:05:22,919:DEBUG: Working on number -1\n2024-11-27 14:05:22,919:DEBUG: Working on number 0\n2024-11-27 14:05:22,920:ERROR: Tried to divide by zero, error is float division by zero\n2024-11-27 14:05:22,921:DEBUG: Working on number 1\n2024-11-27 14:05:22,921:DEBUG: Working on number 2\n2024-11-27 14:05:22,922:DEBUG: Working on number a\n2024-11-27 14:05:22,923:WARNING: The list does not only contain numbers\n2024-11-27 14:05:22,923:DEBUG: Working on number 0.25\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe can use multiple loggers in a project. The usual convention is to use __name__ as the name by calling logging.getLogger(__name__).\n\nimport logging                                                          \nlogger = logging.getLogger(__name__)\nnumberlist = [-2, -1, 0, 1, 2, \"a\", 1/4]\n\nfor number in numberlist:    \n    try:\n        logger.debug(f\"Working on number {number}\")\n        inverse = 1.0 / number\n    except ZeroDivisionError as e:\n        logger.error(f\"Tried to divide by zero, error is {e}\")\n    except TypeError:\n        logger.warning(f\"The list does not only contain numbers\")\n\nERROR:__main__:Tried to divide by zero, error is float division by zero\nWARNING:__main__:The list does not only contain numbers\n\n\nOnce the logger is defined, we can use it in the same fashion as we did before. This allows us to use multiple logger in the same application.\n\n\nSee docs for more information.",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Logging</span>"
    ]
  },
  {
    "objectID": "errorhandling/testing.html",
    "href": "errorhandling/testing.html",
    "title": "12  Testing",
    "section": "",
    "text": "12.1 Unit Tests\nAs mentioned above unit tests are meant to make sure single sections of your code provide the functionality as they should.",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "errorhandling/testing.html#unit-tests",
    "href": "errorhandling/testing.html#unit-tests",
    "title": "12  Testing",
    "section": "",
    "text": "12.1.1 Via assert\nOne way to write a unit test is via assert statements, as they can also be deactivated during runtime, see Section 10.3, for this kind of unit tests an AssertionError signals a not successful test. Usually we write a separate function to perform the tests with the prefix test_\n\nimport numbers\nimport numpy as np\nimport traceback\n\ndef add(a: numbers.Number, b: numbers.Number) -&gt; numbers.Number:\n    return a + b\n\ndef test_add():\n    assert add(2, 1) == 3\n    assert add(0, 0) == 0\n    assert add(0.4, 1/3) == 0.7333333333333334\n    assert add(1, 1e-16) == 1\n    np.testing.assert_almost_equal(add(1, 1e-16), 1)\n\ntry:\n  test_add()\nexcept AssertionError as ae:\n  print(f\"Test failed!, {traceback.print_exception(ae)}\")\nelse:\n  print(\"Test passed!\")\n\nTest passed!\n\n\nThis is tedious and not very convenient to handle and work with.\n\n\n12.1.2 Via unittest\nThe module unittest is a much more comprehensive way of running your test. This is also where the directory tests from our introduction to pdm comes into play, see Chapter 2.\nTests are structured in this directory. We constructed a dummy project to show how testing can be done.\n$ tree module/\nmodule/\n├── pdm.lock\n├── pyproject.toml\n├── src\n│   └── rectangle\n│       ├── __init__.py\n│       └── rectangle.py\n└── tests\n1    └── rectangle\n2        ├── __init__.py\n3        └── test_rectangle.py\n\n1\n\ncreate a directory per module (directory) in your src folder with the same name\n\n2\n\noptionally make the test folder a module as well\n\n3\n\ncreate a file containing the tests with the same name\n\n\n\n\n\n\n\n\n Code for the example\n\n\n\n\n\n\nmodule/src/rectangle/__init__.py\n\nfrom .rectangle import *\n\nmodule/src/rectangle/rectangle.py\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def set_width(self, width):\n        self.width = width\n\n    def set_height(self, height):\n        self.height = height\n\nmodule/tests/rectangle/__init__.py\n\nfrom .test_rectangle import *\n\nmodule/tests/rectangle/test_rectangle.py\n\nimport unittest\nfrom src.rectangle import Rectangle\n\n\nclass TestGetAreaRectangle(unittest.TestCase):\n    def test_area_correct(self):\n        rectangle = Rectangle(2, 3)\n        self.assertEqual(rectangle.get_area(), 6, \"incorrect area\")\n\n    def test_area_incorrect(self):\n        rectangle = Rectangle(2, 3)\n        self.assertNotEqual(rectangle.get_area(), 5, \"correct area\")\n\n    def test_set_width(self):\n        rectangle = Rectangle(1, 1)\n        rectangle.set_width(0.7)\n        self.assertEqual(rectangle.get_area(), 0.7, \"set_width not working\")\n\n    def test_set_height(self):\n        rectangle = Rectangle(1, 1)\n        rectangle.set_width(0.7)\n        self.assertEqual(rectangle.get_area(), 0.7, \"set_width not working\")\n    \n    def test_deliberate_error(self):\n        rectangle = Rectangle(1, 1)\n        self.assertEqual(rectangle.get_area(), 2, \"deliberate error\")\n\n\n\nWe can run the tests from the terminal (note the change of directory is only necessary for these notes)\npdm run python -m unittest -v tests.rectangle\n\n\nINFO: Inside an active virtualenv \n/home/runner/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/.venv, reusing it.\nSet env var PDM_IGNORE_ACTIVE_VENV to ignore it.\ntest_area_correct (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_area_correct) ... ok\ntest_area_incorrect (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_area_incorrect) ... ok\ntest_deliberate_error (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_deliberate_error) ... FAIL\ntest_set_height (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_set_height) ... ok\ntest_set_width (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_set_width) ... ok\n\n======================================================================\nFAIL: test_deliberate_error (tests.rectangle.test_rectangle.TestGetAreaRectangle.test_deliberate_error)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/runner/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/_assets/errorhandling/module/tests/rectangle/test_rectangle.py\", line 26, in test_deliberate_error\n    self.assertEqual(rectangle.get_area(), 2, \"deliberate error\")\nAssertionError: 1 != 2 : deliberate error\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1)\n\n\n\n\n12.1.3 Via pytest\nA third party option is the module pytest docs that is often considered easier to handle than unittest. As there is a compatibility between pytest and unittest we can run\npdm run pytest -q\n\n\nINFO: Inside an active virtualenv \n/home/runner/work/MECH-M-DUAL-1-SWD/MECH-M-DUAL-1-SWD/.venv, reusing it.\nSet env var PDM_IGNORE_ACTIVE_VENV to ignore it.\n\n\n..F..                                                                    [100%]\n=================================== FAILURES ===================================\n__________________ TestGetAreaRectangle.test_deliberate_error __________________\n\nself = &lt;tests.rectangle.test_rectangle.TestGetAreaRectangle testMethod=test_deliberate_error&gt;\n\n    def test_deliberate_error(self):\n        rectangle = Rectangle(1, 1)\n&gt;       self.assertEqual(rectangle.get_area(), 2, \"deliberate error\")\nE       AssertionError: 1 != 2 : deliberate error\n\ntests/rectangle/test_rectangle.py:26: AssertionError\n=========================== short test summary info ============================\nFAILED tests/rectangle/test_rectangle.py::TestGetAreaRectangle::test_deliberate_error - AssertionError: 1 != 2 : deliberate error\n1 failed, 4 passed in 0.08s\n\n\nas it will automatically search in the directory tests for files with the prefix test_.",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "errorhandling/cicd.html",
    "href": "errorhandling/cicd.html",
    "title": "13  CI/CD",
    "section": "",
    "text": "13.1 GitHub actions\nAs we are working on GitHub for the lecture it is natural to look at a CI/CD solutions compatible with this system but we note that there are platform independent solutions and solutions for each of the major platform (GitLab, Azure DevOps, BitBucket, gitea, …) though with different styles and capabilities.\nOn GitHub this part is controlled by so called GitHub Actions, their documentation can be found here.\nLet us discuss here how to integrate the actions with a Python repository in our setup, so pdm and executing our unit tests.\nEverything is controlled via the directory .github/workflows were we find yml files to control what is happening after a push to github.\nLet us consider this testing.yml file and have a look what is happening\nThe entire job is executed on a so called public runner, provided by GitHub. In the case of GitHub these are virtual machines where all users have some resources to work with.\nTo see the output of the job we need to look into the section Actions in the project section. In our case, we will see that the action failed and we will receive an email telling us this as we have an error in our tests.",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>CI/CD</span>"
    ]
  },
  {
    "objectID": "errorhandling/cicd.html#github-actions",
    "href": "errorhandling/cicd.html#github-actions",
    "title": "13  CI/CD",
    "section": "",
    "text": "1on:\n  workflow_dispatch:\n  push:\n    branches: main\n\n2name: Testing\n\n3jobs:\n  testing:                              \n4    runs-on: ubuntu-latest\n    steps:                      \n5        - uses: actions/checkout@v4\n6        - name: Set up PDM\n7          uses: pdm-project/setup-pdm@v4\n8        - name: Install dependencies\n          run: |\n            pdm sync\n9        - name: Run Tests\n          run: |\n            pdm run -v pytest tests\n\n1\n\nspecify when to run all actions in this file\n\n2\n\nspecify a name to display on gitHub\n\n3\n\nall jobs to run are listed in this section\n\n4\n\nwe need to specify on what system to run (this depends on the runner - docker)\n\n5\n\ncheckout the git repository into the runner\n\n6\n\nwe can give a step a name\n\n7\n\nsetup and install the pdm project\n\n8\n\nsynchronize the pdm project\n\n9\n\nrun the tests",
    "crumbs": [
      "Runtime stability",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>CI/CD</span>"
    ]
  },
  {
    "objectID": "containerization/docker.html",
    "href": "containerization/docker.html",
    "title": "14  Docker",
    "section": "",
    "text": "14.1 Basics of Docker\nDocker understands itself as an open platform for developing, shipping, and running applications. By separating the application form the infrastructure it allows you to develop independent of the platform the container is running on later.\nThe docker platform allows you to run many applications in isolated environments in so called containers. This allows you to split up your application into different containers, for example the database is separate from your application and so forth. This allows you to update different parts independently from each other and revert changes if required. This approach is often summed up under the term micro services.\nDocker uses a specific architecture to achieve this, see Figure 14.1.\nMainly docker consists of a client docker and server dockerd (docker daemon) approach.",
    "crumbs": [
      "Containerization",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "containerization/docker.html#basics-of-docker",
    "href": "containerization/docker.html#basics-of-docker",
    "title": "14  Docker",
    "section": "",
    "text": "Figure 14.1: The docker architecture.\n\n\n\n\n\n14.1.1 The Docker daemon\nThe Docker daemon is in charge of all the Docker objects such as images, containers, networks, volumes and listens for API calls. Furthermore, it is able to communicate with other daemons.\n\n\n14.1.2 The Docker client\nThe docker client is your way to interact with Docker. Instructions like docker pull are sent as an API call to dockerd and executed there. The daemon that you communicate with does not necessarily be on the local machine nor does it always have to be the same.\n\n\n14.1.3 The Docker registries\nThe Docker registries are separate and strictly speaking not necessary for you to use Docker. There purpose is to store Docker images. This can be public like Docker Hub and Autamus1 or private for your organisation and tools like GitLab provide registries as well.\nWhen you use a command like docker pull you pull an image from a registry and with docker push you push it to a registry, the same as with Git.\nAgain, the client can talk to multiple registries.\nThe various docker objects in the above image are\n\n\n14.1.4 Images\n\nAn image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, with some additional customization. For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.\n\nIn order to build you own image you need a so called Dockerfile which uses a specific syntax to allow the Docker daemon to build an image from it. Each step in this image is called a layer and whenever you build an image only the layers that have changed need to be rebuild.\n\n\n14.1.5 Container\n\nA container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.\n\nThe container is isolated from the host machine due to the use of namespaces but you can allow interaction with the host machine like opening a network port or mounting a directory into the image.\n\nA container is defined by its image as well as any configuration options you provide to it when you create or start it. When a container is removed, any changes to its state that are not stored in persistent storage disappear.",
    "crumbs": [
      "Containerization",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "containerization/docker.html#hands-on",
    "href": "containerization/docker.html#hands-on",
    "title": "14  Docker",
    "section": "14.2 Hands on",
    "text": "14.2 Hands on\nIn order to get to know Docker you need to work with it.\n\n14.2.1 Docker commands\nThe Docker client or CLI provides you with a multitude of commands:\n&gt; docker --help\n\nUsage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default \"/home/c102338/.docker\")\n  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default \"/home/c102338/.docker/ca.pem\")\n      --tlscert string     Path to TLS certificate file (default \"/home/c102338/.docker/cert.pem\")\n      --tlskey string      Path to TLS key file (default \"/home/c102338/.docker/key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n\nManagement Commands:\n  builder     Manage builds\n  buildx*     Docker Buildx (Docker Inc., v0.9.1)\n  compose*    Docker Compose (Docker Inc., v2.11.1)\n  config      Manage Docker configs\n  container   Manage containers\n  context     Manage contexts\n  image       Manage images\n  manifest    Manage Docker image manifests and manifest lists\n  network     Manage networks\n  node        Manage Swarm nodes\n  plugin      Manage plugins\n  secret      Manage Docker secrets\n  service     Manage services\n  stack       Manage Docker stacks\n  swarm       Manage Swarm\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  build       Build an image from a Dockerfile\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  exec        Run a command in a running container\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n\nRun 'docker COMMAND --help' for more information on a command.\nTo get more help with docker, check out our guides at https://docs.docker.com/go/guides/\nDocker provides you with a nice Getting Started tutorial that, no wonder, uses Docker.\n\n\n\n\n\n\n\nExample 14.1 (Getting started with docker) By running:\n&gt; docker run -dp 80:80 docker/getting-started\nand than accessing localhost will give you a step by step introduction on what is happening and gives you step by step instructions to build an application in Docker.\n\n\n\n\nIn order to get a closer connection to what is happening in the rest of this course we go a different path. We will get a Jupyter Lab image and install additional resources as well as additional kernels,\n\n\n14.2.2 Jupyter Lab images\nThe Jupyter project provides us with a lot of Docker images on Docker Hub.\nIn order to have a bit of work to do we start with the minimal-notebook By default Docker will communicate with Docker Hub so if you call\n&gt; docker pull jupyter/minimal-notebook\n1Using default tag: latest\nlatest: Pulling from jupyter/minimal-notebook\n26e3729cf69e0: Downloading [=================================&gt;                 ]   20.3MB/30.43MB\n77950dd14dd3: Download complete\n6cca258439f9: Download complete\n4f4fb700ef54: Download complete\n2e32caa4e229: Download complete\ncd2cab437071: Download complete\n7d6f92933408: Download complete\ne7f578d273e6: Download complete\nb0173d44f264: Downloading [=================&gt;                                 ]  31.78MB/91.89MB\nbd04425a2ce4: Download complete\n0580703d6738: Downloading [===================&gt;                               ]  11.85MB/30.5MB\n8213e60e2a09: Pulling fs layer\n29e508695ebe: Waiting\n9530616136f0: Waiting\n4ee249fa7dd9: Waiting\n903968ec1329: Waiting\n6cf9a67917c1: Waiting\n2bacb72b4222: Waiting\n3 Digest: sha256:109283771021997caa770d367052d5c6ff640a76f8ace0bb3e60d8710fdddd8a\nStatus: Downloaded newer image for jupyter/minimal-notebook:latest\ndocker.io/jupyter/minimal-notebook:latest\n\n1\n\nWhen you store an image in a registry it gets a tag or image id, where the tag is usually a human readable alias to an image id. This is very similar to the commit id in Git. In fact it is again a hash, this time with a SHA256 of the image’s JSON configuration.\n\n2\n\nThe next lines all look similar. An image ID and than the status (Downloading, Download complete, Pulling fs layer, Waiting).\nWe can see that an image is not a single file but consists of multiple images that in return consist of layers. Each layer is packed as an tar ball (similar to zip).\n\n3\n\nHere, and with the additional two lines, the Docker daemon tells us what image was downloaded, from where, and if the download was a success.\n\n\n\n\n\n\n\n\nNote\n\n\n\nA note of caution right away. Please be careful when working with Docker! As you could see there is no need to log in to get an image and we also don’t directly see what these images do. Don’t just randomly run images without considering the risks! When you base your image on something be careful that the source is trustworthy. In this case Docker Hub helps us as jupyter is a verified source.\n\n\nNow we have the image and we can run it. Let us do so by calling:\n\n\n14.2.3 Running the first instance\n&gt; docker run jupyter/minimal-notebook:latest\nEntered start.sh with args: jupyter lab\nExecuting the command: jupyter lab\n[I 2023-01-05 14:33:26.282 ServerApp] jupyter_server_terminals | extension was successfully linked.\n[I 2023-01-05 14:33:26.285 ServerApp] jupyterlab | extension was successfully linked.\n[W 2023-01-05 14:33:26.286 NotebookApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.\n[W 2023-01-05 14:33:26.286 NotebookApp] 'port' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.\n[W 2023-01-05 14:33:26.286 NotebookApp] 'port' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.\n[I 2023-01-05 14:33:26.288 ServerApp] nbclassic | extension was successfully linked.\n[I 2023-01-05 14:33:26.288 ServerApp] Writing Jupyter server cookie secret to /home/jovyan/.local/share/jupyter/runtime/jupyter_cookie_secret\n[I 2023-01-05 14:33:26.401 ServerApp] notebook_shim | extension was successfully linked.\n[I 2023-01-05 14:33:26.512 ServerApp] notebook_shim | extension was successfully loaded.\n[I 2023-01-05 14:33:26.513 ServerApp] jupyter_server_terminals | extension was successfully loaded.\n[I 2023-01-05 14:33:26.513 LabApp] JupyterLab extension loaded from /opt/conda/lib/python3.10/site-packages/jupyterlab\n[I 2023-01-05 14:33:26.513 LabApp] JupyterLab application directory is /opt/conda/share/jupyter/lab\n[I 2023-01-05 14:33:26.515 ServerApp] jupyterlab | extension was successfully loaded.\n[I 2023-01-05 14:33:26.517 ServerApp] nbclassic | extension was successfully loaded.\n[I 2023-01-05 14:33:26.517 ServerApp] Serving notebooks from local directory: /home/jovyan\n[I 2023-01-05 14:33:26.517 ServerApp] Jupyter Server 2.0.6 is running at:\n[I 2023-01-05 14:33:26.517 ServerApp] http://b702c7cbc0b9:8888/lab?token=074a04006ad89060e18cfc1bb3814d323741a832d2dcaa88\n[I 2023-01-05 14:33:26.517 ServerApp]  or http://127.0.0.1:8888/lab?token=074a04006ad89060e18cfc1bb3814d323741a832d2dcaa88\n[I 2023-01-05 14:33:26.517 ServerApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n[C 2023-01-05 14:33:26.519 ServerApp] \n    \n    To access the server, open this file in a browser:\n        file:///home/jovyan/.local/share/jupyter/runtime/jpserver-7-open.html\n    Or copy and paste one of these URLs:\n        http://b702c7cbc0b9:8888/lab?token=074a04006ad89060e18cfc1bb3814d323741a832d2dcaa88\n     or http://127.0.0.1:8888/lab?token=074a04006ad89060e18cfc1bb3814d323741a832d2dcaa88\n\n\n\n\n\n\nNote\n\n\n\nThe :latest is not required as this is the only image you have here, but to have the syntax correct from the start never hurts.\n\n\nYou see a couple of log messages and at the end you are invited to access the server via http://127.0.0.1:8888/lab?token=&lt;token&gt;\nIf you try this you will see that the page can not be reached.\n\n\n\n\n\n\n Do you have any idea why?\n\n\n\n\n\nAs mentioned earlier a container is separated from the host resources. In particular this means that the network is not shared. 127.0.0.1 is the localhost, meaning the network interface that this process has access to locally. There are several commands in Linux to list open ports one possibility is netstat -lntup\nThe Jupyter Lab Server tries to communicate on port 8888 but on its local host, which is not the host machine.\n\n\n\nIn order to interface with the container we need to establish the connection to the port. By running docker run --help we can have a look on at the options for the subcommand run.\n&gt; docker run --help\n\nUsage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\nOptions:\n      --add-host list                  Add a custom host-to-IP mapping (host:ip)\n  -a, --attach list                    Attach to STDIN, STDOUT or STDERR\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cgroupns string                Cgroup namespace to use (host|private)\n                                       'host':    Run the container in the Docker host's cgroup namespace\n                                       'private': Run the container in its own private cgroup namespace\n                                       '':        Use the cgroup namespace as configured by the\n                                                  default-cgroupns-mode option on the daemon (default)\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 CPU shares (relative weight)\n      --cpus decimal                   Number of CPUs\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         Run container in background and print container ID\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --domainname string              Container NIS domain name\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           Print usage\n  -h, --hostname string                Container host name\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    Keep STDIN open even if not attached\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            Kernel memory limit\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   Memory limit\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network network                Connect a container to a network\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --platform string                Set platform if server is multi-platform capable\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   Publish a container's port(s) to the host\n  -P, --publish-all                    Publish all exposed ports to random ports\n      --pull string                    Pull image before running (\"always\"|\"missing\"|\"never\") (default \"missing\")\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             Automatically remove the container when it exits\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     Mount a tmpfs directory\n  -t, --tty                            Allocate a pseudo-TTY\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\nYou have a look at\n-p, --publish list                   Publish a container's port(s) to the host\nand with a bit more help from the Docs you figure out the syntax with &lt;port host&gt;:&lt;port container&gt; and we run:\n&gt; docker run -p 8888:8888 jupyter/minimal-notebook\nand you have access to the Jupyter Lab.\n\n\n\n\n\n\nNote\n\n\n\nThe Server itself does not know what port you use on your host machine and therefore it will always tell you to connect to http://127.0.0.1:8888/lab?token=&lt;token&gt;, unless you tell it to change this.\n\n\nNow you can use it just like any other Jupyter lab instance with - most likely - the latest version of Python (3.10.8 when typing these notes).\n\n\n14.2.4 Looking around in the container\nObviously, the first thing you want to do is to have a look and run your latest homework. Nevertheless, checking in the Terminal (you find it in the Launcher under Other) where you currently are located with a quick pwd you will get the following\n(base) jovyan@0648fadeef68:~$ pwd\n/home/jovyan\nUnless your parents are big fans your name is not jovyan and you have no user on your host machine with that name.\nThis is actually your container file system and user management. You can spot it right away in the terminal prompt. &lt;user name&gt;@&lt;container id&gt;: and you can verify it by listing all the containers currently running. With an educated guess you try to find the command:\n&gt; docker --help | grep List\n  images      List images\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\nand run\ndocker ps\nCONTAINER ID   IMAGE                      COMMAND                  CREATED          STATUS                    PORTS                                       NAMES\n0648fadeef68   jupyter/minimal-notebook   \"tini -g -- start-no…\"   24 minutes ago   Up 24 minutes (healthy)   0.0.0.0:8888-&gt;8888/tcp, :::8888-&gt;8888/tcp   suspicious_solomon\nNow you know what is happening but you still can not run your files. If you have a look around in the file navigation you will not get lucky either. Again, the container separates the file systems by default. But no need to despair, the file browser has an upload feature and you go for that.\nYou can open your file make some changes and save them again.\n\n\n\n\n\n\n What happens if we restart the container?\n\n\n\n\n\nThe content inside a container is not persistent. Meaning, if a new container is created from an image (which is done by the docker run command) the previous changes are no longer visible.\n\n\n\n\n\n14.2.5 Bind mounting data into the container\nWith another educated guess you figure out the option to do a bind mount inside the container.\n&gt; docker run --help | grep mount\n      --mount mount                    Attach a filesystem mount to the container\n  -v, --volume list                    Bind mount a volume\nSo you run your container again with\n&gt; docker run -p 8888:8888 -v \"${PWD}\":/home/jovyan/work jupyter/minimal-notebook\nand when navigating to the work folder you see everything in the local directory (on the host) you ran the container.\nChanges done to files in this directory are now also visible on the host machine.\n\n\n\n\n\n\nNote\n\n\n\nIt is important to remember that you are nevertheless inside a container. This means all your action - including storing data - are run by the user that is present in the container.\n(base) jovyan@82a302b74f60:~/work$ id\nuid=1000(jovyan) gid=100(users) groups=100(users)\nAs a consequence, files that do not have these access rights will not be shown and if you save a file it will belong to user 1000 on the host machine, whoever that is. If your host user is different you can change the user inside the container by adding the option --user &lt;uid&gt;:&lt;gid&gt; to the run command.\n\n\n\n\n14.2.6 Dockerfile\nNow that you have all this in order you run your examples but are greeted with the response that numpy is not available. Of course you can install it in the terminal - via pip - or directly via Python but next time you start the image you need to do it again.\nSo we decide to create a new image and use that instead. A new image is created with a Dockerfile, seeDockerfile reference for full details.\nSo we create a the file Dockerfile with the following content, see Documentation\n# Start from a core stack version\nFROM jupyter/minimal-notebook:latest\n# Install in the default python3 environment\nRUN pip install --quiet --no-cache-dir 'numpy' && \\\n    fix-permissions \"${CONDA_DIR}\" && \\\n    fix-permissions \"/home/${NB_USER}\"\n\nThis file first specifies that it starts working FROM the jupyter/minimal-notebook:latest image.\nSecond pip is used to install numpy and to fix some permissions that are required due to the fact that root is not used in this image.\n\nYou can build you own image by calling:\n&gt; docker build -t ulg22:latest .\nSending build context to Docker daemon  114.2kB\nStep 1/2 : FROM jupyter/minimal-notebook:latest\n ---&gt; f0246d6dd87f\nStep 2/2 : RUN pip install --quiet --no-cache-dir 'numpy' &&     fix-permissions \"${CONDA_DIR}\" &&     fix-permissions \"/home/${NB_USER}\"\n ---&gt; Running in 18628a817de6\nRemoving intermediate container 18628a817de6\n ---&gt; 2265b09a0add\nSuccessfully built 2265b09a0add\nSuccessfully tagged ulg22:latest\nand run it with\n&gt; docker run -it -p 8888:8888 ulg22\nNow lets do something more fancy.\n\n\n14.2.7 Add a second kernel to the notebook\nThe second language used in the class is R so why not include it into the container. Checking the documentation of R reveals that we need the IRkernel package and the installation instructions translate to\n# Start from a core stack version\nFROM jupyter/minimal-notebook:latest\n\nRUN mamba install --quiet --yes R && \\\n    mamba clean --all -f -y\nRUN Rscript -e \"install.packages(c(\\\"IRkernel\\\"), repos = c(\\\"http://cran.rstudio.com\\\"))\" && \\\n    Rscript -e \"IRkernel::installspec()\" && \\\n    jupyter labextension install @techrah/text-shortcuts\n\n\n14.2.8 Additional notes on Dockerfiles\nThere are several more commands that can be used in the Dockerfile:\nAs seen above the # symbol can used for comments in a Dockerfile.\nWORKDIR /path/to/workdir\nto set the working directory for most of the next instruction inside the image/container,\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\nto copy files from the host file system (relative path to the context of the build) to the image/container file system (relative path to WORKDIR),\nENTRYPOINT [\"executable\", \"param1\", \"param2\"]\nto allow you to configure a container that will run as an executable, in our case the ENTRYPOINT is defined such that Jupyter Lab starts automatically. Only the last specified ENTRYPOINT is used.\nUSER &lt;user&gt;[:&lt;group&gt;]\nor\nUSER &lt;UID&gt;[:&lt;GID&gt;]\nto specify the user (and group) to use for the remainder of the current stage. It is therefore used for the instructions RUN, ENTRYPOINT, etc.\nSimilar to the .gitignore there is also the possibility to specify a .dockerignore file. Before the Docker CLI sends the context of the build to the docker daemon (remote or local) it excludes the files and paths that are specified in this file. This can be used to exclude sensitive or large files from being sent to the daemon.\n\n\n\n\nKandolf, Peter. 2024. “ULG Data Science - WS22 971001 Software - Introduction to Python, Git, and Docker.” https://doi.org/10.5281/zenodo.10532424.",
    "crumbs": [
      "Containerization",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "containerization/docker.html#footnotes",
    "href": "containerization/docker.html#footnotes",
    "title": "14  Docker",
    "section": "",
    "text": "A Semi-Autonomous Build System for Scientific Containers↩︎",
    "crumbs": [
      "Containerization",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Docker</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Collection of interesting reads",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "summary.html#collection-of-interesting-reads",
    "href": "summary.html#collection-of-interesting-reads",
    "title": "Summary",
    "section": "",
    "text": "Semantic Versioning How to design the version of your project.",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to\nKnow about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nInden, Michael. 2023. Python Lernen – Kurz & Gut -.\nSebastopol: O’Reilly.\n\n\nKandolf, Peter. 2024. “ULG Data Science - WS22 971001 Software -\nIntroduction to Python, Git, and Docker.” https://doi.org/10.5281/zenodo.10532424.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based\nIntroduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed.\nSebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nMing, Frost. 2019. “PDM project\nsite.” Online: Accessed 09-September-2024. https://pdm-project.org/.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with\nGit. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed.\nSebastopol: O’Reilly.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on\nIntroduction. München: No Starch Press.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "basics/index.html",
    "href": "basics/index.html",
    "title": "Basics",
    "section": "",
    "text": "In this secton we are going to lay the ground work for our introduction into softwaredesign by looking at:\n\nour main programming language - Python - see 1  Introduction to Python\nour way of managing packages - pdm - see 2  Package manager\nour way of keeping track of our code and projects - git - see 3  Version Control\n\nWe will use these tools throughout the notes. Our aim is, that by the end of the notes you will use them without a second thought.\n\n\n\n\n\n\nNote\n\n\n\nAs mentioned earlier, these notes assume that you have some basic knowledge of programming and we build on that knowledge to widen your horizon.\n\n\nAt the end of this part you will also find an 4  Epilogue where we bind them all together with some final thoughts.\n\nAdditional resources\nHere you find some literature regarding the topics covered in this section.\n\nPython\n\nMatthes (2023): Python Crash Course - A hands-on, project-based introduction to programming; Online Material.\nPython Cheat Sheet provided by Matthes (2023).\nMcKinney (2022): Python for data analysis 3e; Online and Print\nVasiliev (2022): Python for Data Science - A Hands-On Introduction\nInden (2023): Python lernen – kurz & gut; German\n\n\n\nPDM\n\nProject page pdm-project.org\nProject on GitHub\n\n\n\nGit\n\nPonuthorai and Loeliger (2022): Version Control with Git: Powerful Tools and Techniques for Collaborative Software Development;\nChacon and Straub (2014): Pro Git: Everything you need to know about Git, Online\nSiessegger (2024): Git – kurz & gut; German\nPolge (2024): A Visual Git Reference, Online\nCoglan (2014): A book that tells you how to build Git on your own, Shop\nPolge (2024): Write yourself a Git; an online book that tells you how to build Git on your own, Link\nGit cheat sheet from education.github.com\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git: Everything You Need to Know about Git. 2nd ed. Apress. https://git-scm.com/book/en/v2.\n\n\nCoglan, James. 2014. “Building Git.” https://shop.jcoglan.com/building-git/.\n\n\nInden, Michael. 2023. Python Lernen – Kurz & Gut -. Sebastopol: O’Reilly.\n\n\nMatthes, Eric. 2023. Python Crash Course - a Hands-on, Project-Based Introduction to Programming. 3rd ed. No Starch Press. https://ehmatthes.github.io/pcc_3e/.\n\n\nMcKinney, Wes. 2022. Python for Data Analysis 3e. 3rd ed. Sebastopol, CA: O’Reilly Media. https://wesmckinney.com/book/.\n\n\nPolge, Thibault. 2024. “Write Yourself a Git!” https://wyag.thb.lt/.\n\n\nPonuthorai, Prem Kumar, and Jon Loeliger. 2022. Version Control with Git. 3rd ed. Sebastopol: \"O’Reilly Media, Inc.\".\n\n\nSiessegger, Nina. 2024. Git – Kurz & Gut. 2nd ed. Sebastopol: O’Reilly.\n\n\nVasiliev, Yuli. 2022. Python for Data Science - a Hands-on Introduction. München: No Starch Press.",
    "crumbs": [
      "Basics"
    ]
  },
  {
    "objectID": "sss/index.html",
    "href": "sss/index.html",
    "title": "Self Study Sessions",
    "section": "",
    "text": "Important\n\n\n\nThis lecture consists of several self study sessions!\nIn these sections you are supposed to work on the given topics on your own and in your own time. We will try to provide helpful references for books and online material that can help you but you are not limited to these materials.\nIn order to get an idea on how much you understand of the material we provide exercises.\n\n\nSessions:\n\n5  Self Study Session I concerned with: Variables, Data Types, Functions, Typing and Type Hints, Modules",
    "crumbs": [
      "Self Study Sessions"
    ]
  },
  {
    "objectID": "sc/index.html",
    "href": "sc/index.html",
    "title": "Scientific Computing",
    "section": "",
    "text": "Scientific Computing, also known as computational science, technical computing, scientific computation is a field in science that uses computing capabilities to solve and understand complex (physical) problems. The field contains many categories including:\n\nAlgorithms (numerical and non-numerical) for mathematical and computational modelling and computer based simulation form problems arising in sciences and humanities.\nComputer hardware to develop and optimize the advanced system hardware, firmware, network and data management such as High Performance Computing (HPC).\nComputing infrastructure to support sciences and engineering to solve their problems.\n\nWe can not hope to cover all of this but we can start by looking at some specific libraries in Python that help you deal with common task in scientific computing.\n\n8  NumPy\n9  Pandas",
    "crumbs": [
      "Scientific Computing"
    ]
  },
  {
    "objectID": "errorhandling/index.html",
    "href": "errorhandling/index.html",
    "title": "Runtime stability",
    "section": "",
    "text": "When we write code there are going to be errors in different parts of the software at hand. Some errors are purely in the structure of the code and we will discuss how unit tests and static code analysis can help to find such errors early. One class of errors you see here are Syntax Errors (SyntaxError) that prevents an application from running all together as the Python parser does not know how to interpret the code.\nOther errors occur during the runtime of the application and are often not avoidable, e.g. the connection to a database is not available, data is corrupted, etc.. In order to deal with such situations we will discuss exception handling and how do gracefully shut down.\nFor all of these issues it is often necessary that we as developer get feedback on how, where, when, etc. an error occurred and therefore logging is introduced.",
    "crumbs": [
      "Runtime stability"
    ]
  },
  {
    "objectID": "containerization/index.html",
    "href": "containerization/index.html",
    "title": "Containerization",
    "section": "",
    "text": "You need a different software/library than installed\nQuite often the software that is installed on a machine that you have access to or are allowed to work with does not have the specific library, software, software version that you need to work with. Even more often you do not have the rights to install software at your own freedom on the machine and the admin takes quite long to install what you need.",
    "crumbs": [
      "Containerization"
    ]
  },
  {
    "objectID": "containerization/index.html#virtualisation-and-containerisation",
    "href": "containerization/index.html#virtualisation-and-containerisation",
    "title": "Containerization",
    "section": "Virtualisation and containerisation",
    "text": "Virtualisation and containerisation\nYour computer or physical machine is organised approximately like in Figure 1.\n\n\n\n\n\n\nFigure 1: Organisation of process on a machine.\n\n\n\nAs virtualisation and containerisation is something that lives next to this the prefix host is used to make sure everybody knows what we are talking about.\nStarting from the bottom you have some hardware. This is your CPU, various levels and layers of storage, your network device, keyboard, monitor, and so forth.\nThe host kernel is mainly the operating system. It provides you with a standardized interface to the hardware so you do not need to use different programs depending on the brand of monitor you use.\nThe host process is what you mainly interface with on a computer. This could be MS Word, you favourite internet browser or music player, in short applications are made up of processes.",
    "crumbs": [
      "Containerization"
    ]
  },
  {
    "objectID": "containerization/index.html#virtualisation",
    "href": "containerization/index.html#virtualisation",
    "title": "Containerization",
    "section": "Virtualisation",
    "text": "Virtualisation\nNow you can run some virtualisation on your machine. As the name suggests it will provide a virtual environment. For example Virtual Box is a widely used way to bring Linux to your Windows machine or the other way around. This way you only need set of hardware but have the possibilities of different operation systems available to you. This looks something like the following\n\n\n\n\n\n\nFigure 2: Organisation of process within a virtual machine.\n\n\n\nFrom the view of the host the entire virtualisation is one (or more) guest processes, illustrated above by the green box.\nThe hypervisor is translating between the host kernel and the virtual hardware that is needed for the guest kernel. This means, the guest kernel is seeing its own set of hardware (CPU, GPU, Keyboard, and so forth). Quite often you can for example decide if a connected USB Drive is used by the guest or the host. On top of the hypervisor everything is the same as on the host. This also means you use up resources to provide this.",
    "crumbs": [
      "Containerization"
    ]
  },
  {
    "objectID": "containerization/index.html#containerisation",
    "href": "containerization/index.html#containerisation",
    "title": "Containerization",
    "section": "Containerisation",
    "text": "Containerisation\nNow containerisation is a operating system based virtualisation.\n\n\n\n\n\n\nFigure 3: Organisation of process within a container.\n\n\n\nYou have a specific runtime but not a second kernel. The runtime takes care of the separation on the level of namespaces. We only discuss Linux containers in this detail and do not guarantee that Windows containers use a different mechanism. Namespaces are a mechanism of the kernel that separates or partitions resources such that different processes use different set of resources. For examples, the container might only see 4 of your 16 CPUs, no network drive, can only use 2 GB of main storage and so forth. This separation also makes sure that there is no leakage of information from one process to the other. You can also have a different set of rights or run as a different user. Other than with a virtualisation the host kernel is used and also the host hardware if is allowed via the namespace configuration.",
    "crumbs": [
      "Containerization"
    ]
  },
  {
    "objectID": "containerization/index.html#different-container-solutions",
    "href": "containerization/index.html#different-container-solutions",
    "title": "Containerization",
    "section": "Different container solutions",
    "text": "Different container solutions\nThe containerisation started with Docker. Nowadays, there are a different solutions available with a different focus and different set of functionalities:\n\nOpen Container Initiative for example Podman\n\nopen industry standards for container format & runtime\nAllows for a daemon-less container engine for running OCI containers (root or rootless)\n\nAppTainer - formally know as Singularity.\n\ndesigned for HPC\nuses Linux namespaces but leaves resource limitations to the batch system\nfeels like running a program\nallows access to all host resources\nruns in the user namespace\n\nDocker\n\nbased on Linux namespaces and resource limitations\nclient server model (dockerd)\ntypical microservices (see docker-compose for a swarm)\nvery popular with a huge collection on dockerhub\n\n\nIf you want to fully understand what a container actually is it is very instructive to have a look at this video by Liz Rice Learn how to code a container using Go code.\n\n\n\n\n\n\nFigure 4: Containers From Scratch by Liz Rice.\n\n\n\nOur focus will be on Docker.",
    "crumbs": [
      "Containerization"
    ]
  }
]